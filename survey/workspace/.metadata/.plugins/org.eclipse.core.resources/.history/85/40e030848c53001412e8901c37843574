package asia.wildfire.actsocial.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import asia.wildfire.actsocial.impl.ActsocialDataServiceImpl;
import asia.wildfire.actsocial.model.DailyThread;
import asia.wildfire.actsocial.model.Module;
import asia.wildfire.actsocial.model.TopPost;
import asia.wildfire.actsocial.model.Topic;
import asia.wildfire.connection.Mysql;
import asia.wildfire.utils.DateUtils;
import asia.wildfire.utils.JsonParser;
import asia.wildfire.utils.NumberUtils;

import asia.wildfire.utils.StringUtils;
import com.google.common.base.Joiner;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.common.collect.Sets;
import com.ibm.actor.utils.Utils;

public class
        DailyThreadDao extends BasicDao<DailyThread> {
    private static String SEPERATOR = "---";

    public enum AnalyticsType {

        MEDIA_ALL, TOPIC_ALL, NORMAL, ALL_ALL;

        public String value() {
            return this.toString().toLowerCase();
        }
    }

    public Map<String, Object> queryDailyThreadResultForSingleThread(Module module, String period,String threadId, Calendar startDate,Calendar endDate) {
    	Map<String, Object> singleMap = Maps.newHashMap();
    	String sql = "select scope, GROUP_CONCAT(if(topic = 'ALL', '', topic) SEPARATOR '|') as topics, thread_id, site_id, site_name, media, date, title, url, (SUM(IF(topic != 'ALL', 0, posts)) + SUM((IF(topic != 'ALL', 0, ifnull(reposts, 0))))) as posts, sum(IF(topic != 'ALL', 0, positive)) as positive, sum(IF(topic != 'ALL', 0, negative)) as negative, sum(IF(topic != 'ALL', 0, neutral)) as neutral,  SUM((IF(topic != 'ALL', 0, ifnull(reposts, 0)))) as reposts, sum(IF(topic != 'ALL', 0, comments)) as comments,max(views) as views, updated, repost_to, latitude, longitude from daily_threads where  scope in ("+module.getScopeString()+") and ymd >= '" + DateUtils.date2MysqlFormat(startDate)+ "' and ymd < '" + DateUtils.date2MysqlFormat(endDate)+ "' and thread_id = '"+threadId+"' group by scope,thread_id";
        try (Connection conn = Mysql.getConnection(Mysql.DataBase.ACTSOCIAL); PreparedStatement ps = conn.prepareStatement(sql);) {
            try (ResultSet rs = ps.executeQuery();) {
                if (rs.next()) {
                    singleMap.put("scope", module.getScope());
                    singleMap.put("thread_id", rs.getString("thread_id"));
                    String thisTopics = rs.getString("topics");
                    thisTopics = removeDuplicateTopic(thisTopics.trim());
                    if (null != thisTopics && !"".equals(thisTopics)) {
                        if (thisTopics.charAt(0) == '|' && thisTopics.charAt(thisTopics.length() - 1) == '|') {
//                            thisTopics = thisTopics;
                        } else if(thisTopics.charAt(0) == '|' && thisTopics.charAt(thisTopics.length() - 1) != '|') {
                            thisTopics = thisTopics + "|";
                        } else if(thisTopics.charAt(0) != '|' && thisTopics.charAt(thisTopics.length() - 1) == '|') {
                            thisTopics = "|" + thisTopics;
                        } else if(thisTopics.charAt(0) != '|' && thisTopics.charAt(thisTopics.length() - 1) != '|') {
                            thisTopics = "|" + thisTopics + "|";
                        }
                    }
                    singleMap.put("topics", thisTopics);
                    singleMap.put("site_id", rs.getInt("site_id"));
                    singleMap.put("site_name", rs.getString("site_name"));
                    singleMap.put("media", rs.getString("media"));
                    singleMap.put("date", rs.getTimestamp("date"));
                    singleMap.put("title", rs.getString("title"));
                    singleMap.put("url", rs.getString("url"));
                    singleMap.put("period", period);
                    singleMap.put("posts", rs.getLong("posts"));
                    singleMap.put("positive", rs.getLong("positive"));
                    singleMap.put("negative", rs.getLong("negative"));
                    singleMap.put("neutral", rs.getLong("neutral"));
                    singleMap.put("comments", rs.getLong("comments"));
                    singleMap.put("reposts", rs.getLong("reposts"));
                    singleMap.put("views", rs.getLong("views"));
                    singleMap.put("repost_to", rs.getString("repost_to"));
                    singleMap.put("latitude", rs.getDouble("latitude"));
                    singleMap.put("longitude", rs.getDouble("longitude"));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return singleMap;
    }
    
    public Map<String, Map<String, Object>> queryDailyThreadResultMap2(Module module, String period, Calendar startDate,Calendar endDate) {
        Map<String, Map<String, Object>> resultMap = Maps.newHashMap();
        //String singleDayThreadSql = "select scope, thread_id, site_id, site_name, media, date, title, url, (sum(posts) + ifnull(sum(reposts), 0)) as posts, sum(positive) as positive, sum(negative) as negative, sum(neutral) as neutral, ifnull(sum(reposts), 0) as reposts, sum(comments) as comments, updated, repost_to from daily_threads where  scope = ? and ymd in ('" + createYmdPeriod(basicDate)+"') and topic = 'ALL' and thread_id = ? group by thread_id;";
        String singleDayThreadSql = "select scope, GROUP_CONCAT(if(topic = 'ALL', '', topic) SEPARATOR '|') as topics, thread_id, site_id, site_name, media, date, title, url, (SUM(IF(topic != 'ALL', 0, posts)) + SUM((IF(topic != 'ALL', 0, ifnull(reposts, 0))))) as posts, sum(IF(topic != 'ALL', 0, positive)) as positive, sum(IF(topic != 'ALL', 0, negative)) as negative, sum(IF(topic != 'ALL', 0, neutral)) as neutral,  SUM((IF(topic != 'ALL', 0, ifnull(reposts, 0)))) as reposts, sum(IF(topic != 'ALL', 0, comments)) as comments,max(views) as views, updated, repost_to, latitude, longitude from daily_threads where  scope in ("+module.getScopeString()+") and ymd >= '" + DateUtils.date2MysqlFormat(startDate)+ "' and ymd < '" + DateUtils.date2MysqlFormat(endDate)+ "' group by thread_id";
        try (Connection conn = Mysql.getConnection(Mysql.DataBase.ACTSOCIAL); PreparedStatement ps = conn.prepareStatement(singleDayThreadSql);) {
            try (ResultSet rs = ps.executeQuery();) {
                while (rs.next()) {
                    Map<String, Object> singleMap = Maps.newHashMap();
                    singleMap.put("scope", module.getScope());
                    singleMap.put("thread_id", rs.getString("thread_id"));
                    String thisTopics = rs.getString("topics");
                    thisTopics = removeDuplicateTopic(thisTopics.trim());
                    if (null != thisTopics && !"".equals(thisTopics)) {
                        if (thisTopics.charAt(0) == '|' && thisTopics.charAt(thisTopics.length() - 1) == '|') {
                            thisTopics = thisTopics;
                        } else if(thisTopics.charAt(0) == '|' && thisTopics.charAt(thisTopics.length() - 1) != '|') {
                            thisTopics = thisTopics + "|";
                        } else if(thisTopics.charAt(0) != '|' && thisTopics.charAt(thisTopics.length() - 1) == '|') {
                            thisTopics = "|" + thisTopics;
                        } else if(thisTopics.charAt(0) != '|' && thisTopics.charAt(thisTopics.length() - 1) != '|') {
                            thisTopics = "|" + thisTopics + "|";
                        }
                    }
                    thisTopics = Topic.processSpecialTopic(thisTopics);
                    singleMap.put("topics", thisTopics);
                    singleMap.put("site_id", rs.getInt("site_id"));
                    singleMap.put("site_name", rs.getString("site_name"));
                    singleMap.put("media", rs.getString("media"));
                    singleMap.put("date", rs.getTimestamp("date"));
                    singleMap.put("title", rs.getString("title"));
                    singleMap.put("url", rs.getString("url"));
                    singleMap.put("period", period);
                    singleMap.put("posts", rs.getLong("posts"));
                    singleMap.put("positive", rs.getLong("positive"));
                    singleMap.put("negative", rs.getLong("negative"));
                    singleMap.put("neutral", rs.getLong("neutral"));
                    singleMap.put("comments", rs.getLong("comments"));
                    singleMap.put("reposts", rs.getLong("reposts"));
                    singleMap.put("views", rs.getLong("views"));
                    singleMap.put("repost_to", rs.getString("repost_to"));
                    singleMap.put("latitude", rs.getDouble("latitude"));
                    singleMap.put("longitude", rs.getDouble("longitude"));
                    resultMap.put(period + "---" + rs.getString("thread_id"), singleMap);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return resultMap;
    }

    private String  removeDuplicateTopic(String topic) {
        String[] sss = topic.split("\\|");
        Set<String> set = Sets.newHashSet(sss);
        String str = Joiner.on("|").join(set);
        return str;
    }

	/**
     * 查询daily_threads 保存analytics
     * @param sql
     * @param type
     */
    public Map<String, Map<String, Object>> queryDailyThreadsForAnalytics(String sql, Module module, Calendar startCal, Calendar endCal, String type) throws Exception {
        Map<String, Map<String, Object>> resultMap = Maps.newHashMap();
        try (Connection conn = Mysql.getConnection(Mysql.DataBase.ACTSOCIAL);
             PreparedStatement ps = conn.prepareStatement(sql);) {
            ps.setTimestamp(1, new Timestamp(startCal.getTime().getTime()));
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    String scope = module.getScope();
                    String topic = rs.getString("topic");
                    Timestamp ymd = rs.getTimestamp("ymd");
                    String siteId = String.valueOf(rs.getInt("site_id"));
                    String media = rs.getString("media");
                    String top3PostStr = "", top3PositivePostStr = "", top3NeutralPostStr = "",top3NegativePostStr = "";
                    if (AnalyticsType.MEDIA_ALL.value().equals(type)) {
                        media = "all";
                    }
                    if (AnalyticsType.TOPIC_ALL.value().equals(type)) {
                        topic = "all";
                    }
                    if (AnalyticsType.ALL_ALL.value().equals(type)) {
                        topic = "all";
                        media = "all";
                        siteId = "all";
                        top3PostStr = getTop3PostInfo2(module, startCal, null);
                        top3PositivePostStr = getTop3PostInfo2(module, startCal, "positive");
                        top3NeutralPostStr = getTop3PostInfo2(module, startCal, "neutral");
                        top3NegativePostStr = getTop3PostInfo2(module, startCal, "negative");
                    }
                    Calendar ymdCal = DateUtils.timestamp2Calendar(ymd.getTime());
                    String key = topic + SEPERATOR + media + SEPERATOR + siteId;
                    Map<String, Object> singleMiddleMap = initAnalyticsMap(scope, topic, siteId, media, ymdCal);
                    singleMiddleMap.put("posts", rs.getLong("posts"));
                    singleMiddleMap.put("views", rs.getLong("views"));
                    singleMiddleMap.put("brand_views", rs.getLong("brand_views"));
                    singleMiddleMap.put("kol_views", rs.getLong("kol_views"));
                    singleMiddleMap.put("threads", rs.getInt("threads"));
                    singleMiddleMap.put("positive", rs.getLong("positive"));
                    singleMiddleMap.put("negative", rs.getLong("negative"));
                    singleMiddleMap.put("neutral", rs.getLong("neutral"));
                    singleMiddleMap.put("kol", rs.getLong("kol"));
                    singleMiddleMap.put("brand", rs.getLong("brand"));
                    singleMiddleMap.put("day", ymdCal.get(Calendar.DAY_OF_MONTH));
                    singleMiddleMap.put("month", (ymdCal.get(Calendar.MONTH) + 1));
                    singleMiddleMap.put("year", ymdCal.get(Calendar.YEAR));
                    singleMiddleMap.put("date", ymdCal.getTime().getTime());
                    singleMiddleMap.put("top3Post", top3PostStr);
                    singleMiddleMap.put("top3PositivePost", top3PositivePostStr);
                    singleMiddleMap.put("top3NeutralPost", top3NeutralPostStr);
                    singleMiddleMap.put("top3NegativePost", top3NegativePostStr);
                    resultMap.put(key, singleMiddleMap);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return resultMap;
    }

    /**
     * 初始化 map
     *
     * @return
     */
    private Map<String, Object> initAnalyticsMap(String scope, String topic, String siteId, String media, Calendar ymdCal) {
        Map<String, Object> singleMap = Maps.newHashMap();
        singleMap.put("scope", scope);
        singleMap.put("topic", topic);
        singleMap.put("posts", Long.valueOf("0"));
        singleMap.put("threads", Integer.valueOf("0"));
        singleMap.put("positive", Long.valueOf("0"));
        singleMap.put("negative", Long.valueOf("0"));
        singleMap.put("neutral", Long.valueOf("0"));
        singleMap.put("views", 0L);
        singleMap.put("net_sentiment", Double.valueOf("1"));
        singleMap.put("filtered", Integer.valueOf("0"));
        singleMap.put("include_buzz", Integer.valueOf("0"));
        singleMap.put("sov", Double.valueOf("0"));
        singleMap.put("site_id", siteId);
        singleMap.put("media", media);
        return singleMap;
    }

    public static DailyThread getByThreadId(String thread_id, Module module){
        String sql = "select * from " + module.getTablePrefix() + "daily_threads where thread_id = '" + thread_id + "' limit 1";
        DailyThread d = new DailyThread();
        try (Connection connection = Mysql.getConnection(Mysql.DataBase.ACTSOCIAL);
             PreparedStatement pstmt = connection.prepareStatement(sql);
             ResultSet rs = pstmt.executeQuery()) {
            while (rs.next()) {
                DailyThread t = new DailyThread(
                        rs.getString("thread_id"),
                        rs.getString("scope"),
                        rs.getString("topic"),
                        rs.getInt("site_id"),
                        rs.getString("site_name"),
                        rs.getString("media"),
                        rs.getTimestamp("date"),
                        rs.getString("title"),
                        rs.getString("url"),
                        rs.getLong("posts"),
                        rs.getLong("positive"),
                        rs.getLong("negative"),
                        rs.getLong("neutral"),
                        rs.getLong("comments"),
                        rs.getLong("reposts"),
                        rs.getString("repost_to"),
                        rs.getDate("ymd")
                );
                d = t;
            }
        } catch (Exception e) {
            Utils.errorLogger.error(e.getMessage());
            e.printStackTrace();
        }
        return d;
    }

	public List<Map> queryTopTopics(Module module, Calendar currentStartTime, Calendar currentEndTime) {
		Map<String,Object> params = new HashMap<String,Object>();
		params.put("scope", module.getScope());
		params.put("start", currentStartTime);
		params.put("end", currentEndTime);
		List<Map> r = executeQuery("select count(distinct(thread_id)) as count FROM daily_threads WHERE scope in ("+module.getScopeString()+") AND ymd >= @start AND ymd < @end AND topic!='ALL'",params);
		Long total = 1L;
		if(r.size() > 0){
			Long t = (Long)r.get(0).get("count");
			if(t != null && t.intValue() > 0){
				total = t;
			}
		}
        if ("industry".equals(module.getModuleType())) {
            return executeQuery("SELECT scope,topic,count(*) as count, count/"+total+" as percentage FROM daily_threads WHERE scope in ("+module.getScopeString()+") AND ymd >= @start AND ymd < @end AND topic!='ALL' GROUP BY trim(topic) ORDER BY count DESC LIMIT 0, 1000",params);
        } else {
            return executeQuery("SELECT scope,topic,count(*) as count, count/"+total+" as percentage FROM daily_threads WHERE scope=@scope AND ymd >= @start AND ymd < @end AND topic!='ALL' GROUP BY trim(topic) ORDER BY count DESC LIMIT 0, 100",params);
        }
	}

    public  List<Map> queryDailyThreadsIdForResetCache(Module module, Calendar lastTime){
        Map<String,Object> params = new HashMap<String,Object>();
        params.put("scope", module.getScope());
        params.put("lastTime", lastTime);
        return executeQuery("select thread_id,posts from daily_threads where scope = @scope and ymd = @lastTime",params);
    }

    private String getTop3PostInfo(Module module, Calendar startCal) {
        String top3Sql = "select thread_id, title, (ifnull(posts, 0) + ifnull(reposts, 0)) as posts, media from daily_threads where scope = ? and ymd = ? and topic = 'ALL' order by (ifnull(posts, 0) + ifnull(reposts, 0)) desc limit 3";
        String sumSql = "00";
        Map<String, Map<String, Object>> top3Map = Maps.newLinkedHashMap();
        long numPosts = 0;
        try (Connection conn = Mysql.getConnection(Mysql.DataBase.ACTSOCIAL); PreparedStatement ps = conn.prepareStatement(sumSql);) {
            ps.setString(1, module.getScope());
            ps.setTimestamp(2, new Timestamp(startCal.getTime().getTime()));
            try (ResultSet rs = ps.executeQuery();) {
                while (rs.next()) {
                    numPosts = rs.getInt("all_posts");
                }
            } catch (Exception e) {

            }
        } catch (Exception e) {

        }
        try (Connection conn = Mysql.getConnection(Mysql.DataBase.ACTSOCIAL); PreparedStatement ps = conn.prepareStatement(top3Sql);) {
            ps.setString(1, module.getScope());
            ps.setTimestamp(2, new Timestamp(startCal.getTime().getTime()));
            try (ResultSet rs = ps.executeQuery();) {
                while (rs.next()) {
                    Map<String, Object> singleMap = Maps.newHashMap();
                    String threadId = rs.getString("thread_id");
                    String title = rs.getString("title");
                    Integer posts = rs.getInt("posts");
                    String media = rs.getString("media");
                    Double percent = NumberUtils.toDecimal4((double) posts / numPosts);
                    singleMap.put("threadId", threadId);
                    singleMap.put("title", title);
                    singleMap.put("posts", posts);
                    singleMap.put("media", media);
                    singleMap.put("percent", NumberUtils.toDecimal1(percent*100) + "%");
                    top3Map.put(threadId, singleMap);
                }
            } catch (Exception e) {
            }
        } catch (Exception e) {
        }
        String seperator = "||||||";
        String result = "";
        for (Map.Entry<String, Map<String, Object>> entry : top3Map.entrySet()) {
            result += JsonParser.map2Json(entry.getValue()) + seperator;
        }
        return result;
    }

    public String getTop3PostInfo2(Module module, Calendar startCal, String sentiment) {
        String weiboTopPostSql = "";
        String notWeiboTopSql = "";
        if (null == sentiment) {
            weiboTopPostSql = "select thread_id, title, sum(ifnull(posts, 0)) as posts,sum(ifnull(reposts, 0)) as reposts,sum(ifnull(comments, 0)) as comments, media from daily_threads where scope = ? and ymd = ? and topic = 'ALL' and media = 'Weibo' and repost_to is not null group by repost_to;";
            notWeiboTopSql = "select thread_id, title, sum(ifnull(posts, 0)) as posts,sum(ifnull(reposts, 0)) as reposts,sum(ifnull(comments, 0)) as comments, media from daily_threads where scope = ? and ymd = ? and topic = 'ALL' and media != 'Weibo' group by thread_id;";
        } else if ("positive".equals(sentiment)) {
            weiboTopPostSql = "select thread_id, title, sum(ifnull(posts, 0) + ifnull(reposts, 0) + ifnull(comments, 0)) as posts,sum(ifnull(reposts, 0)) as reposts,sum(ifnull(comments, 0)) as comments, media from daily_threads where scope = ? and ymd = ? and topic = 'ALL' and media = 'Weibo' AND positive = 1 and repost_to is not null group by repost_to;";
            notWeiboTopSql = "select thread_id, title, sum(ifnull(posts, 0)) as posts,sum(ifnull(reposts, 0)) as reposts,sum(ifnull(comments, 0)) as comments, media from daily_threads where scope = ? and ymd = ? and topic = 'ALL' and media != 'Weibo' AND positive = 1 group by thread_id;";
        } else if ("neutral".equals(sentiment)) {
            weiboTopPostSql = "select thread_id, title, sum(ifnull(posts, 0) + ifnull(reposts, 0) + ifnull(comments, 0)) as posts,sum(ifnull(reposts, 0)) as reposts,sum(ifnull(comments, 0)) as comments, media from daily_threads where scope = ? and ymd = ? and topic = 'ALL' and media = 'Weibo' AND neutral = 1 and repost_to is not null group by repost_to;";
            notWeiboTopSql = "select thread_id, title, sum(ifnull(posts, 0)) as posts,sum(ifnull(reposts, 0)) as reposts,sum(ifnull(comments, 0)) as comments, media from daily_threads where scope = ? and ymd = ? and topic = 'ALL' and media != 'Weibo' AND neutral = 1 group by thread_id;";
        } else if ("negative".equals(sentiment)) {
            weiboTopPostSql = "select thread_id, title, sum(ifnull(posts, 0) + ifnull(reposts, 0) + ifnull(comments, 0)) as posts,sum(ifnull(reposts, 0)) as reposts,sum(ifnull(comments, 0)) as comments, media from daily_threads where scope = ? and ymd = ? and topic = 'ALL' and media = 'Weibo' AND negative = 1 and repost_to is not null group by repost_to;";
            notWeiboTopSql = "select thread_id, title, sum(ifnull(posts, 0)) as posts,sum(ifnull(reposts, 0)) as reposts,sum(ifnull(comments, 0)) as comments, media from daily_threads where scope = ? and ymd = ? and topic = 'ALL' and media != 'Weibo' AND negative = 1 group by thread_id;";
        }
        List<TopPost> topPosts = Lists.newArrayList();
        long numPosts = 0;
        try (Connection conn = Mysql.getConnection(Mysql.DataBase.ACTSOCIAL);
             PreparedStatement psWeibo = conn.prepareStatement(weiboTopPostSql);
             PreparedStatement psNotWeibo = conn.prepareStatement(notWeiboTopSql);) {
            psWeibo.setString(1, module.getScope());
            psWeibo.setTimestamp(2, new Timestamp(startCal.getTime().getTime()));
            psNotWeibo.setString(1, module.getScope());
            psNotWeibo.setTimestamp(2, new Timestamp(startCal.getTime().getTime()));
            try (ResultSet rs = psWeibo.executeQuery();) {
                while (rs.next()) {
                    String title = rs.getString("title");
                    if (null!= title && !"".equals(title)) {
                        try {
                            title = StringUtils.getSubString(title, 0, 50);
                        } catch (Exception e) {
                            title = "";
                            e.printStackTrace();
                        }
                        TopPost topPost = new TopPost(rs.getString("thread_id"), title, rs.getInt("posts"));
                        topPost.setMedia(rs.getString("media"));
                        topPost.setPosts(rs.getInt("posts"));
                        topPost.setReposts(rs.getInt("reposts"));
                        topPost.setComments(rs.getInt("comments"));
                        numPosts = numPosts + rs.getInt("posts");
                        topPost.setOnlynum(module.isOnlynum());
                        topPosts.add(topPost);
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            try (ResultSet rs = psNotWeibo.executeQuery();) {
                while (rs.next()) {
                    String title = rs.getString("title");
                    if (null!= title && !"".equals(title)) {
                        try {
                            title = StringUtils.getSubString(title, 0, 50);
                        } catch (Exception e) {
                            title = "";
                            e.printStackTrace();
                        }
                        TopPost topPost = new TopPost(rs.getString("thread_id"), title, rs.getInt("posts"));
                        numPosts = numPosts + rs.getInt("posts");
                        topPost.setMedia(rs.getString("media"));
                        topPost.setPosts(rs.getInt("posts"));
                        topPost.setReposts(rs.getInt("reposts"));
                        topPost.setComments(rs.getInt("comments"));
                        topPost.setOnlynum(module.isOnlynum());
                        topPosts.add(topPost);
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        Collections.sort(topPosts, new Comparator<TopPost>() {
            @Override
            public int compare(TopPost ti1, TopPost ti2) {
                if (ti1.getPosts() > ti2.getPosts()) {
                    return -1;
                } else if(ti1.getPosts() < ti2.getPosts()) {
                    return 1;
                } else {
                    return 0;
                }
            }

        });
        String seperator = "||||||";
        String result = "";
        int cnt = 0;
        for (TopPost topPost : topPosts) {
            cnt++;
            if (cnt > 3) {
                break;
            }
            Double percent = NumberUtils.toDecimal4((double) topPost.getPosts() / numPosts);
            String percentage = NumberUtils.toDecimal1(percent*100) + "%";
            topPost.setPercent(percentage);
            result += JsonParser.bean2Json(topPost) + seperator;
        }
        return result;
    }

    public static void main(String[] args) {
        String topic = "|价格|上衣|price_low|设计|耳环|hongkong/oooooo|皮带|包|促销|value_for_money|travel|";
        String aaaaa = "|价格|上衣|price_low|设计|耳环|hongkong-oooooo|皮带|包|促销|value_for_money|travel|";
        topic = Topic.processSpecialTopic(topic);
        System.out.println(topic);
    }
}

package asia.wildfire.utils;

import java.util.HashMap;
import java.util.Map;
import java.util.Set;

public class TaskContext {
	
	private final int CAPACITY = 100;
	
	private final int ROUTINE_TASK_CONSUME = 12;
	
	private final int HOURLY_TASK_CONSUME = 8;
	
	private final int EXPORT_TASK_CONSUME = 18;
	
	private final int ONDEMAND_TASK_CONSUME = 20;
	
	private final int REPORT_TASK_CONSUME = 10;
	
	private Map<String,Boolean> routineTaskMap;
	
	private Map<String,Boolean> hourlyTaskMap;
	
	private Map<String,Boolean> exportTaskMap;
	
	private Map<String,Boolean> ondemandTaskMap;
	
	private Map<String,Boolean> reportTaskMap;
	
	private static TaskContext taskContext;
	
	private TaskContext() {
		routineTaskMap = new HashMap<String,Boolean>();
		hourlyTaskMap = new HashMap<String,Boolean>();
		exportTaskMap = new HashMap<String,Boolean>();
		ondemandTaskMap = new HashMap<String,Boolean>();
	}
	
	public void addRoutineTask(String scope){
		synchronized (routineTaskMap) {
			routineTaskMap.put(scope.toLowerCase(), Boolean.TRUE);
		}
	}
	
	public void finishRoutineTask(String scope){
		if(scope == null){
			return;
		}
		synchronized (routineTaskMap) {
			routineTaskMap.remove(scope.toLowerCase());
		}
	}
	
	public int getRoutineTaskCount(){
		synchronized (routineTaskMap) {
			return routineTaskMap.size();
		}
	}
	
	public Set<String> getRoutineTask(){
		synchronized (routineTaskMap) {
			return routineTaskMap.keySet();
		}
	}
	
	public boolean canRunRoutineTask(){
		synchronized (CAPACITY) {
			return CAPACITY - ROUTINE_TASK_CONSUME >= 0;
		} 
	}
	
	public void addHourlyTask(String scope){
		if(scope == null){
			return;
		}
		synchronized (hourlyTaskMap) {
			hourlyTaskMap.put(scope.toLowerCase(), Boolean.TRUE);
		}
	}
	
	public void finishHourlyTask(String scope){
		synchronized (hourlyTaskMap) {
			hourlyTaskMap.remove(scope.toLowerCase());
		}
	}
	
	public int getHourlyTaskCount(){
		synchronized (hourlyTaskMap) {
			return hourlyTaskMap.size();
		}
	}
	
	public Set<String> getHourlyTask(){
		synchronized (hourlyTaskMap) {
			return hourlyTaskMap.keySet();
		}
	}
	
	public boolean canRunHourlyTask(){
		synchronized (hourlyTaskMap) {
			return hourlyTaskMap.size() < HOURLY_TASK_COUNT;
		} 
	}

	public void addExportTask(String scope){
		synchronized (exportTaskMap) {
			exportTaskMap.put(scope.toLowerCase(), Boolean.TRUE);
		}
	}
	
	public void finishExportTask(String scope){
		if(scope == null){
			return;
		}
		synchronized (exportTaskMap) {
			exportTaskMap.remove(scope.toLowerCase());
		}
	}
	
	public int getExportTaskCount(){
		synchronized (exportTaskMap) {
			return exportTaskMap.size();
		}
	}
	
	public Set<String> getExportTask(){
		synchronized (exportTaskMap) {
			return exportTaskMap.keySet();
		}
	}
	
	public boolean canRunExportTask(){
		synchronized (exportTaskMap) {
			return exportTaskMap.size() < EXPORT_TASK_COUNT;
		} 
	}
	
	public void addOndemandTask(String scope){
		synchronized (ondemandTaskMap) {
			ondemandTaskMap.put(scope.toLowerCase(), Boolean.TRUE);
		}
	}
	
	public void finishOndemandTask(String scope){
		if(scope == null){
			return;
		}
		synchronized (ondemandTaskMap) {
			ondemandTaskMap.remove(scope.toLowerCase());
		}
	}
	
	public int getOndemandTaskCount(){
		synchronized (ondemandTaskMap) {
			return ondemandTaskMap.size();
		}
	}
	
	public Set<String> getOndemandTask(){
		synchronized (ondemandTaskMap) {
			return ondemandTaskMap.keySet();
		}
	}
	
	public boolean canRunOndemandTask(){
		synchronized (ondemandTaskMap) {
			return ondemandTaskMap.size() < ONDEMAND_TASK_COUNT;
		} 
	}
	
	public void addReportTask(String scope){
		synchronized (reportTaskMap) {
			reportTaskMap.put(scope.toLowerCase(), Boolean.TRUE);
		}
	}
	
	public void finishReportTask(String scope){
		if(scope == null){
			return;
		}
		synchronized (reportTaskMap) {
			reportTaskMap.remove(scope.toLowerCase());
		}
	}
	
	public int getReportTaskCount(){
		synchronized (reportTaskMap) {
			return reportTaskMap.size();
		}
	}
	
	public Set<String> getReportTask(){
		synchronized (reportTaskMap) {
			return reportTaskMap.keySet();
		}
	}
	
	public boolean canRunReportTask(){
		synchronized (reportTaskMap) {
			return reportTaskMap.size() < REPORT_TASK_COUNT;
		} 
	}
	
	public synchronized static TaskContext getInstance(){
		if(taskContext == null){
			taskContext =  new TaskContext();
		}
		return taskContext;
	}

	@Override
	public String toString() {
		return "TaskContext routine task["+this.getRoutineTask()+"],hourly task["+this.getHourlyTask()+"],export task["+this.getExportTask()+"],ondemand task["+this.getOndemandTask()+"]";
	}

	
}

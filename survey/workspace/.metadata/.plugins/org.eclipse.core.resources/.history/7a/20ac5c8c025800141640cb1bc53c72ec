package asia.wildfire.actsocial.model;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.util.*;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.handlers.MapListHandler;
import org.nutz.dao.entity.annotation.Column;
import org.nutz.dao.entity.annotation.Table;

import asia.wildfire.connection.Mysql;

@Table("topics")
public class Topic {
    private static Map<String, String> topicZHMap = null;
    private static Map<String, String> topicENMap = null;
    private static Map<String, Map<String, ModuleTopicFilter>> allTopicFileterMap = null;
    private static Map<String, Map<String, ModuleTopicFilter>> categoryTopicFileterMap = null;
    private static Map<String, Map<String, ModuleTopicFilter>> moduleTopicFileterMap = null;

    public final static Integer LIMIT = 100;

    @Column("scope")
    private String scope;

    @Column("topic")
    private String topic;

    @Column("created_time")
    private Date createdTime;

    @Column("period")
    private String period;

    @Column("mention")
    private Long mention;

    @Column
    private boolean filtered;

    @Column
    private Integer version;

    @Column
    private Double percent;
    
    @Column("most_volume_topics")
    private String mostVolumeTopics;
    
    @Column("most_increment_topics")
    private String mostIncrementTopics;
    
    @Column("most_average_topics")
    private String mostAverageTopics;
    
    @Column("most_volume_topics_percent")
    private Double mostVolumeTopicsPercent;
    
    @Column("most_increment_topics_percent")
    private Double mostIncrementTopicsPercent;
    
    @Column("most_average_topics_percent")
    private Double mostAverageTopicsPercent;
    
    public String getMostVolumeTopics() {
		return mostVolumeTopics;
	}

	public void setMostVolumeTopics(String mostVolumeTopics) {
		this.mostVolumeTopics = mostVolumeTopics;
	}

	public String getMostIncrementTopics() {
		return mostIncrementTopics;
	}

	public void setMostIncrementTopics(String mostIncrementTopics) {
		this.mostIncrementTopics = mostIncrementTopics;
	}

	public String getMostAverageTopics() {
		return mostAverageTopics;
	}

	public void setMostAverageTopics(String mostAverageTopics) {
		this.mostAverageTopics = mostAverageTopics;
	}

	public String getMostVolumeTopicsPercent() {
		return mostVolumeTopicsPercent;
	}

	public void setMostVolumeTopicsPercent(Double mostVolumeTopicsPercent) {
		this.mostVolumeTopicsPercent = mostVolumeTopicsPercent;
	}

	public Double getMostIncrementTopicsPercent() {
		return mostIncrementTopicsPercent;
	}

	public void setMostIncrementTopicsPercent(Double mostIncrementTopicsPercent) {
		this.mostIncrementTopicsPercent = mostIncrementTopicsPercent;
	}

	public Double getMostAverageTopicsPercent() {
		return mostAverageTopicsPercent;
	}

	public void setMostAverageTopicsPercent(Double mostAverageTopicsPercent) {
		this.mostAverageTopicsPercent = mostAverageTopicsPercent;
	}

	public Topic() {
        super();
    }

    public String getScope() {
        return scope;
    }


    public void setScope(String scope) {
        this.scope = scope;
    }


    public String getTopic() {
        return topic;
    }


    public void setTopic(String topic) {
        this.topic = topic;
    }


    public Date getCreatedTime() {
        return createdTime;
    }


    public void setCreatedTime(Date createdTime) {
        this.createdTime = createdTime;
    }


    public String getPeriod() {
        return period;
    }


    public void setPeriod(String period) {
        this.period = period;
    }


    public Long getMention() {
        return mention;
    }


    public void setMention(Long mention) {
        this.mention = mention;
    }


    public boolean isFiltered() {
        return filtered;
    }


    public void setFiltered(boolean filtered) {
        this.filtered = filtered;
    }

    public Integer getVersion() {
        return version;
    }

    public void setVersion(Integer version) {
        this.version = version;
    }

    public Double getPercent() {
        return percent;
    }

    public void setPercent(Double percent) {
        this.percent = percent;
    }

    public Topic(String scope, String topic, String period,
                 Long mention) {
        super();
        this.scope = scope;
        this.topic = topic;
        this.createdTime = Calendar.getInstance().getTime();
        this.period = period;
        this.mention = mention;
    }

    public static boolean clear(Module module) {
        String sql = "delete from topics where scope = ? and filtered = ?";
        try (Connection connection = Mysql.getConnection(Mysql.DataBase.ACTSOCIAL);
             PreparedStatement pstmt = connection.prepareStatement(sql);) {
            pstmt.setString(1, module.getScope());
            pstmt.setBoolean(2, module.isTransient());
            pstmt.execute();
            connection.commit();
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    public static boolean clearTodayDashboards(Module module) {
        StringBuffer sql = new StringBuffer("delete from topics where scope = ? and period = 'today' and filtered = ?;");
        try (Connection connection = Mysql.getConnection(Mysql.DataBase.ACTSOCIAL);
             PreparedStatement pstmt = connection.prepareStatement(sql.toString());) {
            pstmt.setString(1, module.getScope());
            pstmt.setBoolean(2, module.isTransient());
            pstmt.execute();
            connection.commit();
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    public static boolean batchSave(List<Topic> topics, Module module) {
        if (topics == null || topics.isEmpty()) {
            return true;
        }
        String sql = "insert into topics(scope,topic,created_time,period,mention,filtered) values(?,?,?,?,?,?)";
        try (Connection connection = Mysql.getConnection(Mysql.DataBase.ACTSOCIAL);
             PreparedStatement pstmt = connection.prepareStatement(sql);) {
            for (Topic t : topics) {
                pstmt.setString(1, t.scope);
                pstmt.setString(2, t.topic);
                pstmt.setTimestamp(3, new Timestamp(t.createdTime.getTime()));
                pstmt.setString(4, t.period);
                pstmt.setLong(5, t.mention);
                pstmt.setBoolean(6, module.isTransient());
                pstmt.addBatch();
            }
            pstmt.executeBatch();
            connection.commit();
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static List<String> getModuleTopicMap(String scope) {
        List<String> resultList = Lists.newArrayList();
        try (Connection conn = Mysql.getConnection(Mysql.DataBase.ACTSOCIAL);) {
            Map<String, String> dashboardTopicMap = Dashboard.initDashboardTopicMap();

            QueryRunner queryRunner = new QueryRunner();
            List queryResult = Lists.newArrayList();
            String sql = "SELECT topic FROM module_topic_map WHERE (scope = ? OR scope IS NULL) and display = 0;";
            queryResult = queryRunner.query(conn, sql, new MapListHandler(), scope);
            Iterator iterator = queryResult.iterator();
            long allPostNum = 0;
            while (iterator.hasNext()) {
                Map map = (Map) iterator.next();
                String topic = (String) map.get("topic");
                if (dashboardTopicMap.containsKey(topic)) {
                    resultList.add(dashboardTopicMap.get(topic));
                } else {
                    resultList.add(topic);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return resultList;
    }

    public static Map<String, String> getModuleAllTopicMap(String scope, String local) {
        Map<String, String> dashboardTopicMap = Dashboard.initDashboardTopicMap();
        Map<String, String> reverseDashboardTopicMap = Maps.newHashMap();
        String sql = "SELECT * FROM module_topic_map WHERE (scope = '" + scope + "'  OR scope IS NULL);";
        try (Connection conn = Mysql.getConnection(Mysql.DataBase.ACTSOCIAL);
             PreparedStatement pstmt = conn.prepareStatement(sql);) {
            ResultSet rss = pstmt.executeQuery();
            while (rss.next()) {
                String topic = rss.getString("topic");
                String enTopic = rss.getString("en");
                if (null != enTopic && !"".equals(enTopic)) {
                    if (null == dashboardTopicMap.get(enTopic)) {
                        dashboardTopicMap.put(enTopic, topic);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        if ("en-US".equals(local)) {
            for (Map.Entry<String, String> entry : dashboardTopicMap.entrySet()) {
                if (null == reverseDashboardTopicMap.get(entry.getKey())) {
                    if (null != entry.getValue() && !"".equals(entry.getValue())) {
                        reverseDashboardTopicMap.put(entry.getValue(), entry.getKey());
                    }
                }
            }
            return reverseDashboardTopicMap;
        } else {
            return dashboardTopicMap;
        }
    }

    public static String processSpecialTopic(String topic) {
        topic = topic.trim();
        if (topic.indexOf("/") >= 0) {
            topic = topic.replaceAll("/", "-");
        }
        return topic;
    }

    public synchronized static void getFilterTopic() {
        if (null == allTopicFileterMap || null == categoryTopicFileterMap || null == moduleTopicFileterMap) {
            allTopicFileterMap = Maps.newHashMap();
            categoryTopicFileterMap = Maps.newHashMap();
            moduleTopicFileterMap = Maps.newHashMap();
            Map<String, List<String>> moduleCategoriesMap = getModuleCategoriesMap();
            Map<String, List<ModuleTopicFilter>> moduleTopicFilterMapPre = getModuleTopicFilterMap();
            for (Map.Entry<String, List<ModuleTopicFilter>> topicFilterEntry : moduleTopicFilterMapPre.entrySet()) {
                if (topicFilterEntry.getKey().equals("all")) {
                    List<ModuleTopicFilter> singleTopicFilterList = topicFilterEntry.getValue();
                    for (ModuleTopicFilter mtf : singleTopicFilterList) {
                        Map<String, ModuleTopicFilter> singleMap = allTopicFileterMap.get(mtf.getFilterType());
                        if (null == singleMap) {
                            singleMap = Maps.newHashMap();
                        }
                        singleMap.put(mtf.getTopic(), mtf);
                        allTopicFileterMap.put(mtf.getFilterType(), singleMap);
                    }
                } else if (topicFilterEntry.getKey().equals("module")) {
                    List<ModuleTopicFilter> singleTopicFilterList = topicFilterEntry.getValue();
                    for (ModuleTopicFilter mtf : singleTopicFilterList) {
                        Map<String, ModuleTopicFilter> singleMap = moduleTopicFileterMap.get(mtf.getFilterName().toUpperCase());
                        if (null == singleMap) {
                            singleMap = Maps.newHashMap();
                        }
                        singleMap.put(mtf.getTopic(), mtf);
                        moduleTopicFileterMap.put(mtf.getFilterName().toUpperCase(), singleMap);
                    }
                } else if (topicFilterEntry.getKey().equals("category")) {
                    List<ModuleTopicFilter> singleTopicFilterList = topicFilterEntry.getValue();
                    for (ModuleTopicFilter mtf : singleTopicFilterList) {
                        Map<String, ModuleTopicFilter> singleMap = categoryTopicFileterMap.get(mtf.getFilterName());
                        if (null == singleMap) {
                            singleMap = Maps.newHashMap();
                        }
                        singleMap.put(mtf.getTopic(), mtf);
                        categoryTopicFileterMap.put(mtf.getFilterName(), singleMap);
                        for (Map.Entry<String, List<String>> singleEntry : moduleCategoriesMap.entrySet()) {
                            if (singleEntry.getKey().equals(mtf.getFilterName())) {
                                Map<String, ModuleTopicFilter> singleMap2 = categoryTopicFileterMap.get(singleEntry.getKey());
                                if (null == singleMap2) {
                                    singleMap2 = Maps.newHashMap();
                                }
                                List<String> singleList = singleEntry.getValue();
                                for (String str : singleList) {
                                    singleMap2.put(mtf.getTopic(), mtf);
                                }
                                categoryTopicFileterMap.put(singleEntry.getKey(), singleMap2);
                            }
                        }
                    }
                }
            }
        }
    }

    private static Map<String, List<ModuleTopicFilter>> getModuleTopicFilterMap() {
        Map<String, List<ModuleTopicFilter>> result = Maps.newHashMap();
        String sql = "SELECT * FROM module_topic_filters";
        result.put("all", new ArrayList<ModuleTopicFilter>());
        result.put("industry", new ArrayList<ModuleTopicFilter>());
        result.put("category", new ArrayList<ModuleTopicFilter>());
        result.put("module", new ArrayList<ModuleTopicFilter>());
        try (Connection conn = Mysql.getConnection(Mysql.DataBase.ACTSOCIAL);
             PreparedStatement pstmt = conn.prepareStatement(sql);
             ResultSet rss = pstmt.executeQuery()) {
            while (rss.next()) {
                String filterType = rss.getString("filter_type");
                List<ModuleTopicFilter> singleList = result.get(filterType);
                if ("scope".equals(filterType)) {
                    singleList = result.get("module");
                }
                singleList.add(new ModuleTopicFilter(rss.getString("topic"), rss.getString("filter_name"), rss.getString("filter_type"), rss.getInt("display")));
//                System.out.println(singleList);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return result;
    }

    private static Map<String, List<String>> getModuleCategoriesMap() {
        Map<String, List<String>> resultMap = Maps.newHashMap();
        String sql = "select * from module_categories where parent_id is not null";
        try (Connection conn = Mysql.getConnection(Mysql.DataBase.ACTSOCIAL);
             PreparedStatement pstmt = conn.prepareStatement(sql);
             ResultSet rss = pstmt.executeQuery()) {
            while (rss.next()) {
                String parentId = String.valueOf(rss.getInt("parent_id"));
                List<String> singleList = resultMap.get(parentId);
                if (null == singleList) singleList = Lists.newArrayList();
                singleList.add(String.valueOf(rss.getInt("id")));
                resultMap.put(parentId, singleList);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return resultMap;
    }

    private synchronized static void getI18NTopic() {
        if (null == topicENMap || null == topicZHMap) {
            topicENMap = Maps.newHashMap();
            topicZHMap = Maps.newHashMap();
            String sql = "select * from topic_i18ns";
            try (Connection conn = Mysql.getConnection(Mysql.DataBase.ACTSOCIAL);
                 PreparedStatement pstmt = conn.prepareStatement(sql);
                 ResultSet rss = pstmt.executeQuery()) {
                while (rss.next()) {
                    topicZHMap.put(rss.getString("topic"), rss.getString("zh_cn"));
                    topicENMap.put(rss.getString("topic"), rss.getString("en_us"));
                }
            } catch (Exception e) {

            }
        }
    }
    
    public static boolean checkTopicDisplay(Module module, String topic){
    	if("all".equalsIgnoreCase(topic)){
    		return true;
    	}
    	getFilterTopic();
    	boolean display = false;
    	String category = module.getModuleCategoryId().toString();
        String scope = module.getScope().toUpperCase();
        if (null != module.getFreemium() && module.getFreemium() == 1) {
            if (null != moduleTopicFileterMap.get(scope) && null != moduleTopicFileterMap.get(scope).get(topic)) {
                if (moduleTopicFileterMap.get(scope).get(topic).getDisplay() == 1) {
                    display = true;
                }
            }
            if (null != categoryTopicFileterMap.get(category) && null != categoryTopicFileterMap.get(category).get(topic)) {
                if (categoryTopicFileterMap.get(category).get(topic).getDisplay() == 1) {
                    display = true;
                }
            }
            if (null != allTopicFileterMap.get("all") && null != allTopicFileterMap.get("all").get(topic)) {
                if (allTopicFileterMap.get("all").get(topic).getDisplay() == 1) {
                    display = true;
                }
            }
        } else {
            display = true;
            if (null != moduleTopicFileterMap.get(scope) && null != moduleTopicFileterMap.get(scope).get(topic)) {
                if (moduleTopicFileterMap.get(scope).get(topic).getDisplay() == 0) {
                    display = false;
                }
            }
            if (null != categoryTopicFileterMap.get(category) && null != categoryTopicFileterMap.get(category).get(topic)) {
                if (categoryTopicFileterMap.get(category).get(topic).getDisplay() == 0) {
                    display = false;
                }
            }
            if (null != allTopicFileterMap.get("all") && null != allTopicFileterMap.get("all").get(topic)) {
                if (allTopicFileterMap.get("all").get(topic).getDisplay() == 0) {
                    display = false;
                }
            }
        }
        return display;
    }

    public static String getTopicDisplay(Module module, String topic, String local) {
        getI18NTopic();
        if (!"en-US".equals(local) && !"zh-CN".equals(local)) {
            local = "en-US";
        }
        
        if (checkTopicDisplay(module, topic)) {
            if ("zh-CN".equals(local)) {
                return null == topicZHMap.get(topic) ? topic : topicZHMap.get(topic);
            } else {
                return null == topicENMap.get(topic) ? topic : topicENMap.get(topic);
            }
        } else {
            return "";
        }
    }

    public static void main(String[] args) {
//        Map<String, List<ModuleTopicFilter>> moduleTopicFilterMap = getModuleTopicFilterMap();
//        System.out.println(moduleTopicFilterMap);
        getFilterTopic();
    }
}

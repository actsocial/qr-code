package asia.wildfire.actsocial.impl;

import java.sql.Timestamp;
import java.text.DecimalFormat;
import java.util.*;

import asia.wildfire.actsocial.dao.BuzzAnalyticDao;
import asia.wildfire.actsocial.model.*;

import com.google.common.collect.Lists;

import junit.framework.TestCase;
import net.spy.memcached.MemcachedClient;

import org.junit.Test;
import org.nutz.dao.Cnd;
import org.nutz.dao.Dao;
import org.nutz.dao.Sqls;
import org.nutz.dao.entity.Record;
import org.nutz.dao.impl.NutDao;
import org.nutz.dao.sql.Sql;

import asia.wildfire.actsocial.ActsocialDataQuerier;
import asia.wildfire.actsocial.dao.DailyThreadDao;
import asia.wildfire.actsocial.dao.DashboardDao;
import asia.wildfire.actsocial.dao.ThreadsDao;
import asia.wildfire.connection.ElasticCache;
import asia.wildfire.connection.Mysql;
import asia.wildfire.helper.Period;
import asia.wildfire.utils.DateUtils;

/**
 * Created with IntelliJ IDEA.
 * User: Administrator
 * Date: 13-11-26
 * Time: 下午1:40
 * 修改描述
 */
public class ActsocialDataServiceImplTest extends TestCase {
    ActsocialDataServiceImpl actsocialDataService = new ActsocialDataServiceImpl();
    DailyThreadDao threadDao = new DailyThreadDao();
    ActsocialDataQuerier actsocialDataQuerier = new ActsocialDataQuerierImpl();

    @Test
    public void testExportThreads(){
        Module module = Module.loadByScope("All_Days");
        String period = "30";
        actsocialDataService.exportThreads( module, period);
    }

    @Test
    public void testModuleGetTODOMap() {
        Module module = Module.loadByScope("All_Days");
        Map<String, BasicDate> threadMap = module.getTodoThreadCalendarMap();
    }

    @Test
    public void test() throws Exception {
        DailyThread dailyThreads = new DailyThread("1-2-3-4-5-6", "All_Days", "aa", 42, "新浪微博", "新浪微博", new Date(), "aaa", "baidu.com", 1000L, 10000L, 1000L, 1000L, 100L, 100L, "", new Date());
        Dao dao = new NutDao(Mysql.getDataSource(Mysql.DataBase.ACTSOCIAL));
        dao.insert(dailyThreads);
    }

    @Test
    public void testInsertDailyTread() throws Exception {
        Random r = new Random();
        String[] threadIds = {"ef83535a-2e08-476b-b9f1-e6e8ac9d6fd4", "824fb025-1ef3-4d9e-828c-f50ac8e6b453", "d17eca14-fbc4-41a9-bc4c-17a934eb7e60", "6d26ce77-5a9c-4d95-870d-8d519d068ff9", "2e34dd5f-a887-4cbe-85c6-bea6e54480fb", "dc3871bc-cd3a-42c9-a6d9-8ebf86d92f7e", "1f2faf26-3318-488d-96fb-1c0e29a59185", "5a8aea71-dce9-4a18-aa70-50fbec295558", "617c1166-cd7e-449b-b317-9ac5089e0fde", "016740a6-eec4-11e2-ba0e-123150021609"};
        String[] topic = {"String threadId", "String scope", "String topic", "Integer siteId", "String siteName", "String media", "Date date", "String title", "String url", "Long posts", "Long positive", "Long negative", "Long neutral", "Long comments", "Long reposts", "String repostTo", "Date ymd"};
        DailyThread dailyThreads = null;
        Dao dao = new NutDao(Mysql.getDataSource(Mysql.DataBase.ACTSOCIAL));
        dao.insert(dailyThreads);
        Calendar cal = DateUtils.getMidNight();
        for (int i = 0; i < 1000; i++) {
            Long value = Long.valueOf("1377619200");
            value = value + r.nextInt(90) * 24 * 60 * 60;
            dailyThreads = new DailyThread(threadIds[r.nextInt(threadIds.length)], "All_Days", topic[r.nextInt(topic.length)], 42, "新浪微博", "新浪微博", new Date(value * 1000), "aaa", "baidu.com", 1000L, 10000L, 1000L, 1000L, Long.valueOf(String.valueOf(r.nextInt(1000))), Long.valueOf(String.valueOf(r.nextInt(1000))), "", new Date(value * 1000));
            dao.insert(dailyThreads);
        }
    }

    @Test
    public void testSelectDailyThreads() throws Exception {
        String strr = "select scope, thread_id, GROUP_CONCAT(distinct topic SEPARATOR '|'), site_id, site_name, media, date, title, url, sum(posts), sum(positive), sum(negative), sum(neutral), (MAX(reposts) - MIN(reposts)) as reposts, (MAX(comments) - MIN(comments)) as comments, updated, repost_to, ymd from daily_threads where scope = 'All_Days' and date >= '2013-09-21 00:00:00' and date < '2013-11-21 00:00:00' group by thread_id";
        Dao dao = new NutDao(Mysql.getDataSource(Mysql.DataBase.ACTSOCIAL));
        Sql sql = Sqls.create(strr);
        dao.execute(sql);
        Object obj = sql.getResult();
        System.out.println(obj);
    }

    @Test
    public void testQueryMaxDailyThreadDate() {
        System.out.println(actsocialDataService.queryMaxDailyThreadDate(Module.loadByScope("Carrefour"), System.currentTimeMillis()).getTime());
    }

    @Test
    public void testFetchDailyThread() {
        Calendar end = DateUtils.initCalendarWithYearMonthDay(2014, 8, 1);
        Calendar start = DateUtils.initCalendarWithYearMonthDay(2014, 6, 2);
        Long timestamp = start.getTime().getTime();
        DailyThreadDao dao = new DailyThreadDao();
        List<ThreadDaysInfo> ls = actsocialDataQuerier.queryThreadInfoByPeriod(Module.loadByScope("DutchCow"), start, end, timestamp, 100, 0);
        List<DailyThread> dts = new ArrayList<DailyThread>();
        System.out.println(ls);
        for (ThreadDaysInfo threadDaysInfo : ls) {
            if (threadDaysInfo.getTopicId().equals("16c512be-dcf5-11e3-b59b-22000a780a63")) {
                System.out.println("...................");
            }
            List<DailyThread> dt = actsocialDataService.fetchDailyThread(threadDaysInfo);
            dts.addAll(dt);
        }
        System.out.println(dts);
        //dao.batchInsert(dts);
    }

    @Test
    public void testNoPojoSelectDatabase() throws Exception {
        Dao dao = new NutDao(Mysql.getDataSource(Mysql.DataBase.ACTSOCIAL));
        List<Record> list = dao.query("daily_threads", Cnd.where("scope", "=", "All_Days").and("ymd", ">=", "2013-11-25 00:00:00").and("ymd", "<", "2013-11-26 00:00:00"), null);
        for (Record record : list) {
            System.out.println(record.getColumnNames());
            System.out.println(record.get("scope"));

        }
//        System.out.println(list);saveAnalyticsFromDailyTHread
    }

    @Test
    public void testConstructDashboardFromDailyThread() {
        Module module = Module.loadByScope("Sports"); // PEPCO   childrens_clothing
        actsocialDataService.calDashboard(module, Period.routine());
    }

    //    @Test
//    public void
    public void testFetchDashboard() {
        Module module = Module.loadByScope("All_Days");
        Map<String, BasicDate> threadMap = module.getTodoThreadCalendarMap();

        for (Map.Entry<String, BasicDate> entry : threadMap.entrySet()) {
            String period = entry.getKey();
            StringBuffer sBuffer = new StringBuffer();
            BasicDate basicDate = entry.getValue();
            System.out.println(period);

            Calendar currentStartTime = basicDate.getStartTime();
            Calendar currentEndTime = basicDate.getEndTime();

            Integer days = new Integer(0);
            if (period.equals("last_month")) {
                days = 30;
            } else if (period.equals("last_week")) {
                days = 7;
            } else {
                days = Integer.valueOf(period);
            }

            Calendar prevStartTime = DateUtils.getNDaysAgo(basicDate.getStartTime(), days);
            Calendar prevEndTime = DateUtils.getNDaysAgo(basicDate.getEndTime(), days);

            StringBuilder countSql = new StringBuilder("select scope, count(thread_id) threads, sum(posts) posts, sum(positive) positive," +
                    "sum(negative) negative, sum(neutral) neutral " +
                    "from daily_threads where scope = '").append(module.getScope())
                    .append("' and ymd >= @startDate and ymd < @endDate");

            DailyThreadDao dailyThreadDao = new DailyThreadDao();
            DashboardDao dashboardDao = new DashboardDao();
            Map currentDashboard = dashboardDao.getDashboard(countSql.toString(), currentStartTime, currentEndTime);

            Map prevDashboard = dashboardDao.getDashboard(countSql.toString(), prevStartTime, prevEndTime);

            Float threadsTrendF = ((Float.valueOf(currentDashboard.get("threads").toString()) - Float.valueOf(prevDashboard.get("threads").toString())) / Float.valueOf(prevDashboard.get("threads").toString()));
            Float postsTrendF = (Float.valueOf(currentDashboard.get("posts").toString()) - Float.valueOf(prevDashboard.get("posts").toString())) / Float.valueOf(prevDashboard.get("posts").toString());
            Float setimentTrendF = (Float.valueOf(currentDashboard.get("positive").toString()) - Float.valueOf(currentDashboard.get("negative").toString())) / Float.valueOf(currentDashboard.get("posts").toString());

            DecimalFormat fnum = new DecimalFormat("#############.####");
            String threadsTrend = fnum.format(threadsTrendF);
            String postsTrend = fnum.format(postsTrendF);
            String setimentTrend = fnum.format(setimentTrendF);

            if (prevDashboard.get("threads").toString().equals("0")) {
                threadsTrend = "INF";
            }
            if (prevDashboard.get("posts").toString().equals("0")) {
                postsTrend = "INF";
            }
            if (currentDashboard.get("posts").toString().equals("0")) {
                setimentTrend = "INF";
            }

            System.out.println(currentDashboard);
            System.out.println(prevDashboard);
            System.out.println(threadsTrend);
            System.out.println(postsTrend);
            System.out.println(setimentTrend);

            //(current - prev)/prev
            //(positive - negative)/posts

            Dashboard ds = new Dashboard();
            ds.setScope(module.getScope());
            ds.setCreatedTime(new Date());
            ds.setPeriod(period);
            ds.setPositive(Long.valueOf(currentDashboard.get("positive").toString()));
            ds.setNegative(Long.valueOf(currentDashboard.get("negative").toString()));
            ds.setNeutral(Long.valueOf(currentDashboard.get("neutral").toString()));
            ds.setThreads(Integer.valueOf(currentDashboard.get("threads").toString()));
            ds.setPosts(Long.valueOf(currentDashboard.get("posts").toString()));
            ds.setThreadsTrend(threadsTrend);
            ds.setPostsTrend(postsTrend);
            ds.setSentimentTrend(setimentTrend);
            ds.setFiltered(Boolean.FALSE);
            ds.setSov(Double.valueOf("0"));
            ds.setSovTrend("N/A");
            ds.setVersion(-1);

            //dashboardDao.insert(ds);
        }

    }

    @Test
    public void testAddBuzz() {
        actsocialDataService.addBuzz(Module.loadByScope("Sports"),Period.routine());
    }
    
    @Test
    public void testmoveBuzzDataFromRedshiftToMysql(){
    	actsocialDataService.moveBuzzDataFromRedshiftToMysql(Module.loadByScope("Sports"), System.currentTimeMillis(), Period.routine());
    }

    @Test
    public void testGetBuzzAnalytics() {
        BuzzAnalyticDao buzzAnalyticDao = new BuzzAnalyticDao();
        List<String> onlyNumScopesInIndustry =Lists.newArrayList();
        onlyNumScopesInIndustry.add("Audi");
        onlyNumScopesInIndustry.add("Buick");
        List<BuzzAnalytic> bas = buzzAnalyticDao.queryByCond(new String[]{"scope", "date"}, new String[]{"in", "<"}, new Object[]{onlyNumScopesInIndustry, new Timestamp(DateUtils.getMidNight().getTime().getTime())});
        for (BuzzAnalytic buzz : bas) {
            if (buzz.getYear() == 2014 && buzz.getMonth() == 3) {
                System.out.println(buzz.getDate());
            }
        }
        System.out.println(bas);
    }

    @Test
    public void testCalThread() {
        long start = System.currentTimeMillis();
        long end = System.currentTimeMillis();
        Module module = Module.loadByScope("Quechua");
        Map<String, BasicDate> ccc = module.getTodoBasicCalendarMap();
        BasicDate bd = ccc.get("7");
        actsocialDataService.calThread(module, "7", bd.getStartTime(), bd.getEndTime());
        System.out.println(end - start);
    }

    @Test
    public void testCalAnalytics() {
        long start = System.currentTimeMillis();
        actsocialDataService.calAnalytics(Module.loadByScope("Audi"), DateUtils.initCalendarWithYearMonthDay(2014, 02, 19), DateUtils.initCalendarWithYearMonthDay(2014, 02, 20));
        long end = System.currentTimeMillis();
        System.out.println(end - start);
    }

    @Test
    public void testCalAnalytics2() {
        long start = System.currentTimeMillis();
        Module module = Module.loadByScope("Sports");
        Period routine = Period.routine();
        for (int i = 0; i < routine.getInterval(); i++) {
            actsocialDataService.calAnalytics(module, DateUtils.getNDaysAgo(routine.getEnd(), i+1), DateUtils.getNDaysAgo(routine.getEnd(), i));
        }
        long end = System.currentTimeMillis();
        System.out.println(end - start);
    }

    @Test
    public void testCalTodayAnalytics() {
        Calendar calendar = DateUtils.initCalendarWithYearMonthDay(2014, 02, 20);
        calendar.set(2013, 11, 9, 12, 0);
        actsocialDataService.calTodayAnalytics(Module.loadByScope("Audi"), DateUtils.initCalendarWithYearMonthDay(2014, 02, 19), calendar);

    }

    @Test
    public void testCalDashboard() {
        long start = System.currentTimeMillis();
        Module module = Module.loadByScope("Audi");
        Map<String, BasicDate> threadMap = module.getTodoBasicCalendarMap();
        BasicDate basicDate = threadMap.get("1");
        actsocialDataService.calDashboard(module, "1", basicDate.getStartTime(), basicDate.getEndTime());
        long end = System.currentTimeMillis();
        System.out.println(end - start);
    }

    @Test
    public void testTopic() {
        Module module = Module.loadByScope("Columbia");
        Map<String, BasicDate> threadMap = module.getTodoBasicCalendarMap();
        for (Map.Entry<String, BasicDate> entry : threadMap.entrySet()) {
            if (entry.getKey().equals("1")) {
                actsocialDataService.calTopics(module, entry.getKey(), entry.getValue().getStartTime(), entry.getValue().getEndTime());
            }
        }
    }

    @Test
    public void testGenerateWeiboModuleThreadExcel() {
        actsocialDataService.generateWeiboModuleThreadExcel(Module.loadByScope("2026014915"));
    }

    @Test
    public void testCalTodayThreads() {
        Calendar cal = Calendar.getInstance();
        cal.setTime(new Date(1399960777754L));
        actsocialDataService.calTodayThread(Module.loadByScope("Lincoln2"), cal);
    }

    @Test
    public void testResetCache() {
        Module module = Module.loadByScope("7-Eleven");
        DailyThreadDao dailyThreadDao = new DailyThreadDao();
        long timestamp = 1390204925602L;//2014-01-20
        Calendar lastTime = DateUtils.getNDaysAgo(DateUtils.getMidNight(timestamp), 31);
        System.out.println(lastTime.getTime());
        List<Map> ids = dailyThreadDao.queryDailyThreadsIdForResetCache(module, lastTime);
        System.out.println(ids.size());
    }

    @Test
    public void testGenerateCacheForWeiboFollowerOverview() {
        actsocialDataService.generateCacheForWeiboFollowerOverview("1920553754");
    }

    @Test
    public void testCacheWeiboCommentsOfThreadsByScopeAndPeriod() {
        actsocialDataService.cacheWeiboCommentsOfThreadsByScopeAndPeriod(Module.loadByScope("1920553754"), "7");
    }

    @Test
    public void testmoveBuzzDataFromDynamodbToMysql() {
        actsocialDataService.moveBuzzDataFromDynamodbToMysql(Module.loadByScope("Audi"), System.currentTimeMillis());
    }
    
    @Test
    public void testEnqueueParent(){
//    	actsocialDataService.enqueueParent5();
		actsocialDataService.enqueueParent0();
    }

    @Test
    public void testenqueueChildren() {
        actsocialDataService.enqueueChildren(Module.loadByScope("Auto"));
    }

    @Test
    public void testIsRunThread() {
        Module module = Module.loadByScope("premier12");
        Calendar lastThreadDate = DateUtils.getMidNight(module.getLastThreadTime()==null ? 0 : module.getLastThreadTime().getTime());
        Map<String, BasicDate> map = module.getTodoBasicCalendarMap();
        Calendar midNight = DateUtils.getMidNight();
        for(Map.Entry<String, BasicDate> entry : map.entrySet()) {
            System.out.println(entry.getKey());
            boolean aa = midNight.get(Calendar.DAY_OF_MONTH) == Calendar.SATURDAY || "last_week".equals(entry.getKey()) || "last_month".equals(entry.getKey()) || "1".equals(entry.getKey()) || "7".equals(entry.getKey()) || "30".equals(entry.getKey());
            boolean bb = lastThreadDate.getTimeInMillis() - entry.getValue().getStartTime().getTimeInMillis() > entry.getValue().getEndTime().getTimeInMillis() - lastThreadDate.getTimeInMillis();
            System.out.println(entry.getKey() + " period -- " + aa + "   increase thread : " + bb);
        }
    }

    @Test
    public void testqueryDaysNeedToRun(){

    }
    
    @Test
    public void testqueryTopicsOrderByVolume(){
    	ActsocialDataServiceImpl actsocialDataService = new ActsocialDataServiceImpl();
    	Calendar now = DateUtils.getMidNight();
    	
    	System.out.println("order by volume");
    	Map<String,Double> m1 = actsocialDataService.queryTopicsOrderByVolume(Module.loadByScope("Dumex"), "", DateUtils.getNDaysAgo(now, 30),now);
    	printTopics(m1);
    	System.out.println("");
    	System.out.println("");
    	System.out.println("order by increment");
    	Map<String,Double> m2 = actsocialDataService.queryTopicsOrderByIncrement(Module.loadByScope("Dumex"), "", DateUtils.getNDaysAgo(now, 30),now);
    	printTopics(m2);
    	System.out.println("");
    	System.out.println("");
    	System.out.println("order by average");
    	Map<String,Double> m3 = actsocialDataService.queryTopicsOrderByIndustryAverage(Module.loadByScope("Dumex"), "", DateUtils.getNDaysAgo(now, 30),now);
    	printTopics(m3);
    }
    
    private void printTopics(Map<String,Double> map){
    	
    }
    
    public static void main(String[] args) {
        ActsocialDataServiceImpl actsocialDataService = new ActsocialDataServiceImpl();
        ThreadDaysInfo tdi = new ThreadDaysInfo();
        tdi.setTopicId("e1103032-53a7-42f7-9ba3-857b2c4eb35a"); tdi.setTopic_uri_ss("http://weibo.com/1693363187/3717495275706261"); tdi.setScope("DutchCow");tdi.setShort_site_id(42);
        tdi.setTagsValue(new HashMap<String, Long>()); tdi.setPostsCount(1);
        actsocialDataService.fetchDailyThread(tdi);
    }
}

package asia.wildfire.chart;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Ellipse2D;
import java.awt.geom.RectangularShape;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringWriter;
import java.text.AttributedString;
import java.text.Collator;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.FieldPosition;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Random;

import org.apache.velocity.Template;
import org.apache.velocity.VelocityContext;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItem;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.StandardChartTheme;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.DateTickUnit;
import org.jfree.chart.axis.DateTickUnitType;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.labels.PieSectionLabelGenerator;
import org.jfree.chart.labels.StandardCategoryToolTipGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StandardBarPainter;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer2;
import org.jfree.chart.renderer.xy.StackedXYBarRenderer;
import org.jfree.chart.renderer.xy.XYBarPainter;
import org.jfree.chart.renderer.xy.XYBarRenderer;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.graphics2d.svg.SVGGraphics2D;
import org.jfree.ui.HorizontalAlignment;
import org.jfree.ui.RectangleEdge;
import org.jfree.ui.RectangleInsets;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.select.Elements;

import com.google.api.translate.Language;

import asia.wildfire.actsocial.model.Report;
import asia.wildfire.actsocial.model.ReportDefinition;
import asia.wildfire.connection.Velocity;
import asia.wildfire.utils.DateUtils;
import asia.wildfire.utils.I18n;
import asia.wildfire.utils.NumberUtils;
import asia.wildfire.utils.StringUtils;
import asia.wildfire.utils.Translator;

public class ChartGeneratorJreeImpl implements ChartGenerator{
	
	public final static DecimalFormat REPORT_NUMBER_FORMAT =  new DecimalFormat(",###.####");
	
	public final static Color CHART_HEADER_FONT_COLOR = new Color(parseColor("2DB4DA"));
	
	public final static String CHART_HEADER_FONT_FAMILY = "\"SimHei\", \"黑体\", Helvetica, sans-serif";
	
	public final static int CHART_HEADER_FONT_SIZE = 22;
	
	public final static int CHART_HEADER_FONT_STYLE = Font.PLAIN;
	
	public final static Color CHART_BACKGROUND_COLOR = Color.WHITE;
	
	public final static Color CHART_Y_GRID_COLOR = new Color(parseColor("B3B2B4"));
	
	public final static Color CHART_AXIS_COLOR = new Color(parseColor("62605F"));
	
	public final static SimpleDateFormat CHART_DATE_FORMAT = new SimpleDateFormat("MM/dd");
	
	public final static int CHART_LINE_WEIGHT = 2;
	
	public final static Color CHART_LINE_COLOR_ONE = new Color(parseColor("28B4DC"));
	
	public final static Color CHART_LINE_COLOR_TWO = new Color(parseColor("FAB100"));
	
	public final static Color CHART_PIE_COLOR_ONE = new Color(parseColor("28B4DC"));
	
	public final static Color CHART_PIE_COLOR_TWO = new Color(parseColor("ED3126"));
	
	public final static Color CHART_PIE_COLOR_THREE = new Color(parseColor("FAB100"));
	
	public final static Color CHART_PIE_COLOR_FOUR = new Color(parseColor("6B9900"));
	
	public final static Color CHART_PIE_COLOR_FIVE = new Color(parseColor("1A809E"));
	
	public final static Color CHART_PIE_COLOR_SIX = new Color(parseColor("E19F00"));
	
	private static final Paint CHART_PIE_COLOR_OTHER = new Color(parseColor("DADBDB"));
	
	public final static Color CHART_BAR_COLOR_ONE = new Color(parseColor("DADBDB"));
	
	public final static Color CHART_BAR_COLOR_TWO = new Color(parseColor("6B9900"));
    public final static SimpleDateFormat sdf = new SimpleDateFormat("MM-dd");
	
	public final static Color[] CHART_MAP_COLORS = new Color[]{
		new Color(parseColor("E0EEF6")),
		new Color(parseColor("C9D6DD")),
		new Color(parseColor("C1CEE6")),
        new Color(parseColor("BBC9E4")),
        new Color(parseColor("B0BBD2")),
        new Color(parseColor("A8B4CD")),
        new Color(parseColor("CBF2FF")),
        new Color(parseColor("BFEFFF")),
        new Color(parseColor("ABD7E5")),
        new Color(parseColor("63B8FF")),
        new Color(parseColor("59A5E5")),
        new Color(parseColor("5CACEE")),
        new Color(parseColor("529AD6")),
		new Color(parseColor("5070A2"))
	};

	
    public String generateLineChart(String label,Map<String,Map<Date,Number>> countData, Map<String,Map<Date,Number>> newData,int height,int width, String locale){
    	JFreeChart chart = ChartFactory.createTimeSeriesChart(
    		I18n.get(label, locale),    // title
            null,             // x-axis label
            null,      // y-axis label
            prepareLineChartDataset(countData,true,locale),           // data
            true,               // create legend?
            false,               // generate tooltips?
            false               // generate URLs?
        );

    	chart.getTitle().setFont(new Font(CHART_HEADER_FONT_FAMILY, CHART_HEADER_FONT_STYLE, CHART_HEADER_FONT_SIZE));
    	chart.getTitle().setPaint(CHART_HEADER_FONT_COLOR);
    	chart.getTitle().setHorizontalAlignment(HorizontalAlignment.LEFT);
    	
    	chart.getLegend().setHorizontalAlignment(HorizontalAlignment.RIGHT);
    	chart.getLegend().setPosition(RectangleEdge.TOP);
    	chart.getLegend().setBorder(0,0,0,0);
    	
    	XYPlot xyplot = (XYPlot)chart.getPlot();
    	xyplot.setBackgroundPaint(CHART_BACKGROUND_COLOR);
    	xyplot.setRangeGridlinePaint(CHART_Y_GRID_COLOR);
    	xyplot.setOutlineVisible(false);
    	
    	if(newData!=null && !newData.isEmpty()){
    		NumberAxis numberaxis = new NumberAxis("");
        	xyplot.setRangeAxis(1, numberaxis);// 设置该新轴对应索引
        	xyplot.setDataset(1, prepareLineChartDataset(newData,false,locale));
        	xyplot.mapDatasetToRangeAxis(1, 1);
        	xyplot.setRenderer(1, new XYLineAndShapeRenderer());
        	
        	XYLineAndShapeRenderer lineandshaperenderer2 = (XYLineAndShapeRenderer) xyplot.getRenderer(1);
        	lineandshaperenderer2.setStroke(new BasicStroke(CHART_LINE_WEIGHT));//线条粗细
        	lineandshaperenderer2.setSeriesPaint(0, CHART_LINE_COLOR_TWO);
        	lineandshaperenderer2.setUseFillPaint(true);    //应用
        	xyplot.setRenderer(1, lineandshaperenderer2);
    	}
    	
    	xyplot.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD);
    	
    	XYLineAndShapeRenderer lineandshaperenderer = (XYLineAndShapeRenderer) xyplot.getRenderer(0);
    	lineandshaperenderer.setStroke(new BasicStroke(CHART_LINE_WEIGHT));//线条粗细
    	lineandshaperenderer.setSeriesPaint(0, CHART_LINE_COLOR_ONE);//设置每条线颜色
        if(newData!=null && !newData.isEmpty()) {
            lineandshaperenderer.setSeriesPaint(1, CHART_LINE_COLOR_TWO);
        }
    	lineandshaperenderer.setUseFillPaint(true);    //应用
    	xyplot.setRenderer(0, lineandshaperenderer);
    	
    	DateAxis dateaxis = (DateAxis)xyplot.getDomainAxis();
    	dateaxis.setDateFormatOverride(CHART_DATE_FORMAT);
//        dateaxis.setVerticalTickLabels(true);
        int value = 0;
        for (Map.Entry<String,Map<Date,Number>> entry : countData.entrySet()) {
            value = entry.getValue().size();
        }
        if (value >= 80) {
            dateaxis.setTickUnit(new DateTickUnit(DateTickUnitType.DAY, 5));
        } else if (value >= 50 && value < 80) {
            dateaxis.setTickUnit(new DateTickUnit(DateTickUnitType.DAY, 4));
        } else if (value >= 20 && value < 50) {
            dateaxis.setTickUnit(new DateTickUnit(DateTickUnitType.DAY, 3));
        } else if (value < 20) {
            dateaxis.setTickUnit(new DateTickUnit(DateTickUnitType.DAY, 1));
        }
        SVGGraphics2D g2 = new SVGGraphics2D(width, height);
        chart.draw(g2, new Rectangle(0, 0, width, height));
        String str = "<div>" + g2.getSVGElement() + "</div>";
        str = str.replaceAll("clip\\-0", "clip-0-follower_over_time");
        str = str.replaceAll("clip\\-1", "clip-1-follower_over_time");
        str = str.replaceAll("clip\\-2", "clip-2-follower_over_time");
    	return str;
    }
    
    public String generatePieChart(String label,Map<String,Map<String,Number>> data,int height,int width, final String locale){
    	JFreeChart chart = ChartFactory.createPieChart(
    		I18n.get(label, locale),  // chart title
            preparePieChartDataset(data),            // data
            false,              // no legend
            false,               // tooltips
            false               // no URL generation
        );
    	
    	chart.getTitle().setFont(new Font(CHART_HEADER_FONT_FAMILY, CHART_HEADER_FONT_STYLE, CHART_HEADER_FONT_SIZE));
    	chart.getTitle().setPaint(CHART_HEADER_FONT_COLOR);    	
    	chart.setPadding(RectangleInsets.ZERO_INSETS);
    	chart.setAntiAlias(false);
    	
    	PiePlot plot = (PiePlot) chart.getPlot();
    	
    	plot.setIgnoreZeroValues(true);
    	
    	plot.setShadowPaint(CHART_BACKGROUND_COLOR);//pie图阴影
    	
    	plot.setSectionPaint(0, CHART_PIE_COLOR_ONE);
    	plot.setSectionPaint(1, CHART_PIE_COLOR_TWO);
    	plot.setSectionPaint(2, CHART_PIE_COLOR_THREE);
    	
    	plot.setLabelGenerator(new PieSectionLabelGenerator() {
			
			@Override
			public String generateSectionLabel(PieDataset data, Comparable key) {
				return I18n.get(key.toString(),locale) +"\r\n"+ data.getValue(key)+"%";
			}
			
			@Override
			public AttributedString generateAttributedSectionLabel(PieDataset pd,
					Comparable c) {
				return null;
			}
		});//饼图文字
    	
    	plot.setCircular(true);
    	
    	plot.setLabelLinkMargin(0.1);
    	plot.setBaseSectionOutlinePaint(CHART_BACKGROUND_COLOR);
    	plot.setBaseSectionOutlineStroke(new BasicStroke(2));//饼图块间间隔
        plot.setSectionOutlinesVisible(true);//外边线
        
        
        plot.setLabelBackgroundPaint(null);
        plot.setLabelOutlinePaint(null);
        plot.setLabelShadowPaint(null);
        plot.setLabelLinksVisible(true);//注释连线
        plot.setLabelFont(new Font(CHART_HEADER_FONT_FAMILY, CHART_HEADER_FONT_STYLE, 11));
        plot.setLabelGap(0.0);
        plot.setMaximumLabelWidth(0.22);
        
    	plot.setBackgroundPaint(CHART_BACKGROUND_COLOR);
    	plot.setOutlineVisible(false);//最外边框    	
//    	plot.setSimpleLabels(true);
    	
    	SVGGraphics2D g2 = new SVGGraphics2D(width, height);
        chart.draw(g2, new Rectangle(0, 0, width, height));
        String str = "<div>" + g2.getSVGElement() + "</div>";
        Random random = new Random();
        str = str.replaceAll("clip\\-0", "clip-0-" + random.nextInt(100000));
        str = str.replaceAll("clip\\-1", "clip-1-" + random.nextInt(100000));
        str = str.replaceAll("clip\\-2", "clip-2-" + random.nextInt(100000));
        return str;
    }
    
    public String generateRingChart(String label,Map<String,Map<String,Number>> data,int height,int width, final String locale){
    	String lastZombieTime = "";
    	try{
    		lastZombieTime = data.get("lastZombieTime").entrySet().iterator().next().getKey();
    		data.remove("lastZombieTime");
    	}catch(NullPointerException e){
    	}
    	JFreeChart chart = ChartFactory.createRingChart(
    		I18n.get(label, locale),   // chart title
            preparePieChartDataset(data),            // data
            false,              // no legend
            true,               // tooltips
            false               // no URL generation
        );
    	
    	chart.getTitle().setFont(new Font(CHART_HEADER_FONT_FAMILY, CHART_HEADER_FONT_STYLE, CHART_HEADER_FONT_SIZE));
    	chart.getTitle().setPaint(CHART_HEADER_FONT_COLOR);    	
    	chart.setPadding(RectangleInsets.ZERO_INSETS);
    	chart.setAntiAlias(false);
    	
    	RingPlot plot = (RingPlot) chart.getPlot();
    	
    	plot.setIgnoreZeroValues(true);
    	
    	plot.setShadowPaint(CHART_BACKGROUND_COLOR);//ring图阴影
    	
    	plot.setSectionPaint(0, CHART_PIE_COLOR_ONE);
    	plot.setSectionPaint(1, CHART_PIE_COLOR_TWO);
    	plot.setSectionPaint(2, CHART_PIE_COLOR_THREE);
    	
    	plot.setLabelGenerator(new PieSectionLabelGenerator() {
			
			@Override
			public String generateSectionLabel(PieDataset data, Comparable key) {
				return I18n.get(key.toString(),locale) +"\r\n"+ data.getValue(key)+"%";
			}
			
			@Override
			public AttributedString generateAttributedSectionLabel(PieDataset pd,
					Comparable c) {
				return null;
			}
		});//环图文字
    	
    	plot.setCircular(true);
    	
    	plot.setLabelLinkMargin(0);
    	plot.setLabelLinkStroke(new BasicStroke(0.1f, BasicStroke.CAP_BUTT,BasicStroke.JOIN_MITER));
    	plot.setBaseSectionOutlinePaint(CHART_BACKGROUND_COLOR);
    	plot.setSeparatorPaint(CHART_BACKGROUND_COLOR);
    	plot.setSectionDepth(0.4);
    	plot.setBaseSectionOutlineStroke(new BasicStroke(2));//饼图块间间隔
        plot.setSectionOutlinesVisible(true);//外边线
        
        
        plot.setLabelBackgroundPaint(null);
        plot.setLabelOutlinePaint(null);
        plot.setLabelShadowPaint(null);
        plot.setLabelLinksVisible(true);//注释连线
        plot.setLabelFont(new Font(CHART_HEADER_FONT_FAMILY, CHART_HEADER_FONT_STYLE, 10));
        plot.setLabelGap(0.0);
        plot.setMaximumLabelWidth(0.22);
        
    	plot.setBackgroundPaint(CHART_BACKGROUND_COLOR);
    	plot.setOutlineVisible(false);//最外边框    	
    	
    	SVGGraphics2D g2 = new SVGGraphics2D(width, height);
        chart.draw(g2, new Rectangle(0, 0, width, height));
        String str = "<div style='text-align:right;float:left;'>";
		str = str + g2.getSVGElement();
        Random random = new Random();
        str = str.replaceAll("clip\\-0", "clip-0-" + random.nextInt(100000));
        str = str.replaceAll("clip\\-1", "clip-1-" + random.nextInt(100000));
        str = str.replaceAll("clip\\-2", "clip-2-" + random.nextInt(100000));
//        if(lastZombieTime.equals("")){
            str = str + "</div>";
//        }else {
//        	str = str + "<p class='last-zombie-time'>"+I18n.get("last_zombie_time", locale)+": " + lastZombieTime + "</p></div>";
//        }
        return str;
    }
   
    public String generateLineAndBarChart(String label,Map<String,Map<Date,Number>> lineData,Map<String,Map<Date,Number>> barData,int height,int width, String locale){
    	JFreeChart chart = ChartFactory.createXYBarChart(
    		I18n.get(label, locale),    // title
            null,             // x-axis label
            true,
            null,      // y-axis label
            prepareMultiChartDataset(barData)
        );
    	chart.getRenderingHints().put(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_OFF);
    	
    	chart.getLegend().setBorder(0,0,0,0);
    	chart.getLegend().setHorizontalAlignment(HorizontalAlignment.RIGHT);
    	chart.getLegend().setPosition(RectangleEdge.TOP);
    	
    	chart.getTitle().setFont(new Font(CHART_HEADER_FONT_FAMILY, CHART_HEADER_FONT_STYLE, CHART_HEADER_FONT_SIZE));
    	chart.getTitle().setPaint(CHART_HEADER_FONT_COLOR);
    	chart.getTitle().setHorizontalAlignment(HorizontalAlignment.LEFT);
    	
    	XYPlot plot = (XYPlot)chart.getPlot();
    	plot.setBackgroundPaint(CHART_BACKGROUND_COLOR);
    	plot.setRangeGridlinePaint(CHART_Y_GRID_COLOR);
    	plot.setOutlineVisible(false);
    	
    	plot.setRenderer(new StackedXYBarRenderer(){
    		public Paint getItemPaint(final int row, final int column) {
    			if(row == 0){
    				return CHART_BAR_COLOR_ONE;
    			}
                return Color.ORANGE;
            }
    		
    		
    	});
    	XYBarRenderer barRenderer = (XYBarRenderer) plot.getRenderer();
//    	barRenderer.setBarPainter( new StandardBarPainter() );
    	barRenderer.setShadowVisible(false);
    	barRenderer.setBarPainter(new XYBarPainter(){

			@Override
			public void paintBarShadow(Graphics2D g2, XYBarRenderer renderer,
					int row, int column, RectangularShape bar,
					RectangleEdge base, boolean arg6) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void paintBar(Graphics2D g2, XYBarRenderer renderer, int row,
					int column, RectangularShape bar, RectangleEdge base) {
				bar.setFrame(bar.getX() - 4, bar.getY(), bar.getWidth() + 8, bar.getHeight());
				if(row == 0){
					g2.setColor(CHART_BAR_COLOR_ONE);
    			}else{
    				g2.setColor(Color.ORANGE);
    			}
               g2.fill(bar);
               g2.draw(bar);
			}
    	});
    	barRenderer.setMargin(0.2);
    	
    	DateAxis categoryaxis = (DateAxis) plot.getDomainAxis();
//    	categoryaxis.setCategoryLabelPositions(CategoryLabelPositions.UP_45); 
//    	categoryaxis.setMaximumCategoryLabelWidthRatio(5.0f); 
//    	categoryaxis.setMaximumCategoryLabelLines(1);  
    	categoryaxis.setAutoRange(true);
    	chart.setBackgroundImageAlpha(0.01F); 
    	categoryaxis.setTickMarksVisible(true);
    	categoryaxis.setDateFormatOverride(CHART_DATE_FORMAT);
//    	categoryaxis.setCategoryLabelPositionOffset(5);
    	
    	plot.getRangeAxis(0).setStandardTickUnits(NumberAxis.createIntegerTickUnits());//整数坐标

    	
    	LegendItemCollection legend = new LegendItemCollection();    
	    {
	    	if (barData.size()>0) {
                LegendItem li = new LegendItem(I18n.get(barData.keySet().iterator().next(),locale)+"("+I18n.get("left", locale)+")", "-", null, null, Plot.DEFAULT_LEGEND_ITEM_CIRCLE, CHART_BAR_COLOR_ONE);
                legend.add(li);
            }
	    }
    	
    	if(lineData !=null && !lineData.isEmpty()){
    		NumberAxis numberaxis = new NumberAxis("");
        	plot.setRangeAxis(1, numberaxis);// 设置该新轴对应索引
        	
        	plot.setDataset(1, prepareMultiChartDataset(lineData));
        	plot.mapDatasetToRangeAxis(1, 1);
        	XYLineAndShapeRenderer renderer2 = new XYLineAndShapeRenderer();
        	renderer2.setStroke(new BasicStroke(CHART_LINE_WEIGHT));//线条粗细
        	renderer2.setSeriesPaint(0, CHART_LINE_COLOR_ONE);//设置每条线颜色
        	renderer2.setSeriesPaint(1, CHART_LINE_COLOR_TWO);
        	renderer2.setUseFillPaint(true);
        	
        	Iterator i = lineData.keySet().iterator();
        	if(i.hasNext()){
        		LegendItem li = new LegendItem(I18n.get((String)i.next(),locale)+"("+I18n.get("right", locale)+")", "-", null, null, Plot.DEFAULT_LEGEND_ITEM_CIRCLE, CHART_LINE_COLOR_ONE);
        	    legend.add(li);
        	}
        	if(i.hasNext()){
        		LegendItem li = new LegendItem(I18n.get((String)i.next(),locale)+"("+I18n.get("right", locale)+")", "-", null, null, Plot.DEFAULT_LEGEND_ITEM_CIRCLE, CHART_LINE_COLOR_TWO);
        	    legend.add(li);
        	}
        	
            plot.setRenderer(1, renderer2);
            plot.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD);
            plot.getRangeAxis(1).setStandardTickUnits(NumberAxis.createIntegerTickUnits());//整数坐标
    	}

    	int value = 0;
        for (Map.Entry<String,Map<Date,Number>> entry : barData.entrySet()) {
            value = entry.getValue().size();
        }
        if (value >= 80) {
        	categoryaxis.setTickUnit(new DateTickUnit(DateTickUnitType.DAY, 5));
        } else if (value >= 50 && value < 80) {
        	categoryaxis.setTickUnit(new DateTickUnit(DateTickUnitType.DAY, 4));
        } else if (value >= 20 && value < 50) {
        	categoryaxis.setTickUnit(new DateTickUnit(DateTickUnitType.DAY, 3));
        } else if (value < 20) {
        	categoryaxis.setTickUnit(new DateTickUnit(DateTickUnitType.DAY, 1));
        }
        
    	plot.setFixedLegendItems(legend);
    	
    	SVGGraphics2D g2 = new SVGGraphics2D(width,height);
      chart.draw(g2, new Rectangle(0, 0, width, height));
      String str = "<div>" + g2.getSVGElement() + "</div>";
      str = str.replaceAll("clip\\-0", "clip-0-interaction_over_time");
      str = str.replaceAll("clip\\-1", "clip-1-interaction_over_time");
      str = str.replaceAll("clip\\-2", "clip-2-interaction_over_time");
      str = str.replaceAll("clip\\-3", "clip-3-interaction_over_time");
      str = str.replaceAll("clip\\-4", "clip-4-interaction_over_time");
      str = str.replaceAll("clip\\-5", "clip-5-interaction_over_time");
      str = str.replaceAll("clip\\-6", "clip-6-interaction_over_time");
      str = str.replaceAll("clip\\-7", "clip-7-interaction_over_time");
      str = str.replaceAll("clip\\-8", "clip-8-interaction_over_time");
      return str;
    }
    
    public String generateMapChart(String label,Map<String,Map<String,Number>> data,int height,int width, String locale){
    	StringWriter sw = new StringWriter();
		try {
			Template template = Velocity.getConnection().getTemplate("template/map.vm");
			VelocityContext context = I18n.getLocaleContext(locale);
			context.put("chart_header", I18n.get(label, locale));
			if(!data.isEmpty()){
	    		String scope = data.keySet().toArray(new String[]{})[0];
	    		Number max = 0;
	    		for (Number v : data.get(scope).values()) {
					if(v.doubleValue() > max.doubleValue()){
						max = v;
					}
				}
	    		for (String province : StringUtils.PRIVINCE_MAP.keySet()) {
	    			context.put("color_"+StringUtils.PRIVINCE_MAP.get(province), getColorForMap(data.get(scope).get(province),max));
				}
	    		
	    		List<Entry<String,Number>> list = new LinkedList<Entry<String,Number>>(data.get(scope).entrySet());
	            Collections.sort(list, new Comparator<Entry<String,Number>>() {

	                public int compare(Entry<String,Number> o1, Entry<String,Number> o2) {
	                    double d = (o1.getValue().doubleValue() - o2.getValue().doubleValue());
	                    return d < 0? 1 : (d == 0.0 ? 0 : -1);
	                }
	            });
	            Double total = 0.0;
	            NumberFormat nf = NumberFormat.getPercentInstance();
	            nf.setMinimumFractionDigits(2);
	            for (int i = 0; i < 10; i++) {
	            	if(list.size() > i){
	            		total += list.get(i).getValue().doubleValue();
	            		context.put("province_"+i, list.get(i).getKey());
	            	}else{
	            		context.put("province_"+i, "");
	            		context.put("value_"+i, "");
	            	}
				}
	            for (int i = 0; i < list.size() && i < 10; i++) {
            		context.put("value_"+i, nf.format(list.get(i).getValue().doubleValue()/total));
				}
	            total = null;
	    	}
			
			template.merge(context, sw);
		} catch (Exception e) {
			e.printStackTrace();
		}
    	return "<div class='title-margin' style='width:"+width+"'></div>" + sw.toString();
    }
    
    public String generateTwoDimensionTableChart(String label,Map<String,Map<String,Number>> data,int height,int width, String locale){
    	List<String> rows = new ArrayList<String>(data.keySet());
    	List<String> cols = new ArrayList<String>(data.get(rows.get(0)).keySet());
    	StringBuilder sb = new StringBuilder("<div style='float:left' style='width:").append(width).append("px;height:").append(height).append("px'><div class='chart-header'>").append(I18n.get(label, locale)).append("</div>");
    	sb.append("<table class='two-overview' style='width:100%'>");
    	for (int i = -1; i < rows.size(); i++) {
    		sb.append("<tr>");
    		for (int j = -1; j < cols.size(); j++) {
        		if(i == -1 && j > -1){
        			sb.append("<td class='title'>");
        			sb.append(I18n.get(cols.get(j), locale));
        			sb.append("</td>");
        		}else if(j == -1 && i > -1){
        			sb.append("<td class='row-title'>");
        			sb.append(I18n.get(rows.get(i), locale));
        			sb.append("</td>");
        		}else if(j == -1 && i == -1){
        			sb.append("<td></td>");
        		}else{
        			Number val = data.get(rows.get(i)).get(cols.get(j));
        			String key = cols.get(j);
        			if("Compare".equals(rows.get(i))){
        				if(val.doubleValue() < 0){
        					sb.append("<td class='value down'>");
        					if (!"Engagement".equals(key))
        						sb.append(REPORT_NUMBER_FORMAT.format(val) + "%");
        					else sb.append(REPORT_NUMBER_FORMAT.format(val));
                			sb.append("</td>");
        				}else if(val.doubleValue() > 0){
        					sb.append("<td class='value up'>");
        					if (!"Engagement".equals(key))
        						sb.append(REPORT_NUMBER_FORMAT.format(val) + "%");
        					else sb.append(REPORT_NUMBER_FORMAT.format(val));
                			sb.append("</td>");
        				}else{
        					sb.append("<td class='value'>");
        					if (!"Engagement".equals(key))
        						sb.append(REPORT_NUMBER_FORMAT.format(val) + "%");
        					else sb.append(REPORT_NUMBER_FORMAT.format(val));
                			sb.append("</td>");
        				}
        			}else{
        				sb.append("<td class='value'>");
            			sb.append(REPORT_NUMBER_FORMAT.format(val));
            			sb.append("</td>");
        			}
        		}
    		}
    		sb.append("</tr>");
		}
    	
    	sb.append("</table>");
    	sb.append("</div>");
    	return "<div class='title-margin' style='width:"+width+"'></div>" + sb.toString();
    }
    
    public String generateTableChart(String label,Map<String,Number> data,int height,int width, String locale){
    	StringBuilder sb = new StringBuilder("<div style='float:left' style='width:").append(width).append("px;height:").append(height).append("px'><div class='chart-header'>").append(I18n.get(label, locale)).append("</div>");
    	sb.append("<table style='width:100%' class='report-table'>");
    	List<String> cols = new ArrayList<String>(data.keySet());
    	int size = 4;
    	for (int i = 0; i < Math.ceil(cols.size()/(double)size); i++) {
    		sb.append("<tr>");
    		for (int j = i*size; j < (i+1)*size && j < cols.size(); j++) {
    			sb.append("<td class='title'>");
				sb.append(I18n.get(cols.get(j), locale));
				sb.append("</td>");
			}
    		sb.append("</tr>");
    		sb.append("<tr>");
    		for (int j = i*size; j < (i+1)*size; j++) {
				sb.append("<td class='value'>");
				if(j < cols.size()){
                    if (cols.get(j).equals("Zombie")) {
                        sb.append(String.valueOf(((Double)data.get(cols.get(j)))) + "%");
                    } else {
                        sb.append(REPORT_NUMBER_FORMAT.format(data.get(cols.get(j))));
//                        sb.append(String.valueOf(((Double)data.get(cols.get(j))) * 100) + "%");
                    }
				}else{
					sb.append("&nbsp;");
				}
				sb.append("</td>");
			}
			sb.append("</tr>");
		}
    	sb.append("</table>");
    	sb.append("</div>");
    	return "<div class='title-margin' style='width:"+width+"'></div>" + sb.toString();
    }

    public String generateStackedBarChart(String label,Map<String,Map<String,Number>> data,int height,int width, String locale){
    	JFreeChart chart = ChartFactory.createStackedBarChart(
    			I18n.get(label, locale),  // chart title
                "Category",                  // domain axis label
                "Value",                     // range axis label
                prepareStackedChartDataset(data,locale),                     // data
                PlotOrientation.HORIZONTAL,    // the plot orientation
                true,                        // legend
                true,                        // tooltips
                false                        // urls
            );
    	
        	chart.getTitle().setFont(new Font(CHART_HEADER_FONT_FAMILY, CHART_HEADER_FONT_STYLE, CHART_HEADER_FONT_SIZE));
        	chart.getTitle().setPaint(CHART_HEADER_FONT_COLOR);
        	chart.getTitle().setHorizontalAlignment(HorizontalAlignment.LEFT);
        	
        	chart.getLegend().setHorizontalAlignment(HorizontalAlignment.RIGHT);
        	chart.getLegend().setPosition(RectangleEdge.TOP);
        	chart.getLegend().setBorder(0,0,0,0);
          	chart.setBackgroundImageAlpha(0.01F);
        	
        	CategoryPlot plot = (CategoryPlot)chart.getPlot();
        	plot.setBackgroundPaint(CHART_BACKGROUND_COLOR);
        	plot.setRangeGridlinePaint(CHART_Y_GRID_COLOR);
        	plot.setOutlineVisible(false);
        	plot.setRangeAxisLocation(AxisLocation.BOTTOM_OR_LEFT);
        	
        	StackedBarRenderer renderer = (StackedBarRenderer) plot.getRenderer();
            renderer.setBarPainter(new StandardBarPainter());
            renderer.setShadowVisible(false);
            renderer.setSeriesPaint(2, CHART_Y_GRID_COLOR);
            renderer.setSeriesPaint(1, CHART_PIE_COLOR_TWO);
            renderer.setSeriesPaint(0, CHART_BAR_COLOR_TWO);
            renderer.setLegendTextFont(0, new Font(CHART_HEADER_FONT_FAMILY, CHART_HEADER_FONT_STYLE, 16));
            renderer.setLegendTextFont(1, new Font(CHART_HEADER_FONT_FAMILY, CHART_HEADER_FONT_STYLE, 16));
            renderer.setLegendTextFont(2, new Font(CHART_HEADER_FONT_FAMILY, CHART_HEADER_FONT_STYLE, 16));
            
          	CategoryAxis categoryaxis = plot.getDomainAxis();
          	categoryaxis.setLabelFont(new Font(CHART_HEADER_FONT_FAMILY, CHART_HEADER_FONT_STYLE, 15));
          	categoryaxis.setTickLabelFont(new Font(CHART_HEADER_FONT_FAMILY, Font.PLAIN, 18));
          	categoryaxis.setLabel(null);
          	categoryaxis.setUpperMargin(0.15);
          	categoryaxis.setLowerMargin(0.15);
          	
          	ValueAxis rangeaxis = plot.getRangeAxis();
          	rangeaxis.setLabel(null);
          	
          	plot.getRangeAxis(0).setStandardTickUnits(NumberAxis.createIntegerTickUnits());//整数坐标
        	
        	SVGGraphics2D g2 = new SVGGraphics2D(width, height);
            chart.draw(g2, new Rectangle(0, 0, width, height));
        String str = "<div>" + g2.getSVGElement() + "</div>";
        str = str.replaceAll("clip\\-0", "clip-0-aggregate_sentiment");
        str = str.replaceAll("clip\\-1", "clip-1-aggregate_sentiment");
        str = str.replaceAll("clip\\-2", "clip-2-aggregate_sentiment");
        return str;
    }
    
    public String generatePieAndTableChart(String label,Map<String,Map<String,Number>> data,int height,int width, String locale){
    	JFreeChart chart = ChartFactory.createRingChart(
    			I18n.get(label, locale),  // chart title
                preparePieAndTableChartDataset(data,locale),            // data
                false,              // no legend
                false,               // tooltips
                false               // no URL generation
            );
    	chart.getTitle().setFont(new Font(CHART_HEADER_FONT_FAMILY, CHART_HEADER_FONT_STYLE, CHART_HEADER_FONT_SIZE));
    	chart.getTitle().setPaint(CHART_HEADER_FONT_COLOR);
    	chart.getTitle().setHorizontalAlignment(HorizontalAlignment.LEFT);

    	RingPlot plot = (RingPlot) chart.getPlot();
        plot.setCircular(true);
    	plot.setIgnoreZeroValues(true);
    	plot.setShadowPaint(CHART_BACKGROUND_COLOR);//pie图阴影
    	plot.setCircular(true);
    	
    	plot.setBaseSectionOutlinePaint(CHART_BACKGROUND_COLOR);
    	plot.setBaseSectionOutlineStroke(new BasicStroke(1));//饼图块间间隔
        plot.setSectionOutlinesVisible(true);//外边线
        plot.setSeparatorPaint(CHART_BACKGROUND_COLOR);
        plot.setSectionDepth(0.4);
        
        plot.setLabelGenerator(null);
    	plot.setSectionPaint(0, CHART_PIE_COLOR_TWO);
    	plot.setSectionPaint(1, CHART_PIE_COLOR_SIX);
    	plot.setSectionPaint(2, CHART_PIE_COLOR_THREE);
    	plot.setSectionPaint(3, CHART_PIE_COLOR_FOUR);
    	plot.setSectionPaint(4, CHART_PIE_COLOR_ONE);
    	plot.setSectionPaint(5, CHART_PIE_COLOR_FIVE);
    	plot.setSectionPaint(6, CHART_PIE_COLOR_OTHER);
    	
        plot.setSectionOutlinesVisible(false);
    	
    	plot.setBackgroundPaint(CHART_BACKGROUND_COLOR);
    	plot.setOutlineVisible(false);//最外边框
//    	
    	width = width - 490;
    	SVGGraphics2D g2 = new SVGGraphics2D(width, height);
        chart.draw(g2, new Rectangle(0, 0, width, height));
        
        
        StringBuilder sb = new StringBuilder("<div style='float:left; margin-top:50px;margin-left: 45px;'>");
        if ("Website Distribution".equals(label)) {
            sb.append("<table class='top-website'>");
            sb.append("<tr><th></th><th>"+I18n.get("number", locale)+"</th><th>"+I18n.get("website", locale)+"</th><th>"+I18n.get("threads", locale)+"</th><th>"+I18n.get("posts", locale)+"</th><th>"+I18n.get("percent", locale)+"</th></tr>");
        } else if ("Topic Distribution".equals(label)) {
            sb.append("<table class='top-topic'>");
            sb.append("<tr><th></th><th>"+I18n.get("number", locale)+"</th><th>"+I18n.get("topic", locale)+"</th><th>"+I18n.get("threads", locale)+"</th><th>"+I18n.get("posts", locale)+"</th><th>"+I18n.get("percent", locale)+"</th></tr>");
        } else if ("Media Distribution".equals(label)) {
            sb.append("<table class='top-media'>");
            sb.append("<tr><th></th><th>"+I18n.get("number", locale)+"</th><th>"+I18n.get("media", locale)+"</th><th>"+I18n.get("percent", locale)+"</th></tr>");
        }

    	if(!data.isEmpty()){
			List<Entry<String,Map<String,Number>>> list = new LinkedList<Entry<String,Map<String,Number>>>(data.entrySet());
			Collections.sort(list, new Comparator<Entry<String,Map<String,Number>>>() {
                public int compare(Entry<String,Map<String,Number>> o1, Entry<String,Map<String,Number>> o2) {
                    int c =  -((Double)(o1.getValue().get("post_num").doubleValue())).compareTo((Double)(o2.getValue().get("post_num").doubleValue()));
                    if(c == 0){
                    	Comparator<Object> cmp = (Collator.getInstance(Locale.CHINA));
                    	return cmp.compare(o1.getKey(), o2.getKey());
                    }else{
                    	return c;
                    }
                }
            });
            if ("Media Distribution".equals(label)) {
                for (int i = 0; i < list.size() && i < 6; i++) {
                    sb.append("<tr>");
                    sb.append("<td><div style='height:22px' class='site-td-" + String.valueOf(i) + "'>&nbsp;&nbsp;</div></td>");
                    sb.append("<td class='website-td website-name'>" + I18n.get(String.valueOf(i+1),locale) + "</td>");
                    sb.append("<td class='website-td'>" + list.get(i).getKey() + "</td>");
                    sb.append("<td class='website-td distribution_value'>" + list.get(i).getValue().get("percentage") + "%</td>");
                }
            } else {
                for (int i = 0; i < list.size() && i < 6; i++) {
                    sb.append("<tr>");
                    sb.append("<td><div style='height:22px' class='site-td-" + String.valueOf(i) + "'>&nbsp;&nbsp;</div></td>");
                    sb.append("<td class='website-td'>" + String.valueOf(i+1) + "</td>");
                    sb.append("<td class='website-td website-name'>" + I18n.get(list.get(i).getKey(),locale) + "</td>");
                    sb.append("<td class='website-td distribution_value'>" + REPORT_NUMBER_FORMAT.format(list.get(i).getValue().get("thread_num")) + "</td>");
                    sb.append("<td class='website-td distribution_value'>" + REPORT_NUMBER_FORMAT.format(list.get(i).getValue().get("post_num")) + "</td>");
                    sb.append("<td class='website-td distribution_value'>" + list.get(i).getValue().get("percentage") + "%</td>");
                }
            }
		}
    	sb.append("</table>");
    	sb.append("</div>");
        String str = "<div>" + g2.getSVGElement() + "</div>";
        if ("Website Distribution".equals(label)) {
            str = str.replaceAll("clip\\-0", "clip-site_distribution-0");
            str = str.replaceAll("clip\\-1", "clip-site_distribution-1");
            str = str.replaceAll("clip\\-2", "clip-site_distribution-2");
        } else if ("Topic Distribution".equals(label)) {
            str = str.replaceAll("clip\\-0", "clip-topic_distribution-0");
            str = str.replaceAll("clip\\-1", "clip-topic_distribution-1");
            str = str.replaceAll("clip\\-2", "clip-topic_distribution-2");
        }
    	
        return str + sb.toString();
    }
    
    public String generateContentTableChart(String label,Map<String,Map<String,String>> data,int height ,int width, String locale){
    	StringWriter sw = new StringWriter();
    	try {
			Template template = Velocity.getConnection().getTemplate("template/content.vm");
			VelocityContext context = I18n.getLocaleContext(locale);
			context.put("chart_header", I18n.get(label, locale));
			context.put("retweets_title", I18n.get("retweets_title", locale));
			context.put("comments_title", I18n.get("comments_title", locale));
			context.put("chart_width", width);
			context.put("chart_height", height);
            context.put("hascontent_0", "no");
            context.put("hascontent_1", "no");
            context.put("hascontent_2", "no");
			if(!data.isEmpty()){
				List<Entry<String,Map<String,String>>> list = new LinkedList<Entry<String,Map<String,String>>>(data.entrySet());
				Collections.sort(list, new Comparator<Entry<String,Map<String,String>>>() {
	                public int compare(Entry<String,Map<String,String>> o1, Entry<String,Map<String,String>> o2) {
	                	Double v1 = NumberUtils.stringToDouble(o1.getValue().get("posts"))
	                			+ Double.parseDouble(o1.getValue().get("reposts"))
	                			+ NumberUtils.stringToDouble(o1.getValue().get("comments"));
	                	Double v2 = NumberUtils.stringToDouble(o2.getValue().get("posts"))
	                			+ NumberUtils.stringToDouble(o2.getValue().get("reposts"))
	                			+ NumberUtils.stringToDouble(o2.getValue().get("comments"));
	                    return -v1.compareTo(v2);
	                }
	            });
				List<String> contents = new ArrayList<String>();
	            for (int i = 0; i < list.size() && i < 3; i++) {
                    context.put("hascontent_" + i, "yes");
                    contents.add(list.get(i).getValue().get("content"));
					context.put("repost_" + i, REPORT_NUMBER_FORMAT.format(Double.parseDouble(list.get(i).getValue().get("reposts"))));
					context.put("comment_" + i, REPORT_NUMBER_FORMAT.format(Double.parseDouble(list.get(i).getValue().get("comments"))));
					context.put("updated_" + i, list.get(i).getValue().get("updated"));
					context.put("created_" + i, list.get(i).getValue().get("created"));
					context.put("link_" + i, list.get(i).getValue().get("url"));
				}
	            String[] outputs = contents.toArray(new String[]{});
	            if("en-US".equals(locale)){
	            	outputs = Translator.getTranslator().translate(outputs, Language.CHINESE_SIMPLIFIED, Language.ENGLISH);
	            	if(outputs != null){
		            	context.put("translated_by", Translator.getTranslator().getName());
		            }else{
		            	outputs = contents.toArray(new String[]{});
		            }
	            }
	            for (int i = 0; i < outputs.length; i++) {
					context.put("content_"+i, outputs[i]);
				}
			}
			template.merge(context, sw);
		} catch (Exception e) {
			e.printStackTrace();
		}
    	return "<div class='title-margin' style='width:"+width+"'></div>" + sw.toString();
    }

    public String generateFollowersTableChart(String label,Map<String,Map<String,String>> data,int height ,int width, String locale){
    	StringWriter sw = new StringWriter();
    	try {
			Template template = Velocity.getConnection().getTemplate("template/followers.vm");
			VelocityContext context = I18n.getLocaleContext(locale);
			context.put("chart_header", I18n.get(label, locale));
			context.put("chart_width", (width-51)/2);
			context.put("chart_height", height-26);
			if(!data.isEmpty()){
				List<Entry<String,Map<String,String>>> list = new LinkedList<Entry<String,Map<String,String>>>(data.entrySet());
				Collections.sort(list, new Comparator<Entry<String,Map<String,String>>>() {
	                public int compare(Entry<String,Map<String,String>> o1, Entry<String,Map<String,String>> o2) {
	                	Double v1 = Double.parseDouble(o1.getValue().get("active_count"));
	                	Double v2 = Double.parseDouble(o2.getValue().get("active_count"));
	                	return -v1.compareTo(v2);
	                }
	            });
				
	            for (int i = 0; i < list.size() && i < 6; i++) {
	            	context.put("img_"+i, list.get(i).getValue().get("image"));
					context.put("name_"+i, list.get(i).getValue().get("name"));
					context.put("followers_"+i, REPORT_NUMBER_FORMAT.format(list.get(i).getValue().get("followers")));
					
					context.put("zombie_"+i, list.get(i).getValue().get("zombie"));
					context.put("friends_"+i, REPORT_NUMBER_FORMAT.format(list.get(i).getValue().get("friends")));
					context.put("tweets_"+i, REPORT_NUMBER_FORMAT.format(list.get(i).getValue().get("tweets")));
				}
			}
			template.merge(context, sw);
		} catch (Exception e) {
			e.printStackTrace();
		}
    	return "<div class='title-margin' style='width:"+width+"'></div>" + sw.toString();
    }

    @Override
    public String generateAreaChart(String label, final Map<String,Map<String, Number>> dataMap, int height, int width, String locale) throws Exception {
//        CategoryDataset paramCategoryDataset = prepareCategoryDataset(dataMap);
        int positive = 0, negative = 0, neutral = 0;
        for (Map.Entry<String, Map<String, Number>> entry : dataMap.entrySet()) {
            Map<String, Number> singleMap = entry.getValue();
            for (Map.Entry<String, Number> en : singleMap.entrySet()) {
                if (en.getKey().equals("positive")) {
                    positive = positive + en.getValue().intValue();
                } else if (en.getKey().equals("negative")) {
                    negative = negative + en.getValue().intValue();
                } else if (en.getKey().equals("neutral")) {
                    neutral = neutral + en.getValue().intValue();
                }
            }
        }
//        JFreeChart localJFreeChart = ChartFactory.createStackedAreaChart(I18n.get(label, locale), "", "", paramCategoryDataset);
        TimeTableXYDataset dataset = prepareTimeTableXYDataset(dataMap,locale);
        JFreeChart localJFreeChart = ChartFactory.createStackedXYAreaChart(I18n.get(label, locale), "", "", dataset);
        
        XYPlot localCategoryPlot = (XYPlot)localJFreeChart.getPlot();
        localCategoryPlot.setOutlineVisible(false);
        localCategoryPlot.setBackgroundPaint(CHART_BACKGROUND_COLOR);
        localCategoryPlot.setRangeGridlinePaint(CHART_Y_GRID_COLOR);
//        localCategoryPlot.setForegroundAlpha(0.5F);
        localCategoryPlot.setBackgroundPaint(null);
        
        
        NumberAxis localCategoryAxis = (NumberAxis)localCategoryPlot.getDomainAxis();
        localCategoryAxis.setLowerMargin(0D);
        localCategoryAxis.setUpperMargin(0D);
        NumberAxis localNumberAxis = (NumberAxis)localCategoryPlot.getRangeAxis();
        localNumberAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
        StackedXYAreaRenderer2 localCategoryItemRenderer = (StackedXYAreaRenderer2) localCategoryPlot.getRenderer();
        localCategoryItemRenderer.setBaseItemLabelsVisible(true);
        
    	localCategoryItemRenderer.setSeriesPaint(0, Color.RED);
        localCategoryItemRenderer.setSeriesPaint(1, new Color(parseColor("D0D0D0")));
    	localCategoryItemRenderer.setSeriesPaint(2, new Color(parseColor("46A274")));

        localJFreeChart.setBackgroundImageAlpha(0.01F);
        localNumberAxis.setTickMarksVisible(true);
        
        
        localCategoryAxis.setAutoRange(false);
//        localCategoryAxis.setAutoTickUnitSelection(false);
        localCategoryAxis.setTickUnit(new NumberTickUnit(24*60*60*1000));
        localCategoryAxis.setLowerBound(dataset.getXValue(0, 0));
        
        localCategoryAxis.setNumberFormatOverride(new NumberFormat(){

			private static final long serialVersionUID = -7114397519567736174L;

			@Override
            public StringBuffer format(double number, StringBuffer toAppendTo, FieldPosition pos) {
				int c = 1;
				if(dataMap.size() > 10){
					c = dataMap.size()/5;
				}
				if(number%(c*24*60*60*1000) == 0){
					System.out.println(String.valueOf(number));
	                SimpleDateFormat format = new SimpleDateFormat("MM/dd");
	                String d = format.format(new Date((long) number));
	                return toAppendTo.append(d);
				}else{
					return toAppendTo;
				}
				
            }

            @Override
            public StringBuffer format(long number, StringBuffer toAppendTo, FieldPosition pos) {
                return new StringBuffer(String.format("%s", number));
            }

            @Override
            public Number parse(String source, ParsePosition parsePosition) {
                return null;
            }
        });

        localJFreeChart.getTitle().setFont(new Font(CHART_HEADER_FONT_FAMILY, CHART_HEADER_FONT_STYLE, CHART_HEADER_FONT_SIZE));
        localJFreeChart.getTitle().setPaint(CHART_HEADER_FONT_COLOR);
        localJFreeChart.getTitle().setHorizontalAlignment(HorizontalAlignment.LEFT);
        SVGGraphics2D g2 = new SVGGraphics2D(width,height);
        localJFreeChart.draw(g2, new Rectangle(0, 0, width, height));
        String str = "<div>" + g2.getSVGElement() + "</div>";
        str = str.replaceAll("clip\\-0", "clip-0-sentiment_over_time");
        str = str.replaceAll("clip\\-1", "clip-1-sentiment_over_time");
        str = str.replaceAll("clip\\-2", "clip-2-sentiment_over_time");

        return str;
    }

    @Override
    public String generatePurchaseDriver(String label, Map<String,Map<String, Number>> dataMap, int height, int width, String locale) throws Exception {
        StandardChartTheme standardChartTheme=new StandardChartTheme("CN");
        //设置标题字体
        standardChartTheme.setExtraLargeFont(new Font(CHART_HEADER_FONT_FAMILY, CHART_HEADER_FONT_STYLE, CHART_HEADER_FONT_SIZE));
        //设置图例的字体
        standardChartTheme.setRegularFont(new Font(CHART_HEADER_FONT_FAMILY, Font.PLAIN, 10));
        ChartFactory.setChartTheme(standardChartTheme);
        CategoryDataset paramCategoryDataset = preparePurchaseDriverDataset(dataMap);
        JFreeChart localJFreeChart = ChartFactory.createBarChart(I18n.get(label, locale), I18n.get("sentiment_score", locale), I18n.get("posts", locale), paramCategoryDataset);
        CategoryPlot localCategoryPlot = (CategoryPlot) localJFreeChart.getPlot();
        localCategoryPlot.getDomainAxis().setMaximumCategoryLabelWidthRatio(1.5F);
        localCategoryPlot.setBackgroundPaint(null);
        localCategoryPlot.setRangeGridlinePaint(CHART_Y_GRID_COLOR);
        localCategoryPlot.setOutlineVisible(false);
        StandardCategoryToolTipGenerator localStandardCategoryToolTipGenerator = new StandardCategoryToolTipGenerator("{0}, {1} : {2}", DateFormat.getDateInstance());
        LineAndShapeRenderer localLineAndShapeRenderer = new LineAndShapeRenderer(false, true);
        localLineAndShapeRenderer.setBaseToolTipGenerator(localStandardCategoryToolTipGenerator);
        localCategoryPlot.setRenderer(localLineAndShapeRenderer);
        ChartUtilities.applyCurrentTheme(localJFreeChart);
        localJFreeChart.getTitle().setFont(new Font(CHART_HEADER_FONT_FAMILY, CHART_HEADER_FONT_STYLE, CHART_HEADER_FONT_SIZE));
        localJFreeChart.getTitle().setPaint(CHART_HEADER_FONT_COLOR);
        localJFreeChart.getTitle().setHorizontalAlignment(HorizontalAlignment.LEFT);

        // set point large
        Shape shape  = new Ellipse2D.Double(0,0,5,5);
        CategoryItemRenderer renderer = localCategoryPlot.getRenderer();
        renderer.setBaseShape(shape);

        CategoryAxis categoryaxis = localCategoryPlot.getDomainAxis();
        categoryaxis.setCategoryLabelPositions(CategoryLabelPositions.UP_45);
        categoryaxis.setMaximumCategoryLabelWidthRatio(5.0f);
        categoryaxis.setMaximumCategoryLabelLines(1);
        localJFreeChart.setBackgroundImageAlpha(0.01F);
        categoryaxis.setTickMarksVisible(true);
        categoryaxis.setCategoryLabelPositionOffset(5);

        SVGGraphics2D g2 = new SVGGraphics2D(width,height);
        localJFreeChart.draw(g2, new Rectangle(0, 0, width, height));
        String str = "<div>" + g2.getSVGElement() + "</div>";
        str = str.replaceAll("clip\\-0", "clip-0-purchase_driver");
        str = str.replaceAll("clip\\-1", "clip-1-purchase_driver");
        str = str.replaceAll("clip\\-2", "clip-2-purchase_driver");

        return str;
    }

    @Override
    public String generateSingleLineChart(String label,Map<String,Map<Date,Number>> countData, int height,int width, String key, String locale) {
        XYDataset xydataset = prepareDataForSingleLineData(countData, key);
        JFreeChart jfreechart = ChartFactory.createTimeSeriesChart(I18n.get(label, locale), null, null, xydataset, false, true, false);
        jfreechart.getRenderingHints().put(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_OFF);

        jfreechart.getTitle().setFont(new Font(CHART_HEADER_FONT_FAMILY, CHART_HEADER_FONT_STYLE, CHART_HEADER_FONT_SIZE));
        jfreechart.getTitle().setPaint(CHART_HEADER_FONT_COLOR);
        jfreechart.getTitle().setHorizontalAlignment(HorizontalAlignment.LEFT);

        XYPlot plot = (XYPlot)jfreechart.getPlot();
        plot.setBackgroundPaint(CHART_BACKGROUND_COLOR);
        plot.setRangeGridlinePaint(CHART_Y_GRID_COLOR);
        plot.setOutlineVisible(false);

        org.jfree.chart.renderer.xy.XYItemRenderer xyitemrenderer = (XYItemRenderer) plot.getRenderer();
        if(xyitemrenderer instanceof XYLineAndShapeRenderer)
        {
            XYLineAndShapeRenderer xylineandshaperenderer = (XYLineAndShapeRenderer)xyitemrenderer;
            xylineandshaperenderer.setBaseShapesVisible(true);
            xylineandshaperenderer.setBaseShapesFilled(true);
        }
        ValueAxis cateforyaxis = plot.getDomainAxis();
//        cateforyaxis.set;
//        CategoryAxis categoryaxis = plot.getDomainAxis();
//        categoryaxis.setCategoryLabelPositions(CategoryLabelPositions.UP_45);
//        categoryaxis.setMaximumCategoryLabelWidthRatio(5.0f);
//        categoryaxis.setMaximumCategoryLabelLines(1);
//        jfreechart.setBackgroundImageAlpha(0.01F);
//        categoryaxis.setTickMarksVisible(true);
//        categoryaxis.setCategoryLabelPositionOffset(5);
        SVGGraphics2D g2 = new SVGGraphics2D(width,height);
        jfreechart.draw(g2, new Rectangle(0, 0, width, height));
        return "<div>" + g2.getSVGElement() + "</div>";
    }


    public static CategoryDataset prepareDataForSingleLineData(Map<String,Map<Date,Number>> countData, String key, String nu)
    {
        DefaultCategoryDataset mDataset = new DefaultCategoryDataset();
        Map<Date, Number> singleMap = countData.get(key);
        for(Map.Entry<Date, Number> entry : singleMap.entrySet()) {
            mDataset.addValue(entry.getValue(), key, sdf.format(entry.getKey()));
        }
        return mDataset;
    }

    private static XYDataset prepareDataForSingleLineData(Map<String,Map<Date,Number>> countData, String key) {
        TimeSeries timeseries = new TimeSeries("US$ Treasury Yields");
        Map<Date, Number> dateMap = countData.get(key);
        for (Map.Entry<Date, Number> entry : dateMap.entrySet()) {
            Day day = new Day(entry.getKey());
            timeseries.add(day, entry.getValue());
        }
        TimeSeriesCollection timeseriescollection = new TimeSeriesCollection();
        timeseriescollection.addSeries(timeseries);
        return timeseriescollection;
    }

//    static CategoryDataset prepareCategoryDataset(Map<String, Map<String, Number>> dataMap) {
//        DefaultCategoryDataset localDefaultCategoryDataset = new DefaultCategoryDataset();
//        for(Map.Entry<String, Map<String, Number>> entry : dataMap.entrySet()) {
//            System.out.println(entry);
//            String key = entry.getKey();
//            Map<String, Number> singleMap = entry.getValue();
//            for(Map.Entry<String, Number> smallEn : singleMap.entrySet()) {
//                localDefaultCategoryDataset.addValue(smallEn.getValue(), smallEn.getKey(), key);
//            }
//        }
//        return localDefaultCategoryDataset;
//    }
    
    static TimeTableXYDataset prepareTimeTableXYDataset(Map<String, Map<String, Number>> dataMap, String locale) {
    	TimeTableXYDataset dataset = new TimeTableXYDataset();
        for(Map.Entry<String, Map<String, Number>> entry : dataMap.entrySet()) {
            System.out.println(entry);
            String key = entry.getKey();
            Map<String, Number> singleMap = entry.getValue();
            for(Map.Entry<String, Number> smallEn : singleMap.entrySet()) {
				dataset.add( new FixedMillisecond(DateUtils.getMidNight(DateUtils.dateStrToDate(key, "yyyy/MM/dd").getTime()).getTimeInMillis()+8*60*60*1000),smallEn.getValue().doubleValue(), I18n.get(smallEn.getKey(),locale) );
            }
        }
        return dataset;
    }

    private static CategoryDataset preparePurchaseDriverDataset(Map<String, Map<String, Number>> dataMap) {
        DefaultCategoryDataset localDefaultCategoryDataset = new DefaultCategoryDataset();
        for(Map.Entry<String, Map<String, Number>> entry : dataMap.entrySet()) {
            System.out.println(entry);
            String key = entry.getKey();
            Map<String, Number> singleMap = entry.getValue();
            String percent = "";
            Integer posts = 0;
            for(Map.Entry<String, Number> smallEn : singleMap.entrySet()) {
                String smallKey = smallEn.getKey();
                if ("percent".equals(smallKey)) {
                    percent = smallEn.getValue().toString();
                } else {
                    posts = Integer.parseInt(smallEn.getValue().toString());
                }
            }
            localDefaultCategoryDataset.addValue(posts, key, percent);
        }
        return localDefaultCategoryDataset;
    }
    
    private String getColorForMap(Number value,Number max){
    	if(value == null || max == null || value.doubleValue() == 0.0 || max.doubleValue() == 0.0){
    		return color2String(CHART_MAP_COLORS[0]);
    	}
    	if(value.doubleValue() == max.doubleValue()){
    		return color2String(CHART_MAP_COLORS[CHART_MAP_COLORS.length-1]);
    	}
    	double v = value.doubleValue()/max.doubleValue();
    	return color2String(CHART_MAP_COLORS[(int)(v*(CHART_MAP_COLORS.length-1))]);
    }
    
    public String color2String(Color color) {
        String R = Integer.toHexString(color.getRed());
        R = R.length() < 2 ? ('0' + R) : R;
        String B = Integer.toHexString(color.getBlue());
        B = B.length() < 2 ? ('0' + B) : B;
        String G = Integer.toHexString(color.getGreen());
        G = G.length() < 2 ? ('0' + G) : G;
        return '#' + R + G + B;
    }
    
    private TimeTableXYDataset prepareMultiChartDataset(Map<String,Map<Date,Number>> data){
    	TimeTableXYDataset dataset = new TimeTableXYDataset();
    	for (String scope : data.keySet()) {
    		List<Entry<Date,Number>> list = new LinkedList<Entry<Date,Number>>(data.get(scope).entrySet());
            Collections.sort(list, new Comparator<Entry<Date,Number>>() {

                public int compare(Entry<Date,Number> o1, Entry<Date,Number> o2) {
                    return o1.getKey().compareTo(o2.getKey());
                }
            });
            for (int i = 0; i < list.size(); i++) {
            	Number value = list.get(i).getValue();
    			dataset.add(new FixedMillisecond(list.get(i).getKey().getTime()), value == null? 0 : value.doubleValue(), scope);
			}
		}
    	return dataset;
    }
    
    private DefaultPieDataset preparePieChartDataset(Map<String,Map<String,Number>> data){
    	DefaultPieDataset dataset = new DefaultPieDataset();
    	if(!data.isEmpty()){
    		String scope = data.keySet().toArray(new String[]{})[0];
    		List<Entry<String, Number>> list = new LinkedList<Entry<String, Number>>(data.get(scope).entrySet());
    		Collections.sort(list, new Comparator<Entry<String, Number>>() {
                public int compare(Entry<String, Number> o1, Entry<String, Number> o2) {
                    return o1.getKey().length() > o2.getKey().length() ? 1 : 0;
                }
            });
    		for (int i = 0; i < list.size(); i++){
    			dataset.setValue(list.get(i).getKey(), list.get(i).getValue());
    		}
    	}
    	return dataset;
    }
    
    private CategoryDataset prepareStackedChartDataset(Map<String,Map<String,Number>> data,String locale){
    	DefaultCategoryDataset dataset = new DefaultCategoryDataset();
    	for (String scope : data.keySet()) {
    		dataset.addValue(data.get(scope).get("positive") == null? 0 : data.get(scope).get("positive"), I18n.get("positive",locale), scope);
    		dataset.addValue(data.get(scope).get("negative") == null? 0 : data.get(scope).get("negative"), I18n.get("negative",locale), scope);
    		dataset.addValue(data.get(scope).get("neutral") == null? 0 : data.get(scope).get("neutral"), I18n.get("neutral",locale), scope);
		}
    	return dataset;
    }
    
    private DefaultPieDataset preparePieAndTableChartDataset(Map<String,Map<String,Number>> data, String locale){
    	DefaultPieDataset dataset = new DefaultPieDataset();
    	double other = 100;
    	if(!data.isEmpty()){
    		List<Entry<String,Map<String,Number>>> list = new LinkedList<Entry<String,Map<String,Number>>>(data.entrySet());
			Collections.sort(list, new Comparator<Entry<String,Map<String,Number>>>() {
                public int compare(Entry<String,Map<String,Number>> o1, Entry<String,Map<String,Number>> o2) {
                    return -((Double)o1.getValue().get("post_num").doubleValue()).compareTo(((Double)o2.getValue().get("post_num").doubleValue()));
                }
            });
			for (int i = 0; i < list.size() && i < 6; i++) {
				dataset.setValue(I18n.get(list.get(i).getKey(),locale), list.get(i).getValue().get("percentage"));
				other = other - list.get(i).getValue().get("percentage").doubleValue();
			}
			dataset.setValue(I18n.get("Other",locale),other);
    	}
    	return dataset;
    }
    
    private XYDataset prepareLineChartDataset(Map<String,Map<Date,Number>> data,boolean left,String locale) {
    	TimeSeriesCollection dataset = new TimeSeriesCollection();
    	for (String scope : data.keySet()) {
    		TimeSeries s = new TimeSeries(I18n.get(scope,locale) + (left?"("+I18n.get("left", locale)+")":"("+I18n.get("right", locale)+")"));
        	for (Entry<Date, Number> entry : data.get(scope).entrySet()) {
        		s.add(new Day(entry.getKey()), entry.getValue());
			}
            dataset.addSeries(s);
		}
        return dataset;
    }
    
    public void appendTo(File file, String content){
    	try {
    		Document doc = Jsoup.parse(file,"UTF-8");
    		Elements e = doc.getElementsByClass("report-inner");
    		e.append(content);
    		BufferedWriter writer = new BufferedWriter(new FileWriter(file));
    		writer.write(doc.html());
    		writer.flush();
		} catch (IOException e) {
			e.printStackTrace();
		}
    }
    
    
    private static Integer parseColor(String color){
    	return Integer.parseInt(color, 16);
    }
    
    public static void main(String[] args) throws IOException {
    	List<ReportDefinition> reportDefinitions = ReportDefinition.getAllReportDefinition("3917339615", false);
        Report.generateReport(ReportDefinition.loadReportDefinitionById(162));
	}
}

package asia.wildfire.actsocial.impl;

import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.Writer;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.regex.Pattern;

import net.spy.memcached.MemcachedClient;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.jfree.util.Log;
import org.nutz.dao.Cnd;
import org.nutz.dao.Condition;
import org.nutz.dao.util.cri.SqlExpressionGroup;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import asia.wildfire.actors.ActsocialDataHandleActor;
import asia.wildfire.actsocial.ActsocialDataQuerier;
import asia.wildfire.actsocial.dao.AlertDetailDao;
import asia.wildfire.actsocial.dao.AlertRuleDao;
import asia.wildfire.actsocial.dao.AnalyticDao;
import asia.wildfire.actsocial.dao.BuzzAnalyticDao;
import asia.wildfire.actsocial.dao.BuzzReachDao;
import asia.wildfire.actsocial.dao.CustomRangeDao;
import asia.wildfire.actsocial.dao.DailyThreadDao;
import asia.wildfire.actsocial.dao.DailyThreadDao.AnalyticsType;
import asia.wildfire.actsocial.dao.DashboardDao;
import asia.wildfire.actsocial.dao.FacebookThreadDao;
import asia.wildfire.actsocial.dao.HourlyAnalyticDao;
import asia.wildfire.actsocial.dao.HourlyBuzzReachDao;
import asia.wildfire.actsocial.dao.HourlyThreadDao;
import asia.wildfire.actsocial.dao.ModuleCategoryDao;
import asia.wildfire.actsocial.dao.ModuleDao;
import asia.wildfire.actsocial.dao.ModuleIndustryMappingDao;
import asia.wildfire.actsocial.dao.ModuleIndustrySovDao;
import asia.wildfire.actsocial.dao.ModulePeriodVersionMappingDao;
import asia.wildfire.actsocial.dao.TaskDao;
import asia.wildfire.actsocial.dao.ThreadDao;
import asia.wildfire.actsocial.dao.ThreadsDao;
import asia.wildfire.actsocial.dao.TodayThreadDao;
import asia.wildfire.actsocial.dao.TopicDao;
import asia.wildfire.actsocial.dao.TopicDefinitionDao;
import asia.wildfire.actsocial.dao.WeiboAnalyticDao;
import asia.wildfire.actsocial.dao.WeiboDashboardDao;
import asia.wildfire.actsocial.dao.WeiboDemographicsDao;
import asia.wildfire.actsocial.dao.WeiboKolCuserFollowerResultDao;
import asia.wildfire.actsocial.dao.WeiboMentionDao;
import asia.wildfire.actsocial.dao.WeiboThreadDao;
import asia.wildfire.actsocial.dao.WeiboTopPostDao;
import asia.wildfire.actsocial.dao.WeiboTopPostTempDao;
import asia.wildfire.actsocial.dao.WeiboTopicDao;
import asia.wildfire.actsocial.model.AlertDetail;
import asia.wildfire.actsocial.model.AlertRule;
import asia.wildfire.actsocial.model.Analytic;
import asia.wildfire.actsocial.model.BasicDate;
import asia.wildfire.actsocial.model.BuzzAnalytic;
import asia.wildfire.actsocial.model.BuzzReach;
import asia.wildfire.actsocial.model.DailyThread;
import asia.wildfire.actsocial.model.Dashboard;
import asia.wildfire.actsocial.model.FacebookThreads;
import asia.wildfire.actsocial.model.HourlyAnalytic;
import asia.wildfire.actsocial.model.HourlyBuzzReach;
import asia.wildfire.actsocial.model.HourlyThread;
import asia.wildfire.actsocial.model.Module;
import asia.wildfire.actsocial.model.ModuleCategory;
import asia.wildfire.actsocial.model.ModuleIndustryMapping;
import asia.wildfire.actsocial.model.ModuleIndustrySov;
import asia.wildfire.actsocial.model.Post;
import asia.wildfire.actsocial.model.ThreadAndSiteResult;
import asia.wildfire.actsocial.model.ThreadDaysInfo;
import asia.wildfire.actsocial.model.Threads;
import asia.wildfire.actsocial.model.ThreadsAndPosts;
import asia.wildfire.actsocial.model.TodayThreads;
import asia.wildfire.actsocial.model.Topic;
import asia.wildfire.actsocial.model.TopicDefinition;
import asia.wildfire.actsocial.model.WeiboKolCuserFollower;
import asia.wildfire.actsocial.model.WeiboKolCuserFollowerResult;
import asia.wildfire.actsocial.model.WeiboMention;
import asia.wildfire.actsocial.model.WeiboThreads;
import asia.wildfire.actsocial.model.WeiboTopPost;
import asia.wildfire.actsocial.model.WeiboTopPostTemp;
import asia.wildfire.common.dao.CrmWeiboBuzzReachDao;
import asia.wildfire.common.dao.CrmWeiboBuzzVolumeDao;
import asia.wildfire.common.model.Site;
import asia.wildfire.common.model.User;
import asia.wildfire.common.model.dynamodb.Comment;
import asia.wildfire.common.model.dynamodb.DynamoModel;
import asia.wildfire.common.model.dynamodb.FBComment;
import asia.wildfire.common.model.dynamodb.FBUser;
import asia.wildfire.common.model.dynamodb.Retweet;
import asia.wildfire.common.model.dynamodb.WeiboBuzzReach;
import asia.wildfire.common.model.dynamodb.WeiboBuzzVolume;
import asia.wildfire.common.model.redshift.CrmWeiboBuzzReach;
import asia.wildfire.common.model.redshift.CrmWeiboBuzzVolume;
import asia.wildfire.connection.EC2;
import asia.wildfire.connection.ElasticCache;
import asia.wildfire.connection.Solr;
import asia.wildfire.connection.ElasticCache.CacheName;
import asia.wildfire.connection.Mysql;
import asia.wildfire.connection.S3;
import asia.wildfire.connection.S3.Region;
import asia.wildfire.connection.SQS;
import asia.wildfire.connection.SQS.Name;
import asia.wildfire.enums.Sentiment;
import asia.wildfire.helper.Period;
import asia.wildfire.helper.Query;
import asia.wildfire.mail.ActsocialMailSender;
import asia.wildfire.utils.DateUtils;
import asia.wildfire.utils.GzipCompressor;
import asia.wildfire.utils.JsonParser;
import asia.wildfire.utils.NumberUtils;
import asia.wildfire.utils.SortUtils;
import asia.wildfire.utils.StringUtils;

import com.amazonaws.services.dynamodb.datamodeling.PaginatedQueryList;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.ibm.actor.utils.Utils;

public class ActsocialDataServiceImpl {
    private final static Logger LOGGER = LoggerFactory
            .getLogger(ActsocialDataHandleActor.class);
    public final static Integer DEFAULT_VERSION = -1;
    public final static String WEIBO_MODULE_TYPE = "weibo";
    public final static String BRAND_MODULE_TYPE = "brand";
    public final static String INDUSTRY_MODULE_TYPE = "industry";
    public final static String FACEBOOK_MODULE_TYPE = "facebook";
    public final static Integer EXCEL_MAX_SIZE = 65530;

    public final static Integer MAX_VERSION = 0;

    public final static String TMP_PATH = "/mnt/";

    static Query[] queries = new Query[]{
            new Query(
                    "overview",
                    "cuser_id as scope, count(user_id) as count, sum(influence) as influence",
                    null, "cuser_id"),
            new Query("interactive", "count(user_id) as count",
                    "interactive > 0", null),
            new Query("gender",
                    "cuser_id as scope,gender,count(user_id) as count", null,
                    "gender"),
            new Query(
                    "verified",
                    "cuser_id as scope,verified_type_group,count(user_id) as count",
                    null, "verified_type_group"),
            new Query(
                    "follower",
                    "cuser_id as scope,followers_count_group, count(user_id) as count",
                    null, "followers_count_group"),
            new Query("location",
                    "cuser_id as scope, province, count(user_id) as count",
                    null, "province"),
            new Query(
                    "zombie",
                    "cuser_id as scope,zombie_score_group as type, count(user_id) as count",
                    null, "zombie_score_group")};
    protected ActsocialDataQuerier actsocialDataQuerier = new ActsocialDataQuerierImpl();
    static Map<String, String> genderConds = new HashMap<String, String>();
    static Map<String, String> verifiedConds = new HashMap<String, String>();
    static Map<String, String> verifiedConds2 = new HashMap<String, String>();
    static Map<String, String> periodConds = new HashMap<String, String>();
    static Map<String, String> followerCountConds = new HashMap<String, String>();
    static Map<String, String> locationConds = new HashMap<String, String>();
    static Pattern digitPattern = Pattern.compile("\\d+");

    static {
        genderConds.put("All", null);
        genderConds.put("male", "m");
        genderConds.put("female", "f");
        genderConds.put("unknown", "unknown");

        verifiedConds.put("All", null);
        verifiedConds.put("verified", "verified");
        verifiedConds.put("master", "master");
        verifiedConds.put("normal", "normal");

        periodConds.put("1", "1");
        periodConds.put("7", "7");
        periodConds.put("30", "30");
        periodConds.put("60", "60");
        periodConds.put("90", "90");
        periodConds.put("last_month", "last_month");
        periodConds.put("last_week", "last_week");

        followerCountConds.put("All", null);
        followerCountConds.put("0-500", "0-500");
        followerCountConds.put("500-1000", "500-1000");
        followerCountConds.put("1000-5000", "1000-5000");
        followerCountConds.put("5000+", "5000+");

        locationConds.put("All", null);
        locationConds.put("Beijing", "北京");
        locationConds.put("Tianjin", "天津");
        locationConds.put("Hebei", "河北");
        locationConds.put("Shanxi", "山西");
        locationConds.put("NeiMongol", "内蒙古");
        locationConds.put("Liaoning", "辽宁");
        locationConds.put("Jilin", "吉林");
        locationConds.put("Heilongjiang", "黑龙江");
        locationConds.put("Shanghai", "上海");
        locationConds.put("Jiangsu", "江苏");
        locationConds.put("Zhejiang", "浙江");
        locationConds.put("Anhui", "安徽");
        locationConds.put("Fujian", "福建");
        locationConds.put("Jiangxi", "江西");
        locationConds.put("Shandong", "山东");
        locationConds.put("Henan", "河南");
        locationConds.put("Hubei", "湖北");
        locationConds.put("Hunan", "湖南");
        locationConds.put("Guangdong", "广东");
        locationConds.put("Guangxi", "广西");
        locationConds.put("Hainan", "海南");
        locationConds.put("Chongqing", "重庆");
        locationConds.put("Sichuan", "四川");
        locationConds.put("Guizhou", "贵州");
        locationConds.put("Yunnan", "云南");
        locationConds.put("Xizang", "西藏");
        locationConds.put("Shaanxi", "陕西");
        locationConds.put("Gansu", "甘肃");
        locationConds.put("Qinghai", "青海");
        locationConds.put("Ningxia", "宁夏");
        locationConds.put("Xinjiang", "新疆");
        locationConds.put("Taiwan", "台湾");
        locationConds.put("Xianggang", "香港");
        locationConds.put("Aomen", "澳门");
    }

    private final static List<String> THREAD_HEADERS = Arrays.asList(
            "site name", "media", "title", "date", "url", "posts", "neutral",
            "positive", "negative", "reposts", "comments", "topic");

    private final static List<String> POST_HEADERS = Arrays.asList("site name",
            "media", "title", "url", "user name", "date", "body");

    private final static List<String> WEIBO_THREAD_HEADERS = Arrays.asList(
            "site name", "date", "media", "title", "url", "reposts",
            "comments", "period");

    private final static List<String> KOL_HEADERS = Arrays.asList("user name",
            "url", "province", "city", "gender", "followers count",
            "favourites count", "tweets count", "profile image url",
            "verified type", "interactive", "retweets count", "comments count",
            "mentions count");

    private final static Pattern[] filteredRegex = new Pattern[]{
            Pattern.compile("relevant.*", Pattern.CASE_INSENSITIVE),
            Pattern.compile("kol@.*", Pattern.CASE_INSENSITIVE),
            Pattern.compile("brand@.*", Pattern.CASE_INSENSITIVE),
            Pattern.compile("青岛妈妈网"), Pattern.compile("content"),
            Pattern.compile("cosmetics"), Pattern.compile("baby"),
            Pattern.compile("car"), Pattern.compile("digital"),
            Pattern.compile("beijing"), Pattern.compile("shanghai"),
            Pattern.compile("hongkong"), Pattern.compile("skin_care"),
            Pattern.compile("fashion"), Pattern.compile("food"),
            Pattern.compile("travel"), Pattern.compile("sports"),
            Pattern.compile("health"), Pattern.compile("restaurant"),
            Pattern.compile("trial"), Pattern.compile("beverage"),
            Pattern.compile("family"), Pattern.compile("real_estate"),
            Pattern.compile("education"), Pattern.compile("parenting"),
            Pattern.compile("movie"), Pattern.compile("music"),
            Pattern.compile("game"), Pattern.compile("book"),
            Pattern.compile("motorcycle"), Pattern.compile("price_high"),
            Pattern.compile("price_low"), Pattern.compile("good_service"),
            Pattern.compile("bad_service"), Pattern.compile("good_quality"),
            Pattern.compile("bad_quality"),
            Pattern.compile("good_environment"),
            Pattern.compile("bad_environment"),
            Pattern.compile("value_for_money"),
            Pattern.compile("unvalued_for_money"),
            Pattern.compile("complaint"), Pattern.compile("purchase"),
            Pattern.compile("comparison"), Pattern.compile("inquiry"),
            Pattern.compile("positive"), Pattern.compile("negative"),
            Pattern.compile("advertisment")};

    public void calThreadIncrementally(Module module, String period, Calendar startDate, Calendar endDate){
    	ThreadsDao threadsDao = new ThreadsDao();
    	threadsDao.execute("INSERT into threads(`thread_id`, `scope`, `topic`, `site_id`, `site_name`, `media`, `date`, " +
    			"`title`, `url`, `period`, `posts`, `posts_in_range`, `positive`, `negative`, `neutral`, `positive_in_range`, " +
    			"`negative_in_range`, `neutral_in_range`, `relevance`, `reposts`, `comments`, `updated`, `filtered`, `repost_to`, `views`, `version`, `latitude`, `longitude`) " +
    			"SELECT `thread_id`, `scope`, `topic`, `site_id`, `site_name`, `media`, `date`, " +
    			"`title`, `url`, `period`, `posts`, `posts_in_range`, `positive`, `negative`, `neutral`, `positive_in_range`, " +
    			"`negative_in_range`, `neutral_in_range`, `relevance`, `reposts`, `comments`, `updated`, `filtered`, `repost_to`, `views`,-1 , `latitude`, `longitude`" +
    			"from threads where scope = '"+module.getScope()+"' and version = 0 and period = '"+period+"'");
    	DailyThreadDao dailyThreadDao = new DailyThreadDao();
    	Map<String,Object> params = new HashMap<String,Object>();
    	params.put("ymd1", module.getLastThreadTime());
    	params.put("ymd2", endDate);
    	params.put("ymd3", startDate);
    	params.put("ymd4", DateUtils.getMidNight(module.getLastThreadTime().getTime() - endDate.getTimeInMillis() + startDate.getTimeInMillis()));
    	List<Map> rs = dailyThreadDao.executeQuery("select distinct(thread_id) as thread_id from daily_threads where scope in ("+module.getScopeString()+") and ((ymd >= @ymd1 and ymd <= @ymd2) or (ymd <= @ymd3 and  ymd >= @ymd4))", params);
    	List<Threads> totalThreads = new ArrayList<Threads>();
    	for (Map map : rs) {
    		String threadId = (String)map.get("thread_id");
    		Map<String, Object> threadInfo = dailyThreadDao.queryDailyThreadResultForSingleThread(module, period, threadId, startDate, endDate);
    		Threads thread = null;
    		List<Threads> ts = threadsDao.queryByCond(new String[]{"scope","thread_id","version","period"}, new String[]{"=","=","=","="}, new Object[]{module.getScope(),threadId,DEFAULT_VERSION,period});
    		if(ts.size() > 0){
    			thread = ts.get(0);
    		}
    		if(threadInfo.isEmpty()){
    			if(thread!=null){
    				threadsDao.delete(thread);
    			}
    		}else{
    			if(thread==null){
    				thread = new Threads();
    			}
                thread.setThreadId((String) threadInfo.get("thread_id"));
                thread.setScope((String) threadInfo.get("scope"));
                thread.setTopic((String) threadInfo.get("topics"));
                thread.setSiteId((Integer) threadInfo.get("site_id"));
                thread.setSiteName((String) threadInfo.get("site_name"));
                thread.setMedia((String) threadInfo.get("media"));
                thread.setDate((Timestamp) threadInfo.get("date"));
                thread.setTitle((String) threadInfo.get("title"));
                thread.setUrl((String) threadInfo.get("url"));
                thread.setPeriod((String) threadInfo.get("period"));
                thread.setPosts((Long) threadInfo.get("posts"));
                thread.setPostsInRange((Long) threadInfo.get("posts"));
                thread.setPositive((Long) threadInfo.get("positive"));
                thread.setNegative((Long) threadInfo.get("negative"));
                thread.setNeutral((Long) threadInfo.get("neutral"));
                thread.setPositiveInRange((Long) threadInfo.get("positive"));
                thread.setNegativeInRange((Long) threadInfo.get("negative"));
                thread.setNeutralInRange((Long) threadInfo.get("neutral"));
                thread.setUpdated(new Date());
                thread.setRelevance(0);
                thread.setViews((Long) threadInfo.get("views"));
                thread.setComments((Long) threadInfo.get("comments"));
                thread.setReposts((Long) threadInfo.get("reposts"));
                thread.setFiltered(false);
                thread.setRepostTo((String) threadInfo.get("repost_to"));
                thread.setLatitude((Double) threadInfo.get("latitude"));
                thread.setLongitude((Double) threadInfo.get("longitude"));
            	thread.setVersion(DEFAULT_VERSION);
            	if(ts.size() > 0){
                	threadsDao.update(thread);
                }else{
                	totalThreads.add(thread);
                }
    		}
		}
    	threadsDao.batchInsert(totalThreads);
    }


    public void exportThreads(Module module, String period) {
        List<Threads> listThreads = new ArrayList<Threads>();
        ThreadsDao threadsDao = new ThreadsDao();
        long end = System.currentTimeMillis();
        listThreads = threadsDao.queryByCondLimit(Cnd.where("scope","=",module.getScope()).and("version","=",DEFAULT_VERSION).and("period","=", period), 65500);
        if(listThreads.size() > 0){
            generateExportFile(module, period, listThreads);
        }
        LOGGER.info("generateExportFile[" + module.getScope() + "][" + period
                + "] spend ======================= "
                + (System.currentTimeMillis() - end));
    }


    /**
     * use daily_threads calculate threads
     *
     * @param module
     */
    public boolean calThread(Module module, String period, Calendar startDate,
                             Calendar endDate) {
        DailyThreadDao dailyThreadDao = new DailyThreadDao();
        long sstart = System.currentTimeMillis();
        Map<String, Map<String, Object>> dailyThreadResultMap = dailyThreadDao.queryDailyThreadResultMap2(module, period, startDate, endDate);
        LOGGER.info("queryDailyThreadResultMap2[" + module.getScope() + "][" + period + "] spend ======================= " + (System.currentTimeMillis() - sstart));
        ThreadsDao threadsDao = new ThreadsDao();
        List<Threads> ts = new ArrayList<Threads>();
        List<Threads> totalThreads = new ArrayList<Threads>();
        int batchSize = 500;
        int i = 0;
        long start = System.currentTimeMillis();
        for (Map.Entry<String, Map<String, Object>> entryRes : dailyThreadResultMap.entrySet()) {
            Map<String, Object> singleMap = entryRes.getValue();
            Threads threads = new Threads();
            threads.setThreadId((String) singleMap.get("thread_id"));
            threads.setScope((String) singleMap.get("scope"));
            threads.setTopic((String) singleMap.get("topics"));
            threads.setSiteId((Integer) singleMap.get("site_id"));
            threads.setSiteName((String) singleMap.get("site_name"));
            threads.setMedia((String) singleMap.get("media"));
            threads.setDate((Timestamp) singleMap.get("date"));
            threads.setTitle((String) singleMap.get("title"));
            threads.setUrl((String) singleMap.get("url"));
            threads.setPeriod((String) singleMap.get("period"));
            threads.setPosts((Long) singleMap.get("posts"));
            threads.setPostsInRange((Long) singleMap.get("posts"));
            threads.setPositive((Long) singleMap.get("positive"));
            threads.setNegative((Long) singleMap.get("negative"));
            threads.setNeutral((Long) singleMap.get("neutral"));
            threads.setPositiveInRange((Long) singleMap.get("positive"));
            threads.setNegativeInRange((Long) singleMap.get("negative"));
            threads.setNeutralInRange((Long) singleMap.get("neutral"));
            threads.setUpdated(new Date());
            threads.setRelevance(0);
            threads.setViews((Long) singleMap.get("views"));
            threads.setComments((Long) singleMap.get("comments"));
            threads.setReposts((Long) singleMap.get("reposts"));
            threads.setFiltered(false);
            threads.setRepostTo((String) singleMap.get("repost_to"));
            threads.setVersion(DEFAULT_VERSION);
            threads.setLatitude((Double) singleMap.get("latitude"));
            threads.setLongitude((Double) singleMap.get("longitude"));
            ts.add(threads);
            if ((++i) % batchSize == 0) {
                threadsDao.batchInsert(ts);
                LOGGER.info("batch save threads[" + module.getScope() + "][" + period + "]");
                ts.clear();
            }
            if (i < EXCEL_MAX_SIZE) {
                totalThreads.add(threads);
            }
        }
        threadsDao.batchInsert(ts);
        long end = System.currentTimeMillis();
        LOGGER.info("batch save threads[" + module.getScope() + "][" + period + "][" + dailyThreadResultMap.size() + "] spend ======================= " + (end - start));
        generateExportFile(module, period, totalThreads);
        LOGGER.info("generateExportFile[" + module.getScope() + "][" + period + "] spend ======================= " + (System.currentTimeMillis() - end));
//        generateExportFileWithPosts(module, period, totalThreads);
        try {
            for (AlertRule ar : AlertRule.queryEnabledRuleForModule(module.getScope())) {
                ar.matchThread(module, period, totalThreads);
            }
        } catch (Exception e) {
            Utils.errorLogger.error(e.getMessage());
        }
        ts = null;
        return true;
    }
    
    @Deprecated
    public void generateWeiboExport(Module module, String period) {
        String dirName = TMP_PATH;
        String path = module.getScope()+"_"+period;
        Map<String, HSSFWorkbook> outMap = new HashMap<String, HSSFWorkbook>();
        String[] tweetHeader = new String[]{"user", "username", "type",
                "sentiment", "content", "comments_count", "retweets_count",
                "date"};
        String[] retweetHeader = new String[]{"user", "username", "type",
                "sentiment", "content", "comments_count", "retweets_count",
                "date", "retweeted", "location", "gender"};
        String[] commentHeader = new String[]{"user", "username", "type",
                "sentiment", "content", "date", "commented", "location",
                "gender"};
        String[] mentionHeader = new String[]{"user", "username", "type",
                "sentiment", "content", "date", "location", "gender"};
        Map<String, Map<String, Integer>> sheetSizeMap = new HashMap<String, Map<String, Integer>>();
        sheetSizeMap.put("Tweet", new HashMap<String, Integer>());
        sheetSizeMap.put("Retweet", new HashMap<String, Integer>());
        sheetSizeMap.put("Comment", new HashMap<String, Integer>());
        sheetSizeMap.get("Tweet").put(period, 0);
        sheetSizeMap.get("Retweet").put(period, 0);
        sheetSizeMap.get("Comment").put(period, 0);
        HSSFWorkbook book = new HSSFWorkbook();
        HSSFSheet tweetSheet = book.createSheet("Tweet");
        HSSFRow tweetHeaderRow = tweetSheet.createRow(0);
        for (int i = 0, length = tweetHeader.length; i < length; i++) {
            HSSFCell cell = tweetHeaderRow.createCell(i);
            cell.setCellValue(tweetHeader[i]);
        }
        HSSFSheet retweetSheet = book.createSheet("Retweet");
        HSSFRow retweetHeaderRow = retweetSheet.createRow(0);
        for (int i = 0, length = retweetHeader.length; i < length; i++) {
            HSSFCell cell = retweetHeaderRow.createCell(i);
            cell.setCellValue(retweetHeader[i]);
        }
        HSSFSheet commentSheet = book.createSheet("Comment");
        HSSFRow commentHeaderRow = commentSheet.createRow(0);
        for (int i = 0, length = commentHeader.length; i < length; i++) {
            HSSFCell cell = commentHeaderRow.createCell(i);
            cell.setCellValue(commentHeader[i]);
        }
        HSSFSheet mentionSheet = book.createSheet("Mention");
        HSSFRow mentionHeaderRow = mentionSheet.createRow(0);
        for (int i = 0, length = mentionHeader.length; i < length; i++) {
            HSSFCell cell = mentionHeaderRow.createCell(i);
            cell.setCellValue(mentionHeader[i]);
        }
        outMap.put(period, book);
        boolean jumpRetweet = true;
        boolean jumpComment = true;
        WeiboThreadDao weiboThreadDao = new WeiboThreadDao();
        List<WeiboThreads> weiboThreadsList = weiboThreadDao.queryByCond(
                new String[]{"scope", "period", "version"}, new String[]{
                "=", "=", "="}, new Object[]{module.getScope(),
                period, DEFAULT_VERSION + 1});
        for (WeiboThreads weiboThreads : weiboThreadsList) {
            boolean inRange = false;
            for (Entry<String, BasicDate> entry : module
                    .getTodoBasicCalendarMap().entrySet()) {
                if (entry.getKey().equals(period)) {
                    if (sheetSizeMap.get("Tweet").get(entry.getKey()) < EXCEL_MAX_SIZE) {
                        if (weiboThreads.getDate().getTime() > entry.getValue()
                                .getStartTime().getTimeInMillis()
                                && weiboThreads.getDate().getTime() < entry
                                .getValue().getEndTime().getTimeInMillis()) {
                            System.out.println("write file for period["
                                    + entry.getKey() + "] tweet["
                                    + weiboThreads.getThreadId() + "]");
                            HSSFSheet sheet = outMap.get(entry.getKey())
                                    .getSheetAt(0);
                            HSSFRow tweetRow = sheet.createRow(sheet
                                    .getLastRowNum() + 1);
                            HSSFCell cell00 = tweetRow.createCell(0);
                            cell00.setCellValue("http://weibo.com/"
                                    + weiboThreads.getScope());
                            HSSFCell cell01 = tweetRow.createCell(1);
                            cell01.setCellValue(module.getName());
                            HSSFCell cell02 = tweetRow.createCell(2);
                            cell02.setCellValue("Tweet");
                            HSSFCell cell03 = tweetRow.createCell(3);
                            cell03.setCellValue("");
                            HSSFCell cell04 = tweetRow.createCell(4);
                            cell04.setCellValue(weiboThreads.getTitle());
                            HSSFCell cell05 = tweetRow.createCell(5);
                            cell05.setCellValue(weiboThreads.getComments());
                            HSSFCell cell06 = tweetRow.createCell(6);
                            cell06.setCellValue(weiboThreads.getReposts());
                            HSSFCell cell07 = tweetRow.createCell(7);
                            cell07.setCellValue(DateUtils
                                    .date2ExcelDate(weiboThreads.getDate()));
                            sheetSizeMap.get("Tweet").put(entry.getKey(),
                                    sheet.getLastRowNum());
                            inRange = true;
                        }
                    }
                }
            }
            if (inRange) {
                for (Integer size : sheetSizeMap.get("Retweet").values()) {
                    if (size < EXCEL_MAX_SIZE) {
                        jumpRetweet = false;
                    }
                }
                if (!jumpRetweet) {
                    PaginatedQueryList<Retweet> retweets = DynamoModel.query(
                            Retweet.class, weiboThreads.getThreadId());
                    for (Iterator<Retweet> iterator = retweets.iterator(); iterator
                            .hasNext(); ) {
                        Retweet retweet = iterator.next();
                        asia.wildfire.common.model.dynamodb.User user = DynamoModel
                                .find(asia.wildfire.common.model.dynamodb.User.class,
                                        retweet.getUserId());
                        for (Entry<String, BasicDate> entry : module
                                .getTodoBasicCalendarMap().entrySet()) {
                            if (retweet.getCreatedAt().longValue() > entry
                                    .getValue().getStartTime()
                                    .getTimeInMillis()
                                    && retweet.getCreatedAt().longValue() < entry
                                    .getValue().getEndTime()
                                    .getTimeInMillis()) {
                                HSSFSheet sheet = outMap.get(entry.getKey())
                                        .getSheetAt(1);
                                if (sheet.getLastRowNum() < EXCEL_MAX_SIZE) {
                                    System.out.println("write file for period["
                                            + entry.getKey() + "] tweet["
                                            + weiboThreads.getThreadId()
                                            + "] retweet[" + retweet.getRetweetId()
                                            + "]:" + sheet.getLastRowNum());
                                    HSSFRow row = sheet.createRow(sheet
                                            .getLastRowNum() + 1);
                                    HSSFCell cell00 = row.createCell(0);
                                    cell00.setCellValue("http://weibo.com/"
                                            + retweet.getUserId());
                                    HSSFCell cell01 = row.createCell(1);
                                    cell01.setCellValue(user.getScreenName());
                                    HSSFCell cell02 = row.createCell(2);
                                    cell02.setCellValue("Retweet");
                                    HSSFCell cell03 = row.createCell(3);
                                    cell03.setCellValue(retweet.getSentiment());
                                    HSSFCell cell04 = row.createCell(4);
                                    cell04.setCellValue(retweet.getText());
                                    HSSFCell cell05 = row.createCell(5);
                                    cell05.setCellValue(DateUtils
                                            .date2ExcelDate(new Date(retweet
                                                    .getCreatedAt())));
                                    HSSFCell cell06 = row.createCell(6);
                                    cell06.setCellValue(weiboThreads.getTitle());
                                    HSSFCell cell07 = row.createCell(7);
                                    cell07.setCellValue(user.getLocation());
                                    HSSFCell cell08 = row.createCell(8);
                                    cell08.setCellValue(user.getGender());
                                    sheetSizeMap.get("Retweet").put(
                                            entry.getKey(),
                                            sheetSizeMap.get("Retweet").get(
                                                    entry.getKey()) + 1);
                                }

                            }
                        }
                    }
                }

                for (Integer size : sheetSizeMap.get("Comment").values()) {
                    if (size < EXCEL_MAX_SIZE) {
                        jumpComment = false;
                    }
                }
                if (!jumpComment) {
                    PaginatedQueryList<Comment> comments = DynamoModel.query(
                            Comment.class, weiboThreads.getThreadId());
                    List<Comment> cs = new ArrayList<Comment>();
                    for (Iterator<Comment> iterator = comments.iterator(); iterator
                            .hasNext(); ) {
                        Comment comment = (Comment) iterator.next();
                        asia.wildfire.common.model.dynamodb.User user = DynamoModel
                                .find(asia.wildfire.common.model.dynamodb.User.class,
                                        comment.getUserId());
                        comment.setUser(user);
                        cs.add(comment);
                        for (Entry<String, BasicDate> entry : module
                                .getTodoBasicCalendarMap().entrySet()) {
                            if (comment.getCreatedAt().longValue() > entry
                                    .getValue().getStartTime()
                                    .getTimeInMillis()
                                    && comment.getCreatedAt().longValue() < entry
                                    .getValue().getEndTime()
                                    .getTimeInMillis()) {
                                HSSFSheet sheet = outMap.get(entry.getKey())
                                        .getSheetAt(2);
                                if (sheet.getLastRowNum() < EXCEL_MAX_SIZE) {
                                    System.out.println("write file for period["
                                            + entry.getKey() + "] tweet["
                                            + weiboThreads.getThreadId()
                                            + "] comment[" + comment.getCommentId()
                                            + "]:" + sheet.getLastRowNum());
                                    HSSFRow row = sheet.createRow(sheet
                                            .getLastRowNum() + 1);
                                    HSSFCell cell00 = row.createCell(0);
                                    cell00.setCellValue("http://weibo.com/"
                                            + user.getUserId());
                                    HSSFCell cell01 = row.createCell(1);
                                    cell01.setCellValue(user.getScreenName());
                                    HSSFCell cell02 = row.createCell(2);
                                    cell02.setCellValue("Comment");
                                    HSSFCell cell03 = row.createCell(3);
                                    cell03.setCellValue(comment.getSentiment());
                                    HSSFCell cell04 = row.createCell(4);
                                    cell04.setCellValue(comment.getText());
                                    HSSFCell cell05 = row.createCell(5);
                                    cell05.setCellValue(DateUtils
                                            .date2ExcelDate(new Date(comment
                                                    .getCreatedAt())));
                                    HSSFCell cell06 = row.createCell(6);
                                    cell06.setCellValue(weiboThreads.getTitle());
                                    HSSFCell cell07 = row.createCell(7);
                                    cell07.setCellValue(user.getLocation());
                                    HSSFCell cell08 = row.createCell(8);
                                    cell08.setCellValue(user.getGender());
                                    sheetSizeMap.get("Comment").put(
                                            entry.getKey(),
                                            sheetSizeMap.get("Comment").get(
                                                    entry.getKey()) + 1);
                                }
                            }
                        }
                        Post.saveWeiboCommentToElasticCache(weiboThreads, cs,
                                module);
                    }
                }
            }

        }
        WeiboMentionDao weiboMentionDao = new WeiboMentionDao();
        List<WeiboMention> wms = weiboMentionDao.queryByCond(new String[]{
                "scope", "created_at"}, new String[]{"=", ">"},
                new Object[]{
                        module.getScope(),
                        module.getTodoBasicCalendarMap().get("90")
                                .getStartTime().getTimeInMillis()});
        for (WeiboMention weiboMention : wms) {
            asia.wildfire.common.model.dynamodb.User user = DynamoModel.find(
                    asia.wildfire.common.model.dynamodb.User.class,
                    weiboMention.getUserId());
            for (Entry<String, BasicDate> entry : module
                    .getTodoBasicCalendarMap().entrySet()) {
                if (weiboMention.getCreatedAt() > entry.getValue()
                        .getStartTime().getTimeInMillis()
                        && weiboMention.getCreatedAt() < entry.getValue()
                        .getEndTime().getTimeInMillis()) {
                    System.out.println("write file for period["
                            + entry.getKey() + "] mention["
                            + weiboMention.getMentionId() + "]");
                    HSSFSheet sheet = outMap.get(entry.getKey()).getSheetAt(3);
                    HSSFRow row = sheet.createRow(sheet.getLastRowNum() + 1);
                    HSSFCell cell00 = row.createCell(0);
                    cell00.setCellValue("http://weibo.com/" + user.getUserId());
                    HSSFCell cell01 = row.createCell(1);
                    cell01.setCellValue(user.getScreenName());
                    HSSFCell cell02 = row.createCell(2);
                    cell02.setCellValue("Mention");
                    HSSFCell cell03 = row.createCell(3);
                    cell03.setCellValue(weiboMention.getSentiment());
                    HSSFCell cell04 = row.createCell(4);
                    cell04.setCellValue(weiboMention.getText());
                    HSSFCell cell05 = row.createCell(5);
                    cell05.setCellValue(DateUtils.date2ExcelDate(new Date(
                            weiboMention.getCreatedAt())));
                    HSSFCell cell06 = row.createCell(6);
                    cell06.setCellValue(user.getLocation());
                    HSSFCell cell07 = row.createCell(7);
                    cell07.setCellValue(user.getGender());
                }
            }
        }
        long endSystemTimeMillion = System.currentTimeMillis();
        try {
            for (Entry<String, HSSFWorkbook> entry : outMap.entrySet()) {
                String fileName = module.getScope()
                        + "_"
                        + entry.getKey()
                        + "_"
                        + DateUtils.date2YMDFormat(DateUtils.getMidNight()
                        .getTime()) + ".xls";
                File finalTarget = new File(dirName + "/" + fileName);
                try {
                    File dir = new File(dirName);
                    if (!dir.exists()) {
                        if (!dir.mkdirs()) {
                            return;
                        }
                    }
                    if (!finalTarget.exists()) {
                        FileOutputStream finalOut = new FileOutputStream(
                                finalTarget);
                        entry.getValue().write(finalOut);
                        finalOut.close();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                String bucket = S3
                        .getBucketPath(S3.ACTSOCIAL_EXPORT_BUCKETNAME);
                S3.clearS3Path(Region.NORTHEAST,bucket, path);
                
                S3.putToS3Path(Region.NORTHEAST, bucket ,path, finalTarget);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void generateExportFile(Module module, String period,
                                    List<Threads> ts) {
        String dirName = TMP_PATH;
        String path = module.getScope()+"_"+period;
        String fileName = module.getScope() + "_" + period + "_"
                + DateUtils.date2YMDFormat(DateUtils.getMidNight().getTime())
                + ".xls";
        File finalTarget = new File(dirName + "/" + fileName);
        try {
            File dir = new File(dirName);
            if (!dir.exists()) {
                if (!dir.mkdirs()) {
                    return;
                }
            }
            if (!finalTarget.exists()) {
                HSSFWorkbook book = new HSSFWorkbook();
                HSSFSheet sheet = book.createSheet("Threads Data");
                HSSFRow headerRow = sheet.createRow(0);
                for (int i = 0, length = THREAD_HEADERS.size(); i < length; i++) {
                    HSSFCell cell = headerRow.createCell(i);
                    cell.setCellValue(THREAD_HEADERS.get(i));
                }
                Class<?> clazz = Class
                        .forName("asia.wildfire.actsocial.model.Threads");
                for (int i = 0, rows = ts.size(); i < rows; i++) {
                    if (i > EXCEL_MAX_SIZE) {
                        break;
                    }
                    Threads t = ts.get(i);
                    HSSFRow row = sheet.createRow(i + 1);
                    for (int j = 0, cols = THREAD_HEADERS.size(); j < cols; j++) {
                        HSSFCell cell = row.createCell(j);
                        Object obj = null;
                        try {
                        	obj = clazz.getDeclaredMethod(
                                    StringUtils.toGetMethodName(THREAD_HEADERS
                                            .get(j))).invoke(t);
						} catch (Exception e) {
							e.printStackTrace();
						}

                        if (obj != null) {
                            cell.setCellValue(obj.toString());
                        }
                    }
                }
                FileOutputStream finalOut = new FileOutputStream(finalTarget);
                book.write(finalOut);
                finalOut.close();
            }
            
            String bucket = S3
                  .getBucketPath(S3.ACTSOCIAL_EXPORT_BUCKETNAME);
            S3.clearS3Path(Region.NORTHEAST,bucket, path);
            
            S3.putToS3Path(Region.NORTHEAST, bucket ,path, finalTarget);
            
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (finalTarget.exists()) {
                finalTarget.delete();
            }
        }
    }

    private void generateTodayExportFile(Module module, String period,
                                         List<TodayThreads> ts) {
        String dirName = TMP_PATH;
        String path = module.getScope()+"_"+period;
        String fileName = module.getScope() + "_" + period + "_"
                + DateUtils.date2YMDFormat(DateUtils.getMidNight().getTime())
                + ".xls";
        File finalTarget = new File(dirName + "/" + fileName);
        try {
            File dir = new File(dirName);
            if (!dir.exists()) {
                if (!dir.mkdirs()) {
                    return;
                }
            }
            if (!finalTarget.exists()) {
                HSSFWorkbook book = new HSSFWorkbook();
                HSSFSheet sheet = book.createSheet("Threads Data");
                HSSFRow headerRow = sheet.createRow(0);
                for (int i = 0, length = THREAD_HEADERS.size(); i < length; i++) {
                    HSSFCell cell = headerRow.createCell(i);
                    cell.setCellValue(THREAD_HEADERS.get(i));
                }
                Class<?> clazz = Class
                        .forName("asia.wildfire.actsocial.model.TodayThreads");
                for (int i = 0, rows = ts.size(); i < rows; i++) {
                    if (i > EXCEL_MAX_SIZE) {
                        break;
                    }
                    TodayThreads t = ts.get(i);
                    HSSFRow row = sheet.createRow(i + 1);
                    for (int j = 0, cols = THREAD_HEADERS.size(); j < cols; j++) {
                        HSSFCell cell = row.createCell(j);
                        Object obj = clazz.getDeclaredMethod(
                                StringUtils.toGetMethodName(THREAD_HEADERS
                                        .get(j))).invoke(t);
                        if (obj != null) {
                            cell.setCellValue(obj.toString());
                        }
                    }
                }
                FileOutputStream finalOut = new FileOutputStream(finalTarget);
                book.write(finalOut);
                finalOut.close();
            }
            String bucket = S3
                    .getBucketPath(S3.ACTSOCIAL_EXPORT_BUCKETNAME);
            S3.clearS3Path(Region.NORTHEAST,bucket, path);
            
            S3.putToS3Path(Region.NORTHEAST, bucket ,path, finalTarget);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (finalTarget.exists()) {
                finalTarget.delete();
            }
        }
    }

    public void generateWeiboModuleThreadExcel(Module module) {
        WeiboThreadDao dao = new WeiboThreadDao();
        Map<String, BasicDate> threadCal = module.getTodoThreadCalendarMap();
        String dirName = TMP_PATH;
        for (Map.Entry<String, BasicDate> entry : threadCal.entrySet()) {
        	String path = module.getScope()+"_"+entry.getKey();
            BasicDate basicDate = entry.getValue();
            String period = entry.getKey();
            String fileName = module.getScope()
                    + "_"
                    + period
                    + "_"
                    + DateUtils.date2YMDFormat(DateUtils.getMidNight()
                    .getTime()) + ".xls";
            File finalTarget = new File(dirName + "/" + fileName);
            // List<WeiboThreads> threadses = dao.queryByCond(new String[]
            // {"scope", "date_time", "date_time"}, new String[] {"=", ">=",
            // "<"}, new Object[] {module.getScope(), new
            // Timestamp(basicDate.getStartTime().getTime().getTime()), new
            // Timestamp(basicDate.getEndTime().getTime().getTime())});
            SqlExpressionGroup e1 = Cnd
                    .exps("scope", "=", module.getScope())
                    .and("date_time",
                            ">=",
                            new Timestamp(basicDate.getStartTime().getTime()
                                    .getTime()))
                    .and("date_time",
                            "<",
                            new Timestamp(basicDate.getEndTime().getTime()
                                    .getTime()));
            Condition c = Cnd.where(e1).groupBy("thread_id");
            List<WeiboThreads> threadses = dao.query(c);

            try {
                File dir = new File(dirName);
                if (!dir.exists()) {
                    if (!dir.mkdirs()) {
                        return;
                    }
                }
                if (!finalTarget.exists()) {
                    HSSFWorkbook book = new HSSFWorkbook();
                    HSSFSheet sheet = book.createSheet("Threads Data");
                    HSSFRow headerRow = sheet.createRow(0);
                    for (int i = 0, length = WEIBO_THREAD_HEADERS.size(); i < length; i++) {
                        HSSFCell cell = headerRow.createCell(i);
                        cell.setCellValue(WEIBO_THREAD_HEADERS.get(i));
                    }
                    Class<?> clazz = Class
                            .forName("asia.wildfire.actsocial.model.WeiboThreads");
                    for (int i = 0, rows = threadses.size(); i < rows; i++) {
                        if (i > EXCEL_MAX_SIZE) {
                            break;
                        }
                        WeiboThreads t = threadses.get(i);
                        HSSFRow row = sheet.createRow(i + 1);
                        for (int j = 0, cols = WEIBO_THREAD_HEADERS.size(); j < cols; j++) {
                            HSSFCell cell = row.createCell(j);
                            Object obj = clazz
                                    .getDeclaredMethod(
                                            StringUtils
                                                    .toGetMethodName(WEIBO_THREAD_HEADERS
                                                            .get(j))).invoke(t);
                            if (obj != null) {
                                cell.setCellValue(obj.toString());
                            }
                        }
                    }
                    FileOutputStream finalOut = new FileOutputStream(
                            finalTarget);
                    book.write(finalOut);
                    finalOut.close();
                    String bucket = S3
                            .getBucketPath(S3.ACTSOCIAL_EXPORT_BUCKETNAME);
                    S3.clearS3Path(Region.NORTHEAST,bucket, path);
                    
                    S3.putToS3Path(Region.NORTHEAST, bucket ,path, finalTarget);
                }
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (finalTarget.exists()) {
                    finalTarget.delete();
                }
            }
        }
    }

    public boolean calAnalytics(Module module, Calendar startCal,
                                Calendar endCal) {
        DailyThreadDao dailyThreadDao = new DailyThreadDao();
        boolean flag = true;
        try {
            AnalyticDao analyticDao = new AnalyticDao();
            String normalSql = "select dt.`scope`, dt.`topic`, dt.`site_id`, dt.`site_name`, dt.`media`, dt.`date`, dt.`title`, dt.`url`, dt.`ymd`, sum(dt.`kol_views`) as kol_views, sum(dt.`brand_views`) as brand_views, sum(dt.`views`) as views, count(dt.`thread_id`) as threads, sum(dt.`posts`) as posts, sum(dt.`positive`) as positive, sum(dt.`negative`) as negative, sum(dt.`neutral`) as neutral, sum(dt.`kol`) as kol, sum(dt.`brand`) as brand from `daily_threads` dt where dt.`scope` in ("+module.getScopeString()+")  and dt.`ymd` = ? and dt.topic != 'ALL' group by dt.`topic`, dt.`media`";
            String mediaAllsql = "select dt.`topic`, dt.`site_id`, dt.`site_name`, dt.`media`, dt.`date`, dt.`title`, dt.`url`, dt.`ymd`, sum(dt.`kol_views`) as kol_views, sum(dt.`brand_views`) as brand_views, sum(dt.`views`) as views, count(dt.`thread_id`) as threads, sum(dt.`posts`) as posts, sum(dt.`positive`) as positive, sum(dt.`negative`) as negative, sum(dt.`neutral`) as neutral, sum(dt.`kol`) as kol, sum(dt.`brand`) as brand from `daily_threads` dt where dt.`scope` in ("+module.getScopeString()+")  and dt.`ymd` = ? and dt.topic != 'ALL' group by dt.`topic`";
            String topicAllsql = "select dt.`topic`, dt.`site_id`, dt.`site_name`, dt.`media`, dt.`date`, dt.`title`, dt.`url`, dt.`ymd`, sum(dt.`kol_views`) as kol_views, sum(dt.`brand_views`) as brand_views, sum(dt.`views`) as views, count(dt.`thread_id`) as threads, sum(dt.`posts`) as posts, sum(dt.`positive`) as positive, sum(dt.`negative`) as negative, sum(dt.`neutral`) as neutral, sum(dt.`kol`) as kol, sum(dt.`brand`) as brand from `daily_threads` dt where dt.`scope` in ("+module.getScopeString()+")  and dt.`ymd` = ? and dt.topic = 'ALL' group by dt.site_id";
            String allSql = "select r_tab.scope, r_tab.topic, r_tab.site_id, r_tab.site_name, r_tab.media, r_tab.date, r_tab.title, r_tab.url, r_tab.repost_to, r_tab.ymd, count(r_tab.`kol_views`) as kol_views, count(r_tab.`brand_views`) as brand_views, count(r_tab.`views`) as views, COUNT(r_tab.thread_id) as threads, sum(r_tab.posts) as posts, sum(r_tab.`positive`) as positive, \n"
                    + "sum(r_tab.`negative`) as negative, sum(r_tab.`neutral`) as neutral, sum(r_tab.`kol`) as kol, sum(r_tab.`brand`) as brand from daily_threads r_tab where r_tab.`scope` in ("+module.getScopeString()+")  and r_tab.`ymd` = ? and r_tab.topic = 'ALL'";
            Map<String, Map<String, Object>> normalMap = dailyThreadDao.queryDailyThreadsForAnalytics(normalSql, module, startCal, endCal, AnalyticsType.NORMAL.value());
            Map<String, Map<String, Object>> mediaALlMap = dailyThreadDao.queryDailyThreadsForAnalytics(mediaAllsql, module, startCal, endCal, AnalyticsType.MEDIA_ALL.value());
            Map<String, Map<String, Object>> topicAllMap = dailyThreadDao.queryDailyThreadsForAnalytics(topicAllsql, module, startCal, endCal, AnalyticsType.TOPIC_ALL.value());
            Map<String, Map<String, Object>> alllMap = dailyThreadDao.queryDailyThreadsForAnalytics(allSql, module, startCal, endCal, AnalyticsType.ALL_ALL.value());
            Map<String, Map<String, Object>> beforeStepMap = Maps.newHashMap();
            beforeStepMap.putAll(normalMap);
            beforeStepMap.putAll(mediaALlMap);
            beforeStepMap.putAll(topicAllMap);
            beforeStepMap.putAll(alllMap);
            List<Analytic> analyticList = Lists.newArrayList();
            if (beforeStepMap.size() > 0) {
                for (Map.Entry<String, Map<String, Object>> entry : beforeStepMap
                        .entrySet()) {
                    Map<String, Object> singleMap = entry.getValue();
                    String topicThis = (String) singleMap.get("topic");
                    if (!isTopicFilter(module,topicThis)) {
                        topicThis = Topic.processSpecialTopic(topicThis);
                        Analytic ana = new Analytic(
                                module.getScope(),
                                topicThis,
                                (String) singleMap.get("site_id"),
                                (Long) singleMap.get("posts"),
                                (Integer) singleMap.get("threads"),
                                (Integer) singleMap.get("day"),
                                (Integer) singleMap.get("month"),
                                (Integer) singleMap.get("year"),
                                (Long) singleMap.get("positive"),
                                (Long) singleMap.get("negative"),
                                (Long)singleMap.get("posts") -  (Long)singleMap.get("positive") - (Long)singleMap.get("negative"),
                                (Double) singleMap.get("sov"), 1D,
                                (String) singleMap.get("media"), new Date(
                                (Long) singleMap.get("date")),
                                new Date(), false);
                        ana.setKol((Long) singleMap.get("kol"));
                        ana.setBrand((Long) singleMap.get("brand"));
                        ana.setTopPosts((String) singleMap.get("top3Post"));
                        ana.setTopPositivePosts((String) singleMap.get("top3PositivePost"));
                        ana.setTopNeutralPosts((String) singleMap.get("top3NeutralPost"));
                        ana.setTopNegativePosts((String) singleMap.get("top3NegativePost"));
                        ana.setVersion(DEFAULT_VERSION);
                        ana.setViews((Long)singleMap.get("views"));
                        if(singleMap.get("brand_views")!=null){
                        	System.out.println(singleMap.get("brand_views"));
                        }
                        ana.setBrandViews((Long)singleMap.get("brand_views"));
                        ana.setKolViews((Long)singleMap.get("kol_views"));
                        analyticList.add(ana);
                    }
                }
            } else {
                Analytic ana = new Analytic(module.getScope(), "all", "all",
                        0L, 0, startCal.get(Calendar.DAY_OF_MONTH),
                        startCal.get(Calendar.MONTH) + 1,
                        startCal.get(Calendar.YEAR), 0L, 0L, 0L, 0D, 1D, "all",
                        new Date(startCal.getTime().getTime()), new Date(),
                        false);
                ana.setTopPosts(null);
                ana.setViews(0L);
                ana.setVersion(DEFAULT_VERSION);
                analyticList.add(ana);
            }
            analyticDao.batchInsert(analyticList);
        } catch (Exception e) {
            flag = false;
            e.printStackTrace();
        }
        return flag;
    }

    public void calDashboard(Module module,Period period) {
    	if(period.isRoutine()){
    		Map<String, BasicDate> threadMap = module.getTodoBasicCalendarMap();
            for (Map.Entry<String, BasicDate> entry : threadMap.entrySet()) {
                calDashboard(module, entry.getKey(), entry.getValue()
                        .getStartTime(), entry.getValue().getEndTime());
            }
    	}else if(period.isCustomized()){
    		calDashboard(module,period.getName(),period.getStart(),period.getEnd());
    	}
        
    }

    public void calDashboard(Module module, String period, Calendar start,
                             Calendar end) {

        Calendar prevStartTime = DateUtils
                .getNDaysAgo(
                        start,
                        (int) ((end.getTimeInMillis() - start.getTimeInMillis()) / (24 * 60 * 60 * 1000)));
        Calendar prevEndTime = DateUtils.getNDaysAgo(start, 0);

        StringBuilder countSql = new StringBuilder(
                "select count(distinct thread_id) as threads, sum(posts) as posts,sum(views) as views, sum(positive) as positive,"
                        + "sum(negative) as negative, sum(neutral) as neutral "
                        + "from daily_threads where scope in (").append(
                module.getScopeString()).append(
                ") and ymd >= @startDate and ymd < @endDate and topic = 'ALL'");
        DashboardDao dashboardDao = new DashboardDao();
        Map<String, Object> currentDashboard = dashboardDao.getDashboard(
                countSql.toString(), start, end);
        Map<String, Object> prevDashboard = dashboardDao.getDashboard(
                countSql.toString(), prevStartTime, prevEndTime);

        DecimalFormat fnum = new DecimalFormat("#############.####");
        String threadsTrend = "INF";
        String postsTrend = "INF";
        String setimentTrend = "INF";
        String viewsTrend = "INF";

        if (!prevDashboard.get("threads").toString().equals("0")) {
            Float threadsTrendF = ((Float.valueOf(currentDashboard.get(
                    "threads").toString()) - Float.valueOf(prevDashboard.get(
                    "threads").toString())) / Float.valueOf(prevDashboard.get(
                    "threads").toString()));
            threadsTrend = fnum.format(threadsTrendF);
        }
        if (!prevDashboard.get("posts").toString().equals("0")) {
            Float postsTrendF = (Float.valueOf(currentDashboard.get("posts")
                    .toString()) - Float.valueOf(prevDashboard.get("posts")
                    .toString()))
                    / Float.valueOf(prevDashboard.get("posts").toString());
            postsTrend = fnum.format(postsTrendF);
        }
        if (!prevDashboard.get("views").toString().equals("0")) {
            Float viewsTrendF = (Float.valueOf(currentDashboard.get("views")
                    .toString()) - Float.valueOf(prevDashboard.get("views")
                    .toString()))
                    / Float.valueOf(prevDashboard.get("views").toString());
            viewsTrend = fnum.format(viewsTrendF);
        }
        Float prev = (Float.valueOf(currentDashboard.get("posts").toString()) * (Float
                .valueOf(prevDashboard.get("positive").toString()) - Float
                .valueOf(prevDashboard.get("negative").toString())));
        if (prev.floatValue() != 0) {
            Float setimentTrendF = (Float.valueOf(currentDashboard.get(
                    "positive").toString()) - Float.valueOf(currentDashboard
                    .get("negative").toString()))
                    * Float.valueOf(prevDashboard.get("posts").toString())
                    / prev;
            setimentTrend = fnum.format(setimentTrendF);
        }
        //disable calculating sov
//        double sov = 0;
//        String sovTrend = "N/A";
//        if (null != module.getParent()) {
//            Module parentModule = module.getParent();
//            String parentSql = "select scope, sum(posts) as posts from daily_threads where scope = @scope and ymd >= @start_ymd and ymd < @end_ymd and topic = 'ALL'";
//            Map<String, Object> parentParams = new HashMap<String, Object>();
//            parentParams.put("scope", parentModule.getScope());
//            parentParams.put("start_ymd", new Timestamp(start.getTime()
//                    .getTime()));
//            parentParams.put("end_ymd", new Timestamp(end.getTime().getTime()));
//            List<Map> currentParentPostsCountList = dashboardDao
//                    .executeQueryWithKeyValue(parentSql, parentParams, "scope",
//                            "posts");
//            Long currentPostsCount = (Long) currentDashboard.get("posts");
//            Long previousPostsCount = (Long) prevDashboard.get("posts");
//            Long currentParentPostCount = 0L;
//            Long previousParentPostsCount = 0L;
//            if (null != currentParentPostsCountList
//                    && currentParentPostsCountList.size() > 0) {
//                if (null == currentParentPostsCountList.get(
//                        currentParentPostsCountList.size() - 1).get(
//                        parentModule.getScope())) {
//                    currentParentPostCount = 0L;
//                } else {
//                    currentParentPostCount = Long
//                            .parseLong(currentParentPostsCountList
//                                    .get(currentParentPostsCountList.size() - 1)
//                                    .get(parentModule.getScope()).toString());
//                }
//            }
//            parentParams.put("start_ymd", new Timestamp(prevStartTime.getTime()
//                    .getTime()));
//            parentParams.put("end_ymd", new Timestamp(prevEndTime.getTime()
//                    .getTime()));
//            List<Map> previousParentThreadsCountList = dashboardDao
//                    .executeQueryWithKeyValue(parentSql, parentParams, "scope",
//                            "posts");
//            if (null != previousParentThreadsCountList
//                    && previousParentThreadsCountList.size() > 0) {
//                if (null == previousParentThreadsCountList.get(
//                        previousParentThreadsCountList.size() - 1).get(
//                        parentModule.getScope())) {
//                    previousParentPostsCount = 0L;
//                } else {
//                    previousParentPostsCount = Long
//                            .parseLong(previousParentThreadsCountList
//                                    .get(previousParentThreadsCountList.size() - 1)
//                                    .get(parentModule.getScope()).toString());
//                }
//            }
//            if (null != currentParentPostCount && currentParentPostCount > 0) {
//                sov = NumberUtils.toDecimal2((double) currentPostsCount
//                        / currentParentPostCount);
//                if (null != previousParentPostsCount
//                        && previousParentPostsCount > 0) {
//                    double previousSov = (double) previousPostsCount
//                            / previousParentPostsCount;
//                    if (previousSov > 0) {
//                        sovTrend = String.valueOf(NumberUtils
//                                .toDecimal2((sov - previousSov) / previousSov));
//                    }
//                }
//            } else {
//                LOGGER.info("module " + module.getScope()
//                        + " parent module has not run daily threads ");
//            }
//        }

        Dashboard dashboard = new Dashboard();
        dashboard.setScope(module.getScope());
        dashboard.setCreatedTime(new Date());
        dashboard.setPeriod(period);
        dashboard.setPositive(Long.valueOf(currentDashboard.get("positive")
                .toString()));
        dashboard.setNegative(Long.valueOf(currentDashboard.get("negative")
                .toString()));
        dashboard.setNeutral(Long.valueOf(currentDashboard.get("neutral")
                .toString()));
        dashboard.setThreads(Integer.valueOf(currentDashboard.get("threads")
                .toString()));
        dashboard.setViews(Long.valueOf(currentDashboard.get("views")
                .toString()));
        dashboard.setPosts(Long.valueOf(currentDashboard.get("posts")
                .toString()));
        dashboard.setThreadsTrend(threadsTrend);
        dashboard.setPostsTrend(postsTrend);
        dashboard.setViewsTrend(viewsTrend);
        dashboard.setSentimentTrend(setimentTrend);
        dashboard.setFiltered(Boolean.FALSE);
//        if ("industry".equals(module.getModuleType())
//                || null == module.getParent()) {
//            dashboard.setSov(null);
//        } else {
//            dashboard.setSov(sov);
//        }
//        dashboard.setSovTrend(sovTrend);
        dashboard.setVersion(DEFAULT_VERSION);
        LOGGER.info("save dashboard(" + dashboard.getScope() + "|"
                + dashboard.getPeriod() + ")");
        dashboardDao.insert(dashboard);
    }
    
    public void clearDailyThreadsSeveralDaysAgo(Module module,long timestamp){
    	DailyThreadDao dao = new DailyThreadDao();
        dao.clearByCond(new String[]{"scope","ymd"},new String[]{"=",">="} , new Object[]{module.getScope(),DateUtils.getNDaysAgo(DateUtils.getMidNight(timestamp),2)});
    }

    public List<Calendar> queryDaysNeedToRun(Module module, long timestamp,Period period){
    	Log.info("start at:"+period.getStart());
    	Log.info("end at:"+period.getEnd());
    	Log.info("interval:"+period.getInterval());
    	List<Calendar> cs = new ArrayList<Calendar>();
    	for(int i = 1;i <= period.getInterval(); i ++){
    		cs.add(DateUtils.getNDaysAgo(period.getEnd(), i));
    	}
    	
    	DailyThreadDao dao = new DailyThreadDao();
    	List<Map> rs = dao.executeQuery("select ymd from daily_threads where scope = '"+module.getScope()+"' group by ymd", null);
    	for (Map map : rs) {
    		for (Iterator<Calendar> iterator = cs.iterator(); iterator.hasNext();) {
    			Calendar c = iterator.next();
    			if(c.getTimeInMillis() == DateUtils.getMidNight(((Date)map.get("ymd")).getTime()).getTimeInMillis()){
    				iterator.remove();
    			}
    		}
		}
    	return cs;
    }
    
    public Calendar queryMaxDailyThreadDate(Module module, long timestamp) {
        DailyThreadDao dao = new DailyThreadDao();
        List<DailyThread> ths = dao.queryBySql(new StringBuilder("scope = '")
                .append(module.getScope())
                .append("' order by ymd desc limit 1").toString());
        Calendar date = null;
        if (!ths.isEmpty()) {
            DailyThread dt = ths.get(0);
            date = DateUtils.timestamp2Calendar(dt.getYmd().getTime());
        }
        return date;
    }

    public List<DailyThread> fetchDailyThread(ThreadDaysInfo threadDaysInfo) {
        List<DailyThread> dts = new ArrayList<DailyThread>();
        List<String> topics = threadDaysInfo.getTagsList();
        if (null == topics) {
            topics = new ArrayList<String>();
        }
        asia.wildfire.common.model.Topic t = new asia.wildfire.common.model.Topic();
        String threadId = threadDaysInfo.getTopicId();
        t.loadByIdAndShardSalt(threadId, threadDaysInfo.getTopic_uri_ss(), 3);
        topics.add("ALL");
        String scope = threadDaysInfo.getScope();
        Integer siteId = threadDaysInfo.getShort_site_id();
        String siteName = "";
        String media = "";
        Site site = Site.getSiteMap().get(siteId);
        if (site != null) {
            siteName = site.getSiteName();
            media = site.getSiteType();
        }
        Map<String, Long> postDistributionByTopicAndThread = threadDaysInfo
                .getTagsValue();
        Long positive = postDistributionByTopicAndThread.get(Sentiment.POSITIVE
                .value());
        if (positive == null) {
            positive = 0L;
        }
        Long negative = postDistributionByTopicAndThread.get(Sentiment.NEGATIVE
                .value());
        Long kol = postDistributionByTopicAndThread.get("kol@"+scope);
        Long brand = postDistributionByTopicAndThread.get("brand@"+scope);
        if (kol == null) {
        	kol = 0L;
        }
        if (brand == null) {
        	brand = 0L;
        }
        if (negative == null) {
            negative = 0L;
        }
        Long neutral = threadDaysInfo.getPostsCount() - positive - negative;
        if (neutral.compareTo(0L) < 0) {
            neutral = 0L;
        }
        if (null != t && null != t.getId()) {
            for (String topicStr : topics) {
                String url = null;
                String title = null;
                Date date = null;
                Long comments = null;
                Long reposts = null;
                String repostTo = "";
                url = t.getUri();
                title = t.getTitle();
                date = t.getDate();
                comments = (t.getReplyCount() == null || "".equals(t
                        .getReplyCount().trim())) ? null : Long.valueOf(t
                        .getReplyCount());
                reposts = (t.getRepostCount() == null || "".equals(t
                        .getRepostCount().trim())) ? null : Long.valueOf(t
                        .getRepostCount());
                repostTo = (t.getRepostTo() == null || "".equals(t
                        .getRepostTo().trim())) ? null : t.getRepostTo();
                DailyThread dt = new DailyThread();
                dt.setComments(comments);
                dt.setDate(date);
                dt.setMedia(media);
                dt.setNegative(negative);
                dt.setNeutral(neutral);
                dt.setPositive(positive);
                dt.setKol(kol);
                dt.setBrand(brand);
                dt.setPosts(Long.valueOf(threadDaysInfo.getPostsCount()));
                dt.setReposts(reposts);
                dt.setRepostTo(repostTo);
                dt.setScope(scope);
                dt.setSiteId(siteId);
                dt.setSiteName(siteName);
                dt.setThreadId(threadId);
                dt.setTitle(title);
                dt.setTopic(topicStr);
                dt.setUrl(url);
                dt.setViews((t.getViewCount() == null || "".equals(t.getViewCount().trim())) ? null : Long.valueOf(t.getViewCount()));
                if(kol.longValue() > 0){
                	dt.setKolViews(dt.getViews());
                }else{
                	dt.setKolViews(0L);
                }
                if(brand.longValue() > 0){
                	dt.setBrandViews(dt.getViews());
                }else{
                	dt.setBrandViews(0L);
                }
                dt.setLatitude(t.getLatitude());
                dt.setLongitude(t.getLongitude());

                dts.add(dt);
                if ("ALL".equals(topicStr)) {
                    cachePosts(dt);
                }
            }
        }
        return dts;
    }

    public void cachePosts(DailyThread thread) {
    	
        try {
            if (thread == null) {
            	LOGGER.info("empty for cache posts");
                return;
            }
            LOGGER.info("cache for thread : " + thread.getThreadId());
            asia.wildfire.common.model.Post p = new asia.wildfire.common.model.Post();
            List<asia.wildfire.common.model.Post> posts = (List<asia.wildfire.common.model.Post>) p
                    .batchLoadIdAndShardSalt(thread.getThreadId(), "topic_id",
                            thread.getThreadId());
            if (posts == null) {
                return;
            }
            HashMap<String, Object> result = new HashMap<String, Object>();

            result.put("id", thread.getThreadId());
            if (thread.getDate() != null) {
            	LOGGER.info("cache for thread at " + thread.getDate());
                result.put("date",thread.getDate().toString());
            }
            result.put("url", thread.getUrl());
            HashMap<String, Object> site = new HashMap<String, Object>();
            site.put("id", thread.getSiteId());
            site.put("name", thread.getSiteName());
            result.put("site", site);
            result.put("media", thread.getMedia());
            result.put("title", thread.getTitle());
            // TODO: need to estimate views
            result.put("views", 0);
            HashMap<String, Long> sentiment = new HashMap<String, Long>();
            sentiment.put("positive", thread.getPositive());
            sentiment.put("negative", thread.getNegative());
            sentiment.put("neutral", thread.getNeutral());
            result.put("sentiment", sentiment);
            List<Object> postsInThread = new ArrayList<Object>();
            int postsNum = posts.size();
            result.put("posts_num", postsNum);

            result.put("comments_num", thread.getComments());
            result.put("reposts_num", thread.getReposts());
            result.put("repost_to", thread.getRepostTo());
            result.put("topics", thread.getTopic());
            if (posts.isEmpty()) {
                result.put("posts", postsInThread);
                ElasticCache.doCache(thread.getThreadId(), JsonParser.map2Json(result), CacheName.POST);
//                client.set(thread.getThreadId(),
//                        60 * 60 * 24 * ElasticCache.EXPIRE_DAY,
//                        GzipCompressor.compress(JsonParser.map2Json(result)));
            } else {
                Set<String> ids = new HashSet<String>();
                for (int i = 0, position = 0, length = posts.size(); i < length; i++) {
                    int page = position / 100;
                    asia.wildfire.common.model.Post post = posts.get(i);
                    if (!ids.contains(post.getId())) {
                        HashMap<String, Object> singlePost = new HashMap<String, Object>();
                        List<String> predictTags = post.getPredictTags();
                        if (null == predictTags) {
                            predictTags = Lists.newArrayList();
                        }
                        List<String> positiveTags = post.getPositiveTags();
                        if (null == positiveTags) {
                            positiveTags = Lists.newArrayList();
                        }
                        List<String> negativeTags = post.getNegativeTags();
                        if (null == negativeTags) {
                            negativeTags = Lists.newArrayList();
                        }
                        List<String> topicsList = Lists.newArrayList();
                        topicsList.addAll(predictTags);
                        topicsList.addAll(positiveTags);
                        topicsList.removeAll(negativeTags);
                        singlePost.put("id", post.getId());
                        singlePost.put("body", post.getBody());
                        singlePost.put("date", post.getDate());
                        singlePost.put("page", page);
                        singlePost.put("title", post.getTitle());
                        singlePost.put("complete", true);
                        singlePost.put("position", position % 100);
                        singlePost.put("url", post.getUri());
                        singlePost.put("sentiment", post.getSentiment());
                        singlePost.put("images", post.getBodyImages());
                        singlePost.put("relevant", post.getRelevantTag());
                        singlePost.put("topics", topicsList);
                        User user = post.getUser();
                        HashMap<String, String> creator = new HashMap<String, String>();
                        creator.put("id", post.getUserId());
                        if (user != null) {
                            creator.put("username", user.getUserName());
                            creator.put("avatar", user.getprofilImgPath());
                        } else {
                            creator.put("username", "PUBLIC");
                            creator.put("avatar", null);
                        }

                        singlePost.put("creator", creator);
                        postsInThread.add(singlePost);
                        position++;
                        ids.add(post.getId());
                    }
                    if (position % 100 == 0 || i == length - 1) {
                        if (page > 0) {
                            result.put("posts", postsInThread);
                            ElasticCache.doCache(thread.getThreadId() + "_" + page, JsonParser.map2Json(result), CacheName.POST);
//                            client.set(thread.getThreadId() + "_" + page,
//                                    60 * 60 * 24 * ElasticCache.EXPIRE_DAY,
//                                    GzipCompressor.compress(JsonParser
//                                            .map2Json(result)));
                        } else {
                            result.put("posts", postsInThread);
                            ElasticCache.doCache(thread.getThreadId(), JsonParser.map2Json(result), CacheName.POST);
//                            client.set(thread.getThreadId(),
//                                    60 * 60 * 24 * ElasticCache.EXPIRE_DAY,
//                                    GzipCompressor.compress(JsonParser
//                                            .map2Json(result)));
                        }
                        postsInThread.clear();
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void cachePosts(HourlyThread thread) {
        try {
            if (thread == null) {
                return;
            }
            asia.wildfire.common.model.Post p = new asia.wildfire.common.model.Post();
            List<asia.wildfire.common.model.Post> posts = (List<asia.wildfire.common.model.Post>) p
                    .batchLoadIdAndShardSalt(thread.getThreadId(), "topic_id",
                            thread.getThreadId());
            if (posts == null) {
                return;
            }
            HashMap<String, Object> result = new HashMap<String, Object>();

            result.put("id", thread.getThreadId());
            if (thread.getDate() != null) {
                result.put("date",thread.getDate().toString());
            }
            result.put("url", thread.getUrl());
            HashMap<String, Object> site = new HashMap<String, Object>();
            site.put("id", thread.getSiteId());
            site.put("name", thread.getSiteName());
            result.put("site", site);
            result.put("media", thread.getMedia());
            result.put("title", thread.getTitle());
            // TODO: need to estimate views
            result.put("views", 0);
            HashMap<String, Long> sentiment = new HashMap<String, Long>();
            sentiment.put("positive", thread.getPositive());
            sentiment.put("negative", thread.getNegative());
            sentiment.put("neutral", thread.getNeutral());
            result.put("sentiment", sentiment);
            List<Object> postsInThread = new ArrayList<Object>();
            int postsNum = posts.size();
            result.put("posts_num", postsNum);

            result.put("comments_num", thread.getComments());
            result.put("reposts_num", thread.getReposts());
            result.put("repost_to", thread.getRepostTo());
            if (posts.isEmpty()) {
                result.put("posts", postsInThread);
                ElasticCache.doCache(thread.getThreadId(), JsonParser.map2Json(result), CacheName.POST);
//                client.set(thread.getThreadId(),
//                        60 * 60 * 24 * ElasticCache.EXPIRE_DAY,
//                        GzipCompressor.compress(JsonParser.map2Json(result)));
            } else {
                Set<String> ids = new HashSet<String>();
                for (int i = 0, position = 0, length = posts.size(); i < length; i++) {
                    int page = position / 100;
                    asia.wildfire.common.model.Post post = posts.get(i);
                    if (!ids.contains(post.getId())) {
                        HashMap<String, Object> singlePost = new HashMap<String, Object>();
                        singlePost.put("id", post.getId());
                        singlePost.put("body", post.getBody());
                        singlePost.put("date", post.getDate());
                        singlePost.put("page", page);
                        singlePost.put("title", post.getTitle());
                        singlePost.put("complete", true);
                        singlePost.put("position", position % 100);
                        singlePost.put("url", post.getUri());
                        singlePost.put("sentiment", post.getSentiment());
                        singlePost.put("images", post.getBodyImages());
                        singlePost.put("relevant", post.getRelevantTag());
                        User user = post.getUser();
                        HashMap<String, String> creator = new HashMap<String, String>();
                        creator.put("id", post.getUserId());
                        if (user != null) {
                            creator.put("username", user.getUserName());
                            creator.put("avatar", user.getprofilImgPath());
                        } else {
                            creator.put("username", "PUBLIC");
                            creator.put("avatar", null);
                        }

                        singlePost.put("creator", creator);
                        postsInThread.add(singlePost);
                        position++;
                        ids.add(post.getId());
                    }
                    if (position % 100 == 0 || i == length - 1) {
                        if (page > 0) {
                            result.put("posts", postsInThread);
                            ElasticCache.doCache(thread.getThreadId() + "_" + page, JsonParser.map2Json(result), CacheName.POST);
//                            client.set(thread.getThreadId() + "_" + page,
//                                    60 * 60 * 24 * ElasticCache.EXPIRE_DAY,
//                                    GzipCompressor.compress(JsonParser
//                                            .map2Json(result)));
                        } else {
                            result.put("posts", postsInThread);
                            ElasticCache.doCache(thread.getThreadId(), JsonParser.map2Json(result), CacheName.POST);
//                            client.set(thread.getThreadId(),
//                                    60 * 60 * 24 * ElasticCache.EXPIRE_DAY,
//                                    GzipCompressor.compress(JsonParser
//                                            .map2Json(result)));
                        }
                        postsInThread.clear();
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 修改普通brand module 相应数据
     *
     * @param module
     */
    public void updateWeiboDataVersion(Module module) {
        String scope = module.getScope();
        WeiboDashboardDao weiboDashboardDao = new WeiboDashboardDao();
        weiboDashboardDao
                .execute("update weibo_dashboards set version = version + 1 where scope = '"
                        + scope + "' order by version desc;");
        weiboDashboardDao.clearByCond(new String[]{"scope", "version"},
                new String[]{"=", ">"}, new Object[]{scope, MAX_VERSION});
        WeiboAnalyticDao weiboAnalyticDao = new WeiboAnalyticDao();
        weiboAnalyticDao
                .execute("update weibo_analytics set version = version + 1 where scope = '"
                        + scope + "' order by version desc;");
        weiboAnalyticDao.clearByCond(new String[]{"scope", "version"},
                new String[]{"=", ">"}, new Object[]{scope, MAX_VERSION});
        WeiboThreadDao weiboThreadDao = new WeiboThreadDao();
        weiboThreadDao
                .execute("update weibo_threads set version = version + 1 where scope = '"
                        + scope + "' order by version desc;");
        weiboThreadDao.clearByCond(new String[]{"scope", "version"},
                new String[]{"=", ">"}, new Object[]{scope, MAX_VERSION});
        WeiboTopicDao weiboTopicDao = new WeiboTopicDao();
        weiboTopicDao
                .execute("update weibo_topics set version = version + 1 where scope = '"
                        + scope + "' order by version desc;");
        weiboTopicDao.clearByCond(new String[]{"scope", "version"},
                new String[]{"=", ">"}, new Object[]{scope, MAX_VERSION});
        WeiboDemographicsDao weiboDemographicsDao = new WeiboDemographicsDao();
        weiboDemographicsDao
                .execute("update weibo_demographics set version = version + 1 where scope = '"
                        + scope + "' order by version desc;");
        ModuleDao moduleDao = new ModuleDao();
        moduleDao.updateByCond(new String[]{"status", "updated_time",
                "error_date", "error_log"}, new Object[]{
                Module.Status.FINISH.value(), DateUtils.getMidNight(), null,
                null}, new String[]{"scope"}, new String[]{"="},
                new Object[]{module.getScope()});
    }

    /**
     * 修改weibo module 相应数据
     * 
     * by lzh,不做update version操作以减少数据库IO.保存module_period_version,取api时根据version字段查询
     *
     * @param module
     */
    public void updateDataVersion(Module module,Period period) {
    	if(period.isRoutine()){
    		try {
                String scope = module.getScope();
                
                DashboardDao dashboardDao = new DashboardDao();
                dashboardDao.clearByCond(new String[]{"scope", "version"}, new String[]{"=", ">"}, new Object[]{scope, MAX_VERSION});
                for (String p : Module.TORUN_DAYS) {
                	String dashboardSql = "update dashboards set version = version + 1 where scope = '" + scope + "'  and period = '"+p+"' order by version desc;";
                	dashboardDao.execute(dashboardSql);
                }
                AnalyticDao analyticDao = new AnalyticDao();
                analyticDao.clearByCond(new String[]{"scope", "version"}, new String[]{"=", ">"}, new Object[]{scope, MAX_VERSION});
                String analyticsSql = "update analytics set version = version + 1 where scope = '" + scope + "' and date >= " + DateUtils.date2MysqlFormat(period.getStart().getTime()) + " order by version desc;";
                analyticDao.execute(analyticsSql);
                ThreadDao threadDao = new ThreadDao();
                threadDao.clearByCond(new String[]{"scope", "version"}, new String[]{"=", ">"}, new Object[]{scope, MAX_VERSION});
                for (String p : Module.TORUN_DAYS) {
                	String threadsql = "update threads set version = version + 1 where scope = '" + scope + "' and period = '"+p+"' order by version desc;";
                    threadDao.execute(threadsql);
    			}
                
                TopicDao topicDao = new TopicDao();
                topicDao.clearByCond(new String[]{"scope", "version"}, new String[]{"=", ">"}, new Object[]{scope, MAX_VERSION});
                for (String p : Module.TORUN_DAYS) {
    	            String topicSql = "update topics set version = version + 1 where scope = '" + scope + "'  and period = '"+p+"' order by version desc;";
    	            topicDao.execute(topicSql);
                }
                
                if(module.isIndustry()){
                	ModuleIndustrySovDao misDao = new ModuleIndustrySovDao();
                	misDao.clearByCond(new String[]{"industry_scope", "version"}, new String[]{"=", ">"}, new Object[]{scope, MAX_VERSION});
                	misDao.execute("update module_industry_sov set version = version + 1 where industry_scope = '" + scope + "' order by version desc;");
                }
                
                ModuleDao moduleDao = new ModuleDao();
                moduleDao.updateByCond(new String[]{"status", "updated_time", "error_date", "error_log"},
                                new Object[]{ Module.Status.FINISH.value(), DateUtils.timestamp2GMT8Calendar(System.currentTimeMillis()), null, null}, new String[]{"scope"},
                                new String[]{"="}, new Object[]{module.getScope()});
            } catch (Exception e) {
                e.printStackTrace();
            }
    	}else if(period.isCustomized()){
    		try {
                String scope = module.getScope();
                DashboardDao dashboardDao = new DashboardDao();
                dashboardDao.clearByCond(new String[]{"scope","period", "version"},
                        new String[]{"=","=", ">"}, new Object[]{scope,period.getName(),
                        MAX_VERSION});
            	String dashboardSql = "update dashboards set version = version + 1 where scope = '"
                        + scope + "'  and period = '"+period.getName()+"' order by version desc;";
            	dashboardDao.execute(dashboardSql);
                ThreadDao threadDao = new ThreadDao();
                threadDao.clearByCond(new String[]{"scope","period", "version"},
                        new String[]{"=","=", ">"}, new Object[]{scope,period.getName(),
                        MAX_VERSION});
            	String threadsql = "update threads set version = version + 1 where scope = '"
                        + scope + "' and period = '"+period.getName()+"' order by version desc;";
                threadDao.execute(threadsql);
                
                TopicDao topicDao = new TopicDao();
                topicDao.clearByCond(new String[]{"scope","period", "version"},
                        new String[]{"=","=", ">"}, new Object[]{scope,period.getName(),
                        MAX_VERSION});
	            String topicSql = "update topics set version = version + 1 where scope = '"
	                    + scope + "'  and period = '"+period.getName()+"' order by version desc;";
	            topicDao.execute(topicSql);
	            
	            AnalyticDao analyticDao = new AnalyticDao();
                analyticDao.clearByCond(new String[]{"scope", "version"},
                        new String[]{"=", ">"}, new Object[]{scope,
                        MAX_VERSION});
                analyticDao.execute("update analytics set version = version + 1 where scope = '"
                        + scope + "'  and date >='"+DateUtils.date2MysqlFormat(period.getStart().getTime())+"'  and date <='"+DateUtils.date2MysqlFormat(period.getEnd().getTime())+"' order by version desc;");
            } catch (Exception e) {
                e.printStackTrace();
            }
    	}
        
    }

    public void handleModuleError(Module module, Period period, String msg) {
        try {
            // TODO MOVE ERROR DATA TO SOMEWHERE
            ModuleDao moduleDao = new ModuleDao();
            if (msg == null) {
                msg = "";
            }
            String log = new String(msg);
            if (log.length() > 200) {
                log = log.substring(0, 200);
            }

            String dirName = TMP_PATH;
            String path = module.getScope();
            String fileName = module.getScope() + "_error_"
                    + System.currentTimeMillis() + ".log";
            File finalTarget = new File(dirName + "/" + fileName);

            try {
                try (Writer write = new FileWriter(finalTarget)) {
                    write.append(msg);
                    write.flush();
                }
                log = "https://s3-ap-northeast-1.amazonaws.com/"
                        + S3
                        .getBucketPath(S3.ACTSOCIAL_LOG_BUCKETNAME) + "/" + path + "/"
                        + finalTarget.getName();
                
                
                String bucket = S3
                        .getBucketPath(S3.ACTSOCIAL_LOG_BUCKETNAME);
                S3.clearS3Path(Region.NORTHEAST,bucket, path);
                
                S3.putToS3Path(Region.NORTHEAST, bucket ,path, finalTarget);
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (finalTarget.exists()) {
                    finalTarget.delete();
                }
            }
            moduleDao.updateByCond(new String[]{"status", "updated_time",
                    "error_date", "error_log"}, new Object[]{
                    Module.Status.ERROR.value(), Calendar.getInstance(),
                    Calendar.getInstance().getTime(), log},
                    new String[]{"scope"}, new String[]{"="},
                    new Object[]{module.getScope()});
            if(module.isCustomModule()){
            	TaskDao td = new TaskDao();
            	td.updateByCond(new String[]{"status","updated_at"}, new Object[]{2,Calendar.getInstance()},new String[]{"scope","period"}, new String[]{"=","="}, new Object[]{module.getScope(),period.getName()});
            }
            String[] mailTo = new String[]{"liuzhehui@xingxinghuo.com"};
            ActsocialMailSender.sendMonitorEmail(msg, mailTo);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void handleModuleError(Module module, Period period, Exception e) {
        String wordBreak = System.getProperty("line.separator") + "\r\n";
        StringBuffer sb = new StringBuffer("exception occur for ")
                .append(module).append(" at ")
                .append(System.currentTimeMillis()).append(wordBreak).append(wordBreak).append(wordBreak);
        if(e.getCause()!=null){
        	sb.append(e.getCause().getMessage()).append(wordBreak).append(wordBreak).append(wordBreak);
        }
        sb.append(e.getMessage()).append(wordBreak).append(wordBreak).append(wordBreak);
        for (StackTraceElement trace : e.getStackTrace()) {
            sb.append(trace.toString()).append(wordBreak);
        }
        if (e.getCause() != null) {
            for (StackTraceElement trace : e.getCause().getStackTrace()) {
                sb.append(trace.toString()).append(wordBreak).append(wordBreak).append(wordBreak);
            }
            if (null != e.getCause().getCause()) {
                sb.append("CAUSED BY : ").append(e.getCause().getCause()).append(wordBreak).append(wordBreak);
            }
        }
        this.handleModuleError(module, period, sb.toString());
    }

    public void clearErrorData(Module module, Period period) {
        String scope = module.getScope();
        String moduleType = module.getModuleType();
        if (moduleType.equals(BRAND_MODULE_TYPE)
                || moduleType.equals(INDUSTRY_MODULE_TYPE)) {
        	if(period.isRoutine()){
        		DashboardDao dashboardDao = new DashboardDao();
                dashboardDao.clearByCond(new String[]{"scope", "version"},
                        new String[]{"=", "="}, new Object[]{scope,
                        DEFAULT_VERSION});
                AnalyticDao analyticDao = new AnalyticDao();
                analyticDao.clearByCond(new String[]{"scope", "version"},
                        new String[]{"=", "="}, new Object[]{scope,
                        DEFAULT_VERSION});
                ThreadDao threadDao = new ThreadDao();
                threadDao.clearByCond(new String[]{"scope", "version"},
                        new String[]{"=", "="}, new Object[]{scope,
                        DEFAULT_VERSION});
                TopicDao topicDao = new TopicDao();
                topicDao.clearByCond(new String[]{"scope", "version"},
                        new String[]{"=", "="}, new Object[]{scope,
                        DEFAULT_VERSION});
        	}else if(period.isRoutine()){
        		DashboardDao dashboardDao = new DashboardDao();
                dashboardDao.clearByCond(new String[]{"scope", "version", "period"},
                        new String[]{"=", "=", "="}, new Object[]{scope,
                        DEFAULT_VERSION, period.getName()});
                ThreadDao threadDao = new ThreadDao();
                threadDao.clearByCond(new String[]{"scope", "version", "period"},
                        new String[]{"=", "=", "="}, new Object[]{scope,
                        DEFAULT_VERSION, period.getName()});
                TopicDao topicDao = new TopicDao();
                topicDao.clearByCond(new String[]{"scope", "version", "period"},
                        new String[]{"=", "=", "="}, new Object[]{scope,
                        DEFAULT_VERSION, period.getName()});
        	}
            
        } else if (moduleType.equals(WEIBO_MODULE_TYPE)) {
        	if(period.isRoutine()){
        		WeiboDashboardDao weiboDashboardDao = new WeiboDashboardDao();
                weiboDashboardDao.clearByCond(new String[]{"scope", "version"},
                        new String[]{"=", "="}, new Object[]{scope,
                        DEFAULT_VERSION});
                WeiboAnalyticDao weiboAnalyticDao = new WeiboAnalyticDao();
                weiboAnalyticDao.clearByCond(new String[]{"scope", "version"},
                        new String[]{"=", "="}, new Object[]{scope,
                        DEFAULT_VERSION});
                WeiboThreadDao weiboThreadDao = new WeiboThreadDao();
                weiboThreadDao.clearByCond(new String[]{"scope", "version"},
                        new String[]{"=", "="}, new Object[]{scope,
                        DEFAULT_VERSION});
                WeiboTopicDao weiboTopicDao = new WeiboTopicDao();
                weiboTopicDao.clearByCond(new String[]{"scope", "version"},
                        new String[]{"=", "="}, new Object[]{scope,
                        DEFAULT_VERSION});
        	}else if(period.isCustomized()){
        		WeiboDashboardDao weiboDashboardDao = new WeiboDashboardDao();
                weiboDashboardDao.clearByCond(new String[]{"scope", "version", "period"},
                        new String[]{"=", "=", "="}, new Object[]{scope,
                        DEFAULT_VERSION, period.getName()});
                WeiboThreadDao weiboThreadDao = new WeiboThreadDao();
                weiboThreadDao.clearByCond(new String[]{"scope", "version", "period"},
                        new String[]{"=", "=", "="}, new Object[]{scope,
                        DEFAULT_VERSION, period.getName()});
                WeiboTopicDao weiboTopicDao = new WeiboTopicDao();
                weiboTopicDao.clearByCond(new String[]{"scope", "version", "period"},
                        new String[]{"=", "=", "="}, new Object[]{scope,
                        DEFAULT_VERSION, period.getName()});
        	}
            
        } else if (moduleType.equals(FACEBOOK_MODULE_TYPE)) {
            // TODO facebook
        }
    }

    public void clearErrorDailyThread(Module module, Calendar startCal,
                                      Calendar endCal) {
        DailyThreadDao dailyThreadDao = new DailyThreadDao();
        String ymd = DateUtils.date2MysqlFormat(startCal);
        dailyThreadDao.clearByCond(new String[]{"scope", "ymd"},
                new String[]{"=", "="}, new Object[]{module.getScope(),
                ymd});
    }

    public void addBuzz(Module module, Period period) {
        try {
            if (module == null) { return; }
            List<BuzzAnalytic> bas = null;
            BuzzAnalyticDao buzzAnalyticDao = new BuzzAnalyticDao();
//            if (module.isIndustry()) {
//                ModuleDao moduleDao = new ModuleDao();
//                List<Module> onlyNumModuleInIndustry = moduleDao.queryByCond(new String[]{"parent", "onlynum"}, new String[]{"=", "="}, new Object[]{module.getScope(), true});
//                List<String> onlyNumScopesInIndustry = new ArrayList<String>();
//                for (Module m : onlyNumModuleInIndustry) {
//                    onlyNumScopesInIndustry.add(m.getScope());
//                }
//                if (onlyNumScopesInIndustry.size() == 0) {
//                    String scopesIn = "''";
//                    bas = buzzAnalyticDao.queryByCond(new String[]{"scope", "date","date"}, new String[]{"in", "<",">="}, new Object[]{scopesIn, period.getEnd(),period.getStart()});
//                } else {
//                    bas = buzzAnalyticDao.queryByCond(new String[]{"scope", "date","date"}, new String[]{"in", "<",">="}, new Object[]{onlyNumScopesInIndustry, period.getEnd(),period.getStart()});
//                }
//            } else {
                bas = buzzAnalyticDao.queryByCond(new String[]{"scope", "date","date"}, new String[]{"=", "<",">="}, new Object[]{module.getScope(), period.getEnd(),period.getStart()});
//            }
            Map<String, ThreadsAndPosts> threadsAndPostsOfIndustry = createThreadsAndPostsOfModule(module, bas);
            
            DashboardDao dashboardDao = new DashboardDao();
            AnalyticDao analyticDao = new AnalyticDao();
            
            

            // add analytic buzz start
            
            List<Analytic> asWeibo = analyticDao.queryByCond(new String[]{"scope", "topic", "site_id", "version"}, new String[]{"=", "=", "=", "="}, new Object[]{module.getScope(), "all", "42", DEFAULT_VERSION});
            List<Analytic> asWeiboTopicNotAll = analyticDao.queryByCond(new String[]{"scope", "topic", "site_id", "version"}, new String[]{"=", "!=", "=", "="}, new Object[]{module.getScope(), "all", "42", DEFAULT_VERSION});
            List<Analytic> asNotWeibo = analyticDao.queryByCond(new String[]{"scope", "site_id", "version"}, new String[]{"=", "!=", "="}, new Object[]{module.getScope(), "42", DEFAULT_VERSION});
            if ((module.isIndustry() && (bas.size() > 0)) || (module.getBuzzKeyword() != null && !"".equals(module.getBuzzKeyword()) && module.isOnlynum())) {
                List<Analytic> acs = new ArrayList<Analytic>();

                Map<Long, BuzzAnalytic> sumBuzz = new HashMap<Long, BuzzAnalytic>();
                for (BuzzAnalytic ba : bas) {
                    if (sumBuzz.get(Long.valueOf(ba.getDate().getTime())) == null) {
                        sumBuzz.put(ba.getDate().getTime(), ba);
                    } else {
                        BuzzAnalytic baa = sumBuzz.get(Long.valueOf(ba.getDate().getTime()));
                        baa.setThreads((baa.getThreads() == null ? 0 : baa.getThreads()) + (ba.getThreads() == null ? 0 : ba.getThreads()));
                        baa.setPosts((baa.getPosts() == null ? 0 : baa.getPosts()) + (ba.getPosts() == null ? 0 : ba.getPosts()));
                    }
                }
                for (BuzzAnalytic ba : sumBuzz.values()) {
                    Analytic a = new Analytic();
                    boolean exist = false;
                    long sentimentBuzz = ba.getPosts() == null ? 0 : ba.getPosts();
                    for (Analytic al : asWeibo) {
                        if (al.getDate().getTime() == ba.getDate().getTime()) {
                            exist = true;
                            Integer threads = al.getThreads();
                            Long posts = al.getPosts();
                            Long positive = al.getPositive();
                            Long negative = al.getNegative();

                            double positivePer = 0;
                            double negativePer = 0;
                            if (posts != 0) {
                                positivePer = positive / (double) posts;
                                negativePer = negative / (double) posts;
                            }
                            a = al;
                            a.setIncludeBuzz(true);
                            a.setVersion(DEFAULT_VERSION);
                            a.setThreads(threads > ba.getThreads() ? threads : ba.getThreads());
                            a.setPosts(sentimentBuzz > al.getPosts() ? sentimentBuzz : al.getPosts());
//                            a.setPosts(posts + sentimentBuzz);
                            
                            a.setPositive(Math.round(a.getPosts() * positivePer));
                            a.setNegative(Math.round(a.getPosts() * negativePer));
                            a.setNeutral(a.getPosts() - a.getPositive() - a.getNegative());
                            break;
                        }
                    }
                    if (!exist) {
                        a = new Analytic(module.getScope(), "all", "42", sentimentBuzz, ba.getThreads(), ba.getDay(), ba.getMonth(), ba.getYear(), 0L, 0L, sentimentBuzz, 0D, 1D, "weibo", ba.getDate(), new Date(), false);
                        a.setIncludeBuzz(true);
                        a.setVersion(DEFAULT_VERSION);
                    }
                    acs.add(a);
                }
                for (Analytic ana : asNotWeibo) {
                    ana.setIncludeBuzz(true);
                    acs.add(ana);
                }
                for (Analytic ana : asWeiboTopicNotAll) {
                    ana.setIncludeBuzz(true);
                    acs.add(ana);
                }
                analyticDao.batchInsert(acs);
            } else {
                for (Analytic analytic : asWeibo) {
                    analytic.setIncludeBuzz(true);
                }
                for (Analytic ana : asNotWeibo) {
                    ana.setIncludeBuzz(true);
                }
                for (Analytic ana : asWeiboTopicNotAll) {
                    ana.setIncludeBuzz(true);
                }
                analyticDao.batchInsert(asWeibo);
                analyticDao.batchInsert(asNotWeibo);
                analyticDao.batchInsert(asWeiboTopicNotAll);
            }
            
            // add analytic buzz end

            // add dashboard buzz start
            if(period.isRoutine()){
            	List<Dashboard> ds = dashboardDao.queryByCond(new String[]{"scope", "version", "include_buzz"}, new String[]{"=", "=", "="}, new Object[]{module.getScope(), DEFAULT_VERSION, false});
                for (Dashboard d : ds) {
                    d.setId(null);
                    d.setIncludeBuzz(true);
                	if (module.isIndustry() || (module.getBuzzKeyword() != null && !"".equals(module.getBuzzKeyword()) && module.isOnlynum())) {
                        long posts = d.getPosts();
                        long neutral = d.getNeutral();
                        long positive = d.getPositive();
                        long negative = d.getNegative();
                        int threads = d.getThreads();
                        if (threadsAndPostsOfIndustry.get(d.getPeriod()) != null) {
                            ThreadsAndPosts tp = threadsAndPostsOfIndustry.get(d.getPeriod());
                            ThreadsAndPosts tpLastPeriod = threadsAndPostsOfIndustry.get("-" + d.getPeriod());

                            Double newThreadTrend = 0d;
                            Double newPostTrend = 0d;
                            if (!"N/A".equals(d.getThreadsTrend())
                                    && !"INF".equals(d.getThreadsTrend())) {
                                Double threadTrend = Double.valueOf(d
                                        .getThreadsTrend());
                                Integer threadsLastPeriod = (int) (threads / (1 + threadTrend));
                                newThreadTrend = (tp.getThreads() + threads
                                        - tpLastPeriod.getThreads() - threadsLastPeriod)
                                        / (double) (tpLastPeriod.getThreads() + threadsLastPeriod);
                                if (!"N/A".equals(d.getPostsTrend())
                                        && !"INF".equals(d.getPostsTrend())) {
                                    Double postTrend = Double.valueOf(d
                                            .getPostsTrend());
                                    Long postsLastPeriod = (long) (posts / (1 + postTrend));
                                    newPostTrend = (tp.getPosts() + posts
                                            - tpLastPeriod.getPosts() - postsLastPeriod)
                                            / (double) (tpLastPeriod.getPosts() + postsLastPeriod);
                                }
                                d.setThreadsTrend(NumberUtils.toDecimal4(
                                        newThreadTrend).toString());
                                d.setPostsTrend(NumberUtils
                                        .toDecimal4(newPostTrend).toString());
                            } else {
                                d.setThreadsTrend(d.getThreadsTrend());
                                d.setPostsTrend(d.getPostsTrend());
                            }
                            Map<String,Object> aM = new HashMap<String,Object>();
                            aM.put("scope", d.getScope());
                            aM.put("version", DEFAULT_VERSION);
                            aM.put("start", module.getTodoBasicCalendarMap().get(d.getPeriod()).getStartTime());
                            aM.put("end", module.getTodoBasicCalendarMap().get(d.getPeriod()).getEndTime());
                            List<Map> as = analyticDao.executeQuery("select sum(positive) as positive,sum(negative) as negative,sum(posts) as posts,sum(threads) as threads from analytics "
                            		+ "where scope = @scope and date >= @start and date < @end and version = @version and include_buzz = 1 and site_id != 'all' and topic = 'all'", aM);
                            if(as.size() > 0){
                            	if(as.get(0).get("posts")!=null){
                            		d.setPosts(Long.parseLong(as.get(0).get("posts").toString()));
                            	}
                            	if(as.get(0).get("positive")!=null){
                            		d.setPositive(Long.parseLong(as.get(0).get("positive").toString()));
                            	}
                            	if(as.get(0).get("negative")!=null){
                            		d.setNegative(Long.parseLong(as.get(0).get("negative").toString()));
                            	}
                            }
                            

                            d.setThreadsTrend(NumberUtils
                                    .toDecimal4(newThreadTrend).toString());
                            d.setPostsTrend(NumberUtils.toDecimal4(newPostTrend)
                                    .toString());
                            
                            d.setNeutral(d.getPosts() - d.getPositive() - d.getNegative());
                            if(as.get(0).get("threads") != null){
                            	d.setThreads(Integer.parseInt(as.get(0).get("threads").toString()));
                            }
                            
                        }
                    }
                    
                }
                dashboardDao.batchInsert(ds);
                
                //start cal sov
                //cal sov in front-end
//                ModuleIndustrySovDao misDao = new ModuleIndustrySovDao();
//                if(module.isIndustry()){
//                	ModuleDao md = new ModuleDao();
//                	List<String> scopes = md.queryScopesInIndustry(module.getScope());
//                	List<ModuleIndustrySov> miss = new ArrayList<ModuleIndustrySov>();
//                	for (String scope : scopes) {
//                		List<Dashboard> dds = dashboardDao.queryByCond(new String[]{"scope", "version", "include_buzz"}, new String[]{"=", "=", "="}, new Object[]{scope, DEFAULT_VERSION+1, true});
//                		for (Dashboard d : ds) {
//                			for (Dashboard dd : dds) {
//								if(dd.getPeriod().equals(d.getPeriod())){
//									double sov = (double)dd.getPosts()/d.getPosts();
//									ModuleIndustrySov mis = new ModuleIndustrySov();
//									mis.setBrandScope(dd.getScope());
//									mis.setIndustryScope(d.getScope());
//									mis.setSov(sov);
//									mis.setVersion(DEFAULT_VERSION);
//									miss.add(mis);
//								}
//							}
//						}
//					}
//                	misDao.batchInsert(miss);
//                }
            }
            
            // add dashboard buzz end
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }

    }

    private Map<String, ThreadsAndPosts> createThreadsAndPostsOfModule(Module module, List<BuzzAnalytic> buzzAnalytics) {
        Map<String, ThreadsAndPosts> threadsAndPostsOfIndustry = new HashMap<String, ThreadsAndPosts>();
        for (Entry<String, BasicDate> entry : module.getTodoBasicCalendarMap().entrySet()) {
            if ("1".equals(entry.getKey())) {
                System.out.println("............................");
            }
            Integer totalThreads = 0;
            Long totalPosts = 0L;
            Integer totalThreadsLastPeriod = 0;
            Long totalPostsLastPeriod = 0L;
            for (BuzzAnalytic analytic : buzzAnalytics) {
                if (analytic.getDate().getTime() >= entry.getValue().getStartTime().getTimeInMillis() && analytic.getDate().getTime() < entry.getValue().getEndTime().getTimeInMillis()) {
                    Integer singleThreads = analytic.getThreads();
                    if (null == singleThreads) {
                        singleThreads = 0;
                    }
                    Long singlePosts = analytic.getPosts();
                    if (null == singlePosts) {
                        singlePosts = 0L;
                    }
                    totalThreads += singleThreads;
                    totalPosts += singlePosts;
                }
                if (analytic.getDate().getTime() >= (entry.getValue().getStartTime().getTimeInMillis() - (entry.getValue().getEndTime().getTime().getTime() - entry.getValue().getStartTime().getTime().getTime()))
                        && analytic.getDate().getTime() < (entry.getValue().getEndTime().getTimeInMillis() - (entry.getValue().getEndTime().getTime().getTime() - entry.getValue().getStartTime().getTime().getTime()))) {
                    Integer singleThreads = analytic.getThreads();
                    if (null == singleThreads) {
                        singleThreads = 0;
                    }
                    Long singlePosts = analytic.getPosts();
                    if (null == singlePosts) {
                        singlePosts = 0L;
                    }
                    totalThreadsLastPeriod += singleThreads;
                    totalPostsLastPeriod += singlePosts;
                }
            }
            threadsAndPostsOfIndustry.put(entry.getKey(), new ThreadsAndPosts(totalThreads, totalPosts));
            threadsAndPostsOfIndustry.put("-" + entry.getKey(),new ThreadsAndPosts(totalThreadsLastPeriod,totalPostsLastPeriod));
        }
        return threadsAndPostsOfIndustry;
    }

    public void startupModule(Module module, Period period) {
        ModuleDao moduleDao = new ModuleDao();
        if(period.isRoutine()){
        	moduleDao.updateByCond(new String[]{"status", "instance",
                    "error_date", "error_log"}, new Object[]{
                    Module.Status.RUNNING.value(), EC2.getSelfInstanceId(), null,
                    null}, new String[]{"scope"}, new String[]{"="},
                    new Object[]{module.getScope()});
        }
        clearErrorData(module, period);
    }

    public void startupModuleCustomRange(Module module, String period) {
        DashboardDao dashboardDao = new DashboardDao();
        dashboardDao.clearByCond(new String[]{"scope", "version", "period"},
                new String[]{"=", "=", "="},
                new Object[]{module.getScope(), DEFAULT_VERSION, period});
        ThreadDao threadDao = new ThreadDao();
        threadDao.clearByCond(new String[]{"scope", "version", "period"},
                new String[]{"=", "=", "="},
                new Object[]{module.getScope(), DEFAULT_VERSION, period});
        TopicDao topicDao = new TopicDao();
        topicDao.clearByCond(new String[]{"scope", "version", "period"},
                new String[]{"=", "=", "="},
                new Object[]{module.getScope(), DEFAULT_VERSION, period});
        CustomRangeDao customRangeDao = new CustomRangeDao();
        customRangeDao.updateByCond(new String[]{"status", "percentage"},
                new Object[]{1, 0}, new String[]{"scope", "period"},
                new String[]{"=", "="}, new Object[]{module.getScope(),
                period});
    }

    public void updateCustomRange(Module module, String period,
                                  Integer percentage) {
        CustomRangeDao customRangeDao = new CustomRangeDao();
        customRangeDao
                .execute("update custom_ranges set percentage = percentage + "
                        + percentage + " where scope = '" + module.getScope()
                        + "' and period = '" + period + "'");
    }

    public void finishModule(Module module) {
        ModuleDao moduleDao = new ModuleDao();
        moduleDao.updateByCond(new String[]{"status", "updated_time"},
                new Object[]{0, DateUtils.getMidNight().getTime()},
                new String[]{"scope"}, new String[]{"="},
                new Object[]{module.getScope()});
    }

//    public void calTopics(Module module) {
//        Map<String, BasicDate> threadMap = module.getTodoBasicCalendarMap();
//        DailyThreadDao dailyThreadDao = new DailyThreadDao();
//        TopicDefinitionDao defDao = new TopicDefinitionDao();
//        TopicDao topicDao = new TopicDao();
//        List<Topic> ts = new ArrayList<Topic>();
//        Date createdAt = Calendar.getInstance().getTime();
//        List<TopicDefinition> topDefList = defDao.queryByCond(
//                new String[]{"scope"}, new String[]{"="},
//                new String[]{module.getScope()});
//        List<String> topicList = Lists.newArrayList();
//        for (TopicDefinition topDef : topDefList) {
//            topicList.add(topDef.getTopic());
//        }
//        if (topicList.size() > 0) {
//            for (Map.Entry<String, BasicDate> entry : threadMap.entrySet()) {
//                String period = entry.getKey();
//                BasicDate basicDate = entry.getValue();
//                Calendar currentStartTime = basicDate.getStartTime();
//                Calendar currentEndTime = basicDate.getEndTime();
//                List<Map> topics = dailyThreadDao.queryTopTopics(module,
//                        currentStartTime, currentEndTime);
//                for (Map map : topics) {
//                    String topic = (String) map.get("topic");
//                    if (topicList.contains(topic)) {
//                        if (!isTopicFilter(topic)) {
//                            Topic t = new Topic();
//                            t.setTopic(topic);
//                            t.setMention((Long) map.get("count"));
//                            t.setPeriod(period);
//                            t.setScope(module.getScope());
//                            t.setFiltered(false);
//                            t.setCreatedTime(createdAt);
//                            t.setVersion(DEFAULT_VERSION);
//                            ts.add(t);
//                        }
//                    }
//                }
//            }
//            topicDao.batchInsert(ts);
//        } else {
//            LOGGER.info("module : [" + module.getScope()
//                    + "] does not definition topic");
//        }
//    }

    public void calTopics2(Module module,Period period) {
        Map<String, BasicDate> threadMap = module.getTodoBasicCalendarMap();
        for (Map.Entry<String, BasicDate> entry : threadMap.entrySet()) {
            calTopics(module, entry.getKey(), entry.getValue().getStartTime(), entry.getValue().getEndTime());
        }
    }

    public void calTopics(Module module, String period, Calendar startDate,
                          Calendar endDate) {
    	List<Topic> ts = new ArrayList<Topic>();
    	Map<String,Double> m1 = queryTopicsOrderByVolume(module, period, startDate, endDate);
    	int i = 0;
    	for (Entry<String,Double> entry : m1.entrySet()) {
    		String topic = entry.getKey();
    		Topic t = new Topic();
            topic = Topic.processSpecialTopic(topic);
            t.setTopic(topic);
            t.setMention(Long.parseLong(String.valueOf(entry.getValue()*100)));
            t.setPeriod(period);
            t.setScope(module.getScope());
            t.setFiltered(false);
            t.setPercent(entry.getValue());
            t.setCreatedTime(Calendar.getInstance().getTime());
            t.setMostVolumeTopics(topic);
            t.setMostVolumeTopicsPercent(entry.getValue());
            t.setVersion(DEFAULT_VERSION);
            ts.add(t);
            i ++;
            if(i > 20){
            	break;
            }
		}
    	
    	Map<String,Double> m2 = queryTopicsOrderByIncrement(module, period, startDate, endDate);
    	i = 0;
    	for (Entry<String,Double> entry : m2.entrySet()) {
    		String topic = entry.getKey();
    		Topic t = new Topic();
            topic = Topic.processSpecialTopic(topic);
            t.setTopic(topic);
            t.setPeriod(period);
            t.setScope(module.getScope());
            t.setFiltered(false);
            t.setCreatedTime(Calendar.getInstance().getTime());
            t.setMostIncrementTopics(topic);
            t.setMostIncrementTopicsPercent(entry.getValue());
            t.setVersion(DEFAULT_VERSION);
            ts.add(t);
            i ++;
            if(i > 20){
            	break;
            }
		}
    	
    	Map<String,Double> m3 = queryTopicsOrderByIndustryAverage(module, period, startDate, endDate);
    	i = 0;
    	for (Entry<String,Double> entry : m3.entrySet()) {
    		String topic = entry.getKey();
    		Topic t = new Topic();
            topic = Topic.processSpecialTopic(topic);
            t.setTopic(topic);
            t.setPeriod(period);
            t.setScope(module.getScope());
            t.setFiltered(false);
            t.setCreatedTime(Calendar.getInstance().getTime());
            t.setMostAverageTopics(topic);
            t.setMostAverageTopicsPercent(entry.getValue());
            t.setVersion(DEFAULT_VERSION);
            ts.add(t);
            i ++;
            if(i > 20){
            	break;
            }
		}
    	TopicDao td = new TopicDao();
    	td.batchInsert(ts);
    }
    
    public LinkedHashMap<String,Double> queryTopicsOrderByVolume(Module module, String period, Calendar startDate, Calendar endDate){
    	LinkedHashMap<String,Double> rs = new LinkedHashMap<String,Double>();
    	
    	DailyThreadDao dao = new DailyThreadDao();
    	Map<String,Object> params = new HashMap<String,Object>();
		params.put("scope", module.getScope());
		params.put("start", startDate);
		params.put("end", endDate);
    	List<Map> tr = dao.executeQuery("select count(distinct(thread_id)) as count FROM daily_threads WHERE scope in ("+module.getScopeString()+") AND ymd >= @start AND ymd < @end AND topic!='ALL'",params);
		Long total = 1L;
		if(tr.size() > 0){
			Long t = (Long)tr.get(0).get("count");
			if(t != null && t.intValue() > 0){
				total = t;
			}
		}
		List<Map> r = dao.executeQuery("SELECT topic,count(*) as count, count(*)/"+total+" as percentage FROM daily_threads WHERE scope in ("+module.getScopeString()+") AND ymd >= @start AND ymd < @end AND topic!='ALL' GROUP BY trim(topic)",params);
		for (Map map : r) {
			String topic = (String)map.get("topic");
			if(!isTopicFilter(module, topic)){
				rs.put(topic,Double.valueOf(map.get("percentage").toString()));
			}
		}
		return SortUtils.sortMapByValue(rs, false);
    }
    
    public LinkedHashMap<String,Double> queryTopicsOrderByIncrement(Module module, String period, Calendar startDate, Calendar endDate){
    	LinkedHashMap<String,Double> rs = new LinkedHashMap<String,Double>();
    	
    	DailyThreadDao dao = new DailyThreadDao();
    	Map<String,Object> params = new HashMap<String,Object>();
		params.put("scope", module.getScope());
		params.put("start", startDate);
		params.put("end", endDate);
		List<Map> tr = dao.executeQuery("select count(distinct(thread_id)) as count FROM daily_threads WHERE scope in ("+module.getScopeString()+") AND ymd >= @start AND ymd < @end AND topic!='ALL'",params);
		Long total = 1L;
		if(tr.size() > 0){
			Long t = (Long)tr.get(0).get("count");
			if(t != null && t.intValue() > 0){
				total = t;
			}
		}
		List<Map> r = dao.executeQuery("SELECT topic,count(*) as count, count(*)/"+total+" as percentage FROM daily_threads WHERE scope in ("+module.getScopeString()+") AND ymd >= @start AND ymd < @end AND topic!='ALL' GROUP BY trim(topic)",params);
		
		Map<String,Object> params2 = new HashMap<String,Object>();
		params2.put("scope", module.getScope());
		params2.put("start", DateUtils.getNDaysAgo(startDate, (int)((endDate.getTimeInMillis() - startDate.getTimeInMillis())/86400000)));
		params2.put("end", startDate);
		
		List<Map> tr2 = dao.executeQuery("select count(distinct(thread_id)) as count FROM daily_threads WHERE scope in ("+module.getScopeString()+") AND ymd >= @start AND ymd < @end AND topic!='ALL'",params2);
		Long total2 = 1L;
		if(tr2.size() > 0){
			Long t2 = (Long)tr2.get(0).get("count");
			if(t2 != null && t2.intValue() > 0){
				total2 = t2;
			}
		}
		List<Map> r2 = dao.executeQuery("SELECT topic,count(*) as count, count(*)/"+total2+" as percentage FROM daily_threads WHERE scope in ("+module.getScopeString()+") AND ymd >= @start AND ymd < @end AND topic!='ALL' GROUP BY trim(topic)",params2);
		Map<String,Double> m2 = new HashMap<String,Double>();
		for (Map map : r2) {
			m2.put((String)map.get("topic"), Double.valueOf(map.get("percentage").toString()));
		}
		for(Map map : r){
			String topic = (String)map.get("topic");
			if(!isTopicFilter(module, topic)){
				Double per = Double.valueOf(map.get("percentage").toString());
				Double pper = 1D;
				if(m2.get(topic)!=null){
					pper = m2.get(topic);
				}
				rs.put(topic, per/pper);
			}
		}
    	return SortUtils.sortMapByValue(rs, false);
    }
    
    public LinkedHashMap<String,Double> queryTopicsOrderByIndustryAverage(Module module, String period, Calendar startDate, Calendar endDate){
    	LinkedHashMap<String,Double> rs = new LinkedHashMap<String,Double>();
    	
    	DailyThreadDao dao = new DailyThreadDao();
    	
		if(module.getModuleCategoryId() != null){
			ModuleDao md = new ModuleDao();
			List<Module> ms = md.queryByCond(new String[]{"module_category_id","enable"}, new String[]{"=","="}, new Object[]{module.getModuleCategoryId(),1});
			if(ms.size() > 1){
				Map<String,Double> pm = new HashMap<String,Double>();
				Map<String,Double> pm2 = new HashMap<String,Double>();
				
				Map<String,Object> params = new HashMap<String,Object>();
				params.put("scope", module.getScope());
				params.put("start", startDate);
				params.put("end", endDate);
				
				List<Map> tr = dao.executeQuery("select count(distinct(thread_id)) as count FROM daily_threads WHERE scope in ("+module.getScopeString()+") AND ymd >= @start AND ymd < @end AND topic!='ALL'",params);
				Long total = 1L;
				if(tr.size() > 0){
					Long t = (Long)tr.get(0).get("count");
					if(t != null && t.intValue() > 0){
						total = t;
					}
				}
				
				
				List<Map> r = dao.executeQuery("SELECT topic,count(*) as count, count(*)/"+total+" as percentage FROM daily_threads WHERE scope in ("+module.getScopeString()+") AND ymd >= @start AND ymd < @end AND topic!='ALL' GROUP BY trim(topic)",params);
				for (Map map : r) {
					pm.put((String)map.get("topic"),Double.valueOf(map.get("percentage").toString()));
				}
				
				StringBuilder names = new StringBuilder("'");
				boolean first = true;
				for (Module m : ms) {
					names.append(m.getName());
					if(!first){
						names.append("','");
					}
					first = false;
				}
				names.append("'");
				
				
				List<Map> tr2 = dao.executeQuery("select count(distinct(thread_id)) as count FROM daily_threads WHERE scope in ("+names.toString()+") AND ymd >= @start AND ymd < @end AND topic!='ALL'",params);
				Long total2 = 1L;
				if(tr2.size() > 0){
					Long t2 = (Long)tr2.get(0).get("count");
					if(t2 != null && t2.intValue() > 0){
						total2 = t2;
					}
				}
				List<Map> r2 = dao.executeQuery("SELECT topic,count(*) as count, count(*)/"+total2+" as percentage FROM daily_threads WHERE scope in ("+names.toString()+") AND ymd >= @start AND ymd < @end AND topic!='ALL' GROUP BY trim(topic)",params);
				for (Map map : r2) {
					pm2.put((String)map.get("topic"),Double.valueOf(map.get("percentage").toString()));
				}
				for (Entry<String,Double> entry : pm.entrySet()) {
					String topic = entry.getKey();
					if(!isTopicFilter(module, topic)){
						Double per = entry.getValue();
						Double cp = pm2.get(topic);
						if(cp == null){
							cp = 0.1; 
						}
						rs.put(topic, per/cp);
					}
				}
			}
			
		}
    	return SortUtils.sortMapByValue(rs, false);
    }
    
    @Deprecated
    private void prepareForNormalModuleSaveTopic(Module module, String period, Calendar startDate, Calendar endDate) {
        DailyThreadDao dailyThreadDao = new DailyThreadDao();
        TopicDao topicDao = new TopicDao();
        List<Topic> ts = new ArrayList<Topic>();
        List<Map> topics = dailyThreadDao.queryTopTopics(module, startDate, endDate);
        for (Map map : topics) {
            String topic = (String) map.get("topic");
            if (!isTopicFilter(module,topic)) {
                Topic t = new Topic();
                topic = Topic.processSpecialTopic(topic);
                Long mention = (Long) map.get("count");
                Double percent = 0D;
                percent = Double.valueOf(mention);
                t.setTopic(topic);
                t.setMention((Long) map.get("count"));
                t.setPeriod(period);
                t.setScope(module.getScope());
                t.setFiltered(false);
                t.setPercent(percent);
                t.setCreatedTime(Calendar.getInstance().getTime());
                t.setVersion(DEFAULT_VERSION);
                ts.add(t);
            }
        }
        topicDao.batchInsert(ts);
    }

    @Deprecated
    private void prepareForIndustryModuleSaveTopic(Module module,
                                                   String period, Calendar startDate, Calendar endDate) {
        DailyThreadDao dailyThreadDao = new DailyThreadDao();
        TopicDao topicDao = new TopicDao();
        List<Topic> ts = new ArrayList<Topic>();
        List<Map> topics = dailyThreadDao.queryTopTopics(module, startDate,
                endDate);
        for (Map map : topics) {
            String topic = (String) map.get("topic");
            if (!isTopicFilter(module,topic)) {
                Topic t = new Topic();
                topic = Topic.processSpecialTopic(topic);
                t.setTopic(topic);
                t.setMention((Long) map.get("count"));
                t.setPeriod(period);
                t.setScope(module.getScope());
                t.setFiltered(false);
                t.setPercent(Double.valueOf((Long) map.get("count")));
                t.setCreatedTime(Calendar.getInstance().getTime());
                t.setVersion(DEFAULT_VERSION);
                ts.add(t);
            }
        }
        topicDao.batchInsert(ts);
    }

    /**
     * 缓存 weibo_thread 表中 thread 的comment
     */
    @Deprecated
    public boolean cacheWeiboCommentsOfThreadsByScopeAndPeriod(Module module, String period) {
        boolean flag = false;
        try {
            WeiboThreadDao weiboThreadDao = new WeiboThreadDao();
            flag = true;
            List<WeiboThreads> weiboThreadsList = Lists.newArrayList();
            weiboThreadsList = weiboThreadDao.queryByCond(new String[]{"scope", "period", "version"}, new String[]{"=", "=","="}, new Object[]{module.getScope(), period, "-1"});
            int cnt = 0;
            for (WeiboThreads t : weiboThreadsList) {
                cnt++;
                System.out.println("-------cacheWeiboCommentsOfThreadsByScopeAndPeriod--------" + t.getScope() + "  " + t.getThreadId() + " will cache all count" + weiboThreadsList.size() + " has do " + cnt + "");
                Long endtime = t.getCommentsTimeLast();
                if (endtime != null && endtime > 0L) {
                    try {
                        PaginatedQueryList<Comment> query = DynamoModel.query(Comment.class, t.getThreadId());
                        List<Comment> cs = new ArrayList<Comment>();
                        for (Iterator<Comment> iterator = query.iterator(); iterator.hasNext(); ) {
                            Comment comment = (Comment) iterator.next();
                            if (comment.getCreatedAt().compareTo(endtime) <= 0) {
                                asia.wildfire.common.model.dynamodb.User user = DynamoModel.find(asia.wildfire.common.model.dynamodb.User.class, comment.getUserId());
                                comment.setUser(user);
                                cs.add(comment);
                            }
                        }
                        Post.saveWeiboCommentToElasticCache(t, cs, module);
                    } catch (Exception e) {
                        flag = false;
                        LOGGER.error("weiboThread|" + module.getScope() + "|" + e.getMessage());
                        e.printStackTrace();
                    }
                } else {
                    List<Comment> cs = new ArrayList<Comment>();
                    Post.saveWeiboCommentToElasticCache(t, cs, module);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return flag;
    }

    public void cacheFaceBookCommentsOfThreadsByScopeAndPeriod(Module module, String period) {
        FacebookThreadDao facebookThreadDao = new FacebookThreadDao();
        List<FacebookThreads> ts = facebookThreadDao.queryByCond(new String[]{
                "scope", "period"}, new String[]{"=", "="}, new Object[]{
                module.getScope(), period});
        for (FacebookThreads t : ts) {
            Long endtime = t.getCommentsTimeLast();
            if (endtime != null && endtime > 0L) {
                try {
                    PaginatedQueryList<FBComment> query = DynamoModel.query(
                            FBComment.class, t.getThreadId());
                    List<FBComment> cs = new ArrayList<FBComment>();
                    for (Iterator<FBComment> iterator = query.iterator(); iterator
                            .hasNext(); ) {
                        FBComment comment = (FBComment) iterator.next();
                        if (comment.getCreatedAt().compareTo(endtime) <= 0) {
                            FBUser user = DynamoModel.find(FBUser.class,
                                    comment.getUserId());
                            comment.setUser(user);
                            cs.add(comment);
                        }
                    }
                    Post.saveFacebookCommentToElasticCache(t, cs, module);
                } catch (Exception e) {
                    LOGGER.error("facebookThread|" + module.getScope() + "|"
                            + e.getMessage());
                    e.printStackTrace();
                }
            } else {
                List<FBComment> cs = new ArrayList<FBComment>();
                Post.saveFacebookCommentToElasticCache(t, cs, module);
            }
        }
    }

    private boolean isTopicFilter(Module module,String topic) {
        if (Site.getAllSiteName().contains(topic)) {
            return true;
        }
        for (Pattern regex : filteredRegex) {
            if (regex.matcher(topic).matches()) {
                return true;
            }
        }
        return !Topic.checkTopicDisplay(module, topic);
    }
    
    public void startupTodayModule(Module module, Calendar startCal,
                                   Calendar endCal, Calendar twoDaysAgoStartCal) {
        try {
            HourlyThreadDao hourlyThreadDao = new HourlyThreadDao();
            hourlyThreadDao.clearByCond(new String[]{"scope", "ymd"},
                    new String[]{"=", ">="},
                    new Object[]{module.getScope(),
                            new Timestamp(startCal.getTime().getTime())});
            hourlyThreadDao.clearByCond(new String[]{"scope", "ymd"},
                    new String[]{"=", "<"}, new Object[]{
                    module.getScope(),
                    new Timestamp(twoDaysAgoStartCal.getTime()
                            .getTime())});
            clearTodayErrorData(module);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public List<HourlyThread> fetchHourlyThread(Module module,
    		ThreadDaysInfo threadAndSiteResult) {
        List<HourlyThread> dts = new ArrayList<HourlyThread>();
        List<String> topics = new ArrayList<String>(threadAndSiteResult
                .getTagsList());
        topics.add("ALL");
        String threadId = threadAndSiteResult.getTopicId();
        Integer siteId = threadAndSiteResult.getShort_site_id();
        asia.wildfire.common.model.Topic t = new asia.wildfire.common.model.Topic();
        t.loadByIdAndShardSalt(threadId, threadAndSiteResult.getTopic_uri_ss(), 3);
        if (null != t && null != t.getId() && null != t.getDate()) {
            String siteName = "";
            String media = "";
            Site site = Site.getSiteMap().get(siteId);
            if (site != null) {
                siteName = site.getSiteName();
                media = site.getSiteType();
            }
            if (t != null && t.getId() != null) {
                Map<String, Long> postDistributionByTopicAndThread = threadAndSiteResult
                        .getTagsValue();
                Long positive = postDistributionByTopicAndThread
                        .get(Sentiment.POSITIVE.value());
                if (positive == null) {
                    positive = 0L;
                }
                Long negative = postDistributionByTopicAndThread
                        .get(Sentiment.NEGATIVE.value());
                if (negative == null) {
                    negative = 0L;
                }
                Long neutral = threadAndSiteResult.getPostsCount() - positive
                        - negative;
                if (neutral.compareTo(0L) < 0) {
                    neutral = 0L;
                }
                String url = t.getUri();
                String title = t.getTitle();
                Date date = t.getDate();
                Long comments = (t.getReplyCount() == null || "".equals(t
                        .getReplyCount().trim())) ? null : Long.valueOf(t
                        .getReplyCount());
                Long reposts = (t.getRepostCount() == null || "".equals(t
                        .getRepostCount().trim())) ? null : Long.valueOf(t
                        .getRepostCount());
                String repostTo = (t.getRepostTo() == null || "".equals(t
                        .getRepostTo().trim())) ? null : t.getRepostTo();
                for (String topicStr : topics) {
                    HourlyThread dt = new HourlyThread();
                    dt.setComments(comments);
                    dt.setDate(date);
                    dt.setMedia(media);
                    dt.setNegative(negative);
                    dt.setNeutral(neutral);
                    dt.setPositive(positive);
                    dt.setPosts(Long.valueOf(threadAndSiteResult.getPostsCount()));
                    dt.setReposts(reposts);
                    dt.setRepostTo(repostTo);
                    dt.setScope(module.getScope());
                    dt.setSiteId(siteId);
                    dt.setSiteName(siteName);
                    dt.setThreadId(threadId);
                    dt.setTitle(title);
                    dt.setTopic(topicStr);
                    dt.setUrl(url);
                    dt.setViews((t.getViewCount() == null || "".equals(t
                            .getViewCount().trim())) ? null : Long.valueOf(t
                            .getViewCount()));
                    dts.add(dt);
                    if ("ALL".equals(topicStr)) {
                        cachePosts(dt);
                    }
                }
            }
        }
        return dts;
    }

    public void calTodayThread(Module module, Calendar endTime) {
        HourlyThreadDao hourlyThreadDao = new HourlyThreadDao();
        Map<String, Map<String, Object>> hourlyThreadResultMap = hourlyThreadDao
                .queryHourlyThreadsForTodayThreads(module, endTime);
        TodayThreadDao todayThreadDao = new TodayThreadDao();
        List<TodayThreads> ts = Lists.newArrayList();
        List<TodayThreads> totalThreads = new ArrayList<TodayThreads>();
        int batchSize = 500;
        int i = 0;
        for (Map.Entry<String, Map<String, Object>> entry : hourlyThreadResultMap
                .entrySet()) {
            Map<String, Object> singleMap = entry.getValue();
            Timestamp timestamp = (Timestamp) singleMap.get("date");
            Calendar calendar = Calendar.getInstance();
            calendar.setTime(new Date(timestamp.getTime()));
            TodayThreads todayThreads = new TodayThreads(
                    (String) singleMap.get("thread_id"),
                    (String) singleMap.get("scope"),
                    (String) singleMap.get("topics"),
                    (Integer) singleMap.get("site_id"),
                    (String) singleMap.get("site_name"),
                    (String) singleMap.get("media"),
                    (Timestamp) singleMap.get("date"),
                    (String) singleMap.get("title"),
                    (String) singleMap.get("url"),
                    (String) singleMap.get("period"),
                    (Long) singleMap.get("posts"),
                    (Long) singleMap.get("positive"),
                    (Long) singleMap.get("negative"),
                    (Long) singleMap.get("neutral"),
                    (Long) singleMap.get("posts"),
                    (Long) singleMap.get("positive"),
                    (Long) singleMap.get("negative"),
                    (Long) singleMap.get("neutral"), new Date(), 0,
                    (Long) singleMap.get("comments"),
                    (Long) singleMap.get("reposts"), false,
                    (String) singleMap.get("repost_to"), -1,
                    calendar.get(Calendar.YEAR),
                    calendar.get(Calendar.MONTH) + 1,
                    calendar.get(Calendar.DAY_OF_MONTH),
                    calendar.get(Calendar.HOUR_OF_DAY),
                    calendar.get(Calendar.MINUTE));
            todayThreads.setViews((Long) singleMap.get("views"));
            ts.add(todayThreads);
            if ((++i) % batchSize == 0) {
                todayThreadDao.batchInsert(ts);
                LOGGER.info("batch save threads[" + module.getScope() + "]");
                ts.clear();
            }
            if (i < EXCEL_MAX_SIZE) {
                totalThreads.add(todayThreads);
            }
        }
        try {
            todayThreadDao.batchInsert(ts);
            generateTodayExportFile(module, "today", totalThreads);
            LOGGER.info("generateExportFile[" + module.getScope() + "]");

        } catch (Exception e) {
            e.printStackTrace();
        }
        try {
            for (AlertRule ar : AlertRule.queryEnabledRuleForModule(module
                    .getScope())) {
                ar.matchTodayThread(module, "today", ts);
            }
            System.out.println("");
        } catch (Exception e) {
        	e.printStackTrace();
            Utils.errorLogger.error(e.getMessage());
        }
        ts = null;
    }

    public void calTodayDashboard(Module module, Calendar endTime) {
        DashboardDao dashboardDao = new DashboardDao();
        Calendar startTime = DateUtils.getMidNight();
        Calendar yesterdayStartTime = DateUtils.getNDaysAgo(startTime, 1);
        Calendar yesterdayEndTime = DateUtils.getNDaysAgo(endTime, 1);

        StringBuilder countSql = new StringBuilder(
                "select count(thread_id) as threads, sum(posts) as posts, sum(views) as views, sum(positive) as positive,"
                        + "sum(negative) as negative, sum(neutral) as neutral from hourly_threads where scope = '")
                .append(module.getScope())
                .append("' and ymd >= @startDate and ymd < @endDate and topic = 'ALL'");
        Map<String, Object> currentDashboard = dashboardDao.getDashboard(
                countSql.toString(), startTime, endTime);
        Map<String, Object> prevDashboard = dashboardDao.getDashboard(
                countSql.toString(), yesterdayStartTime, yesterdayEndTime);

        DecimalFormat fnum = new DecimalFormat("#############.####");
        String threadsTrend = "INF";
        String postsTrend = "INF";
        String setimentTrend = "INF";
        String viewsTrend = "INF";

        if (!prevDashboard.get("threads").toString().equals("0")) {
            Float threadsTrendF = ((Float.valueOf(currentDashboard.get(
                    "threads").toString()) - Float.valueOf(prevDashboard.get(
                    "threads").toString())) / Float.valueOf(prevDashboard.get(
                    "threads").toString()));
            threadsTrend = fnum.format(threadsTrendF);
        }
        if (!prevDashboard.get("posts").toString().equals("0")) {
            Float postsTrendF = (Float.valueOf(currentDashboard.get("posts")
                    .toString()) - Float.valueOf(prevDashboard.get("posts")
                    .toString()))
                    / Float.valueOf(prevDashboard.get("posts").toString());
            postsTrend = fnum.format(postsTrendF);
        }
        if (!prevDashboard.get("views").toString().equals("0")) {
            Float viewsTrendF = (Float.valueOf(currentDashboard.get("views")
                    .toString()) - Float.valueOf(prevDashboard.get("views")
                    .toString()))
                    / Float.valueOf(prevDashboard.get("views").toString());
            viewsTrend = fnum.format(viewsTrendF);
        }
        Float prev = (Float.valueOf(currentDashboard.get("posts").toString()) * (Float
                .valueOf(prevDashboard.get("positive").toString()) - Float
                .valueOf(prevDashboard.get("negative").toString())));
        if (prev.floatValue() != 0) {
            Float setimentTrendF = (Float.valueOf(currentDashboard.get(
                    "positive").toString()) - Float.valueOf(currentDashboard
                    .get("negative").toString()))
                    * Float.valueOf(prevDashboard.get("posts").toString())
                    / prev;
            setimentTrend = fnum.format(setimentTrendF);
        }
        if (prevDashboard.get("threads").toString().equals("0")) {
            threadsTrend = "INF";
        }
        if (prevDashboard.get("posts").toString().equals("0")) {
            postsTrend = "INF";
        }
        if (currentDashboard.get("posts").toString().equals("0")) {
            setimentTrend = "INF";
        }
        double sov = 0;
        String sovTrent = "N/A";
//        if (null != module.getParent()) {
//            Module parentModule = module.getParent();
//            String parentSql = "select scope, count(thread_id) as threads from hourly_threads where scope = @scope and ymd >= @start_ymd and ymd < @end_ymd and topic = 'ALL'";
//            Map<String, Object> parentParams = new HashMap<String, Object>();
//            parentParams.put("scope", parentModule.getScope());
//            parentParams.put("start_ymd", new Timestamp(startTime.getTime()
//                    .getTime()));
//            parentParams.put("end_ymd", new Timestamp(endTime.getTime()
//                    .getTime()));
//            List<Map> currentParentThreadsCountList = dashboardDao
//                    .executeQueryWithKeyValue(parentSql, parentParams, "scope",
//                            "threads");
//            Long currentThreadsCount = (Long) currentDashboard.get("threads");
//            Long previousThreadsCount = (Long) prevDashboard.get("threads");
//            Long currentParentThreadsCount = 0L;
//            Long previousParentThreadsCount = 0L;
//            if (null != currentParentThreadsCountList
//                    && currentParentThreadsCountList.size() > 0) {
//                currentParentThreadsCount = (Long) currentParentThreadsCountList
//                        .get(currentParentThreadsCountList.size() - 1).get(
//                                parentModule.getScope());
//            }
//            parentParams.put("start_ymd", new Timestamp(yesterdayStartTime
//                    .getTime().getTime()));
//            parentParams.put("end_ymd", new Timestamp(yesterdayEndTime
//                    .getTime().getTime()));
//            List<Map> previousParentThreadsCountList = dashboardDao
//                    .executeQueryWithKeyValue(parentSql, parentParams, "scope",
//                            "threads");
//            if (null != previousParentThreadsCountList
//                    && previousParentThreadsCountList.size() > 0) {
//                previousParentThreadsCount = (Long) previousParentThreadsCountList
//                        .get(previousParentThreadsCountList.size() - 1).get(
//                                parentModule.getScope());
//            }
//            if (null != currentParentThreadsCount
//                    && currentParentThreadsCount > 0) {
//                sov = (double) currentThreadsCount / currentParentThreadsCount;
//                if (null != previousParentThreadsCount
//                        && previousParentThreadsCount > 0) {
//                    double previousSov = (double) previousThreadsCount
//                            / previousParentThreadsCount;
//                    if (previousSov > 0) {
//                        sovTrent = String.valueOf((sov - previousSov)
//                                / previousSov);
//                    }
//                }
//            } else {
//                LOGGER.info("module " + module.getScope()
//                        + " parent module has not run daily threads ");
//            }
//        }
        Dashboard dashboard = new Dashboard();
        dashboard.setScope(module.getScope());
        dashboard.setCreatedTime(new Date());
        dashboard.setPeriod("today");
        dashboard.setPositive(Long.valueOf(currentDashboard.get("positive")
                .toString()));
        dashboard.setNegative(Long.valueOf(currentDashboard.get("negative")
                .toString()));
        dashboard.setNeutral(Long.valueOf(currentDashboard.get("neutral")
                .toString()));
        dashboard.setThreads(Integer.valueOf(currentDashboard.get("threads")
                .toString()));
        dashboard.setViews(Long.valueOf(currentDashboard.get("views")
                .toString()));
        dashboard.setPosts(Long.valueOf(currentDashboard.get("posts")
                .toString()));
        dashboard.setThreadsTrend(threadsTrend);
        dashboard.setPostsTrend(postsTrend);
        dashboard.setViewsTrend(viewsTrend);
        dashboard.setSentimentTrend(setimentTrend);
        dashboard.setFiltered(Boolean.FALSE);
//        if ("industry".equals(module.getModuleType())
//                || null == module.getParent()) {
//            dashboard.setSov(null);
//        } else {
//            dashboard.setSov(sov);
//        }
        dashboard.setSovTrend(sovTrent);
        dashboard.setIncludeBuzz(Boolean.TRUE);
        dashboard.setVersion(DEFAULT_VERSION);
        try {
            dashboardDao.insert(dashboard);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void calTodayAnalytics(Module module, Calendar midNight,
                                  Calendar endTime) {
        int hoursNow = endTime.get(Calendar.HOUR_OF_DAY);
        HourlyThreadDao hourlyThreadDao = new HourlyThreadDao();
        HourlyAnalyticDao hourlyAnalyticDao = new HourlyAnalyticDao();
        try {
            for (int i = 0; i < hoursNow; i++) {
                Calendar thisStartTime = Calendar.getInstance();
                thisStartTime.set(endTime.get(Calendar.YEAR),
                        endTime.get(Calendar.MONTH),
                        endTime.get(Calendar.DAY_OF_MONTH), i, 0, 0);
                Calendar thisEndTime = Calendar.getInstance();
                thisEndTime.set(endTime.get(Calendar.YEAR),
                        endTime.get(Calendar.MONTH),
                        endTime.get(Calendar.DAY_OF_MONTH), i + 1, 0, 0);
                String normalSql = "select dt.`topic`, dt.`site_id`, dt.`site_name`, dt.`media`, dt.`date`, dt.`title`, dt.`url`, dt.`ymd`, count(dt.`thread_id`) as threads, sum(dt.`posts`) as posts, sum(dt.`positive`) as positive, sum(dt.`negative`) as negative, sum(dt.`neutral`) as neutral from `hourly_threads` dt where dt.`scope` = ?  and dt.`ymd` = ? and dt.topic != 'ALL' group by dt.`topic`, dt.`media`";
                String mediaAllsql = "select dt.`scope`, dt.`topic`, dt.`site_id`, dt.`site_name`, dt.`media`, dt.`date`, dt.`title`, dt.`url`, dt.`ymd`, count(dt.`thread_id`) as threads, sum(dt.`posts`) as posts, sum(dt.`positive`) as positive, sum(dt.`negative`) as negative, sum(dt.`neutral`) as neutral from `hourly_threads` dt where dt.`scope` = ?  and dt.`ymd` = ? and dt.topic != 'ALL' group by dt.`topic`";
                String topicAllsql = "select dt.`scope`, dt.`topic`, dt.`site_id`, dt.`site_name`, dt.`media`, dt.`date`, dt.`title`, dt.`url`, dt.`ymd`, count(dt.`thread_id`) as threads, sum(dt.`posts`) as posts, sum(dt.`positive`) as positive, sum(dt.`negative`) as negative, sum(dt.`neutral`) as neutral from `hourly_threads` dt where dt.`scope` = ?  and dt.`ymd` = ? and dt.topic = 'ALL' group by dt.site_id";
                String allSql = "select r_tab.topic, r_tab.site_id, r_tab.site_name, r_tab.media, r_tab.date, r_tab.title, r_tab.url, r_tab.repost_to, r_tab.ymd, COUNT(r_tab.thread_id) as threads, sum(r_tab.posts) as posts, sum(r_tab.`positive`) as positive, \n"
                        + "sum(r_tab.`negative`) as negative, sum(r_tab.`neutral`) as neutral from hourly_threads r_tab where r_tab.`scope` = ?  and r_tab.`ymd` = ? and r_tab.topic = 'ALL'";

                Map<String, Map<String, Object>> normalMap = hourlyThreadDao
                        .queryHourlyThreadsForAnalytics(normalSql, module,
                                thisStartTime, thisEndTime,
                                AnalyticsType.NORMAL.value());
                Map<String, Map<String, Object>> mediaALlMap = hourlyThreadDao
                        .queryHourlyThreadsForAnalytics(mediaAllsql, module,
                                thisStartTime, thisEndTime,
                                AnalyticsType.MEDIA_ALL.value());
                Map<String, Map<String, Object>> topicAllMap = hourlyThreadDao
                        .queryHourlyThreadsForAnalytics(topicAllsql, module,
                                thisStartTime, thisEndTime,
                                AnalyticsType.TOPIC_ALL.value());
                Map<String, Map<String, Object>> alllMap = hourlyThreadDao
                        .queryHourlyThreadsForAnalytics(allSql, module,
                                thisStartTime, thisEndTime,
                                AnalyticsType.ALL_ALL.value());
                Map<String, Map<String, Object>> beforeStepMap = Maps
                        .newHashMap();
                beforeStepMap.putAll(normalMap);
                beforeStepMap.putAll(mediaALlMap);
                beforeStepMap.putAll(topicAllMap);
                beforeStepMap.putAll(alllMap);
                List<HourlyAnalytic> analyticList = Lists.newArrayList();

                for (Map.Entry<String, Map<String, Object>> entry : beforeStepMap
                        .entrySet()) {
                    Map<String, Object> singleMap = entry.getValue();
                    HourlyAnalytic ana = new HourlyAnalytic(
                            (String) singleMap.get("scope"),
                            (String) singleMap.get("topic"),
                            (String) singleMap.get("site_id"),
                            (Long) singleMap.get("posts"),
                            (Integer) singleMap.get("threads"),
                            (Integer) singleMap.get("hour"),
                            (Integer) singleMap.get("day"),
                            (Integer) singleMap.get("month"),
                            (Integer) singleMap.get("year"),
                            (Long) singleMap.get("positive"),
                            (Long) singleMap.get("negative"),
                            (Long) singleMap.get("neutral"),
                            (Double) singleMap.get("sov"),
                            (Double) singleMap.get("net_sentiment"),
                            (String) singleMap.get("media"), new Date(
                            (Long) singleMap.get("date")), new Date(),
                            false, false);
                    ana.setTopPosts((String) singleMap.get("topPosts"));
                    ana.setVersion(DEFAULT_VERSION);
                    analyticList.add(ana);
                }
                hourlyAnalyticDao.batchInsert(analyticList);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void calTodayTopics(Module module, Calendar startTime,
                               Calendar endTime) {
        HourlyThreadDao dailyThreadDao = new HourlyThreadDao();
        TopicDao topicDao = new TopicDao();
        List<Topic> ts = new ArrayList<Topic>();
        Date createdAt = Calendar.getInstance().getTime();
        String period = "today";
        List<Map> topics = dailyThreadDao.queryTopTopics(module, startTime,
                endTime);
        for (Map map : topics) {
            String topic = (String) map.get("topic");
            if (!isTopicFilter(module,topic)) {
                Topic t = new Topic();
                t.setTopic(topic);
                t.setMention((Long) map.get("count"));
                t.setPeriod(period);
                t.setScope(module.getScope());
                t.setFiltered(false);
                t.setCreatedTime(createdAt);
                t.setVersion(DEFAULT_VERSION);
                ts.add(t);
            }

        }
        try {
            topicDao.batchInsert(ts);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void calBuzzReach(Module module) {
        BuzzReachDao reachDao = new BuzzReachDao();
        String buzzKeyword = module.getBuzzKeyword();
        if (null == buzzKeyword || "".equals(buzzKeyword)) {
            return;
        } else {
            String scope = module.getScope();
            Calendar endTime = DateUtils.getMidNight();
            Map<String, Object> params = new HashMap<String, Object>();
            params.put("scope", module.getScope());
            List<Map> mapList = reachDao.executeQuery("SELECT date_time FROM buzz_reach WHERE scope=@scope ORDER BY date_time DESC LIMIT 1", params);
            Calendar startTime = null;
            if (null != mapList && mapList.size() > 0) {
                Map singleMap = mapList.get(0);
                String thisStart = (String) singleMap.get("date_time");
                startTime = DateUtils.getCalFromString("yyyy-MM-dd", thisStart);
            } else {
                startTime = DateUtils.getNDaysAgo(DateUtils.getMidNight(), 90);
            }
            long start = startTime.getTime().getTime();
            long end = endTime.getTime().getTime();
            PaginatedQueryList<WeiboBuzzReach> queryList = WeiboBuzzReach.query(WeiboBuzzReach.class, buzzKeyword, start, end, false);
            String dateTime = DateUtils.calToDateStringWithFormat(startTime,"yyyy-MM-dd");
            Map<String, BuzzReach> dynamodbQueryMap = Maps.newHashMap();
            for (WeiboBuzzReach reach : queryList) {
                String singleStr = DateUtils.calToDateStringWithFormat(DateUtils.timestamp2GMT8Calendar(reach.getTimestamp()),"yyyy-MM-dd");
                Long retweets_count_0 = (null == reach.getRetweetsCount0()) ? 0 : reach.getRetweetsCount0();
                Long retweets_count_1 = (null == reach.getRetweetsCount1()) ? 0 : reach.getRetweetsCount1();
                Long comments_count_0 = (null == reach.getCommentsCount0()) ? 0 : reach.getCommentsCount0();
                Long comments_count_1 = (null == reach.getCommentsCount1()) ? 0 : reach.getCommentsCount1();
                BuzzReach singleReach = dynamodbQueryMap.get(singleStr);
                if (null != singleReach) {
                    singleReach.setG0(singleReach.getG0() + reach.getG0Reach());
                    singleReach.setG1(singleReach.getG1() + reach.getG1Reach());
                    singleReach.setG2(singleReach.getG2() + reach.getG2Reach());
                    singleReach.setCommentCount0(singleReach.getCommentCount0() + comments_count_0);
                    singleReach.setCommentCount1(singleReach.getCommentCount1() + comments_count_1);
                    singleReach.setRetweetCount0(singleReach.getRetweetCount0() + retweets_count_0);
                    singleReach.setRetweetCount1(singleReach.getRetweetCount1() + retweets_count_1);

                } else {
                    singleReach = new BuzzReach(scope, singleStr, reach.getG0Reach(), reach.getG1Reach(), reach.getG2Reach(), retweets_count_0, comments_count_0, retweets_count_1, comments_count_1);
                    dynamodbQueryMap.put(singleStr, singleReach);
                }
            }
            List<BuzzReach> buzzReaches = Lists.newArrayList();
            for (Map.Entry<String, BuzzReach> entry : dynamodbQueryMap
                    .entrySet()) {
                buzzReaches.add(entry.getValue());
            }
            reachDao.batchInsert(buzzReaches);
        }
    }

    public void calBuzzReachFromRedshift(Module module) {
        BuzzReachDao reachDao = new BuzzReachDao();
        CrmWeiboBuzzReachDao weiboBuzzReachDao = new CrmWeiboBuzzReachDao();
        String buzzKeyword = module.getBuzzKeyword();
        if (null == buzzKeyword || "".equals(buzzKeyword)) {
            return;
        } else {
            String scope = module.getScope();
            reachDao.clearByCond(new String[]{"scope"}, new String[]{"="}, new Object[]{scope});
            Calendar startTime = DateUtils.getNDaysAgo(DateUtils.getMidNight(), 90);
            Calendar endTime = DateUtils.getMidNight();
            long start = startTime.getTime().getTime();
            long end = endTime.getTime().getTime();
            List<CrmWeiboBuzzReach> weiboBuzzReachList = Lists.newArrayList();
            if (null != module.getBuzzKeyword() && !"".equals(module.getBuzzKeyword())) {
                weiboBuzzReachList = weiboBuzzReachDao.queryByCond(new String[]{"keyword", "timestamp", "timestamp"}, new String[]{"=", ">=", "<="}, new Object[]{module.getBuzzKeyword(), start, end});
            }
            Map<String, BuzzReach> redshiftQueryMap = Maps.newHashMap();
            for (CrmWeiboBuzzReach reach : weiboBuzzReachList) {
                String singleStr = DateUtils.calToDateStringWithFormat(DateUtils.timestamp2GMT8Calendar(reach.getTimestamp()),"yyyy-MM-dd");
                Long retweets_count_0 = (null == reach.getRetweetsCount0()) ? 0 : reach.getRetweetsCount0();
                Long retweets_count_1 = (null == reach.getRetweetsCount1()) ? 0 : reach.getRetweetsCount1();
                Long comments_count_0 = (null == reach.getCommentsCount0()) ? 0 : reach.getCommentsCount0();
                Long comments_count_1 = (null == reach.getCommentsCount1()) ? 0 : reach.getCommentsCount1();
                BuzzReach singleReach = redshiftQueryMap.get(singleStr);
                if (null != singleReach) {
                    singleReach.setG0(singleReach.getG0() + reach.getG0Reach());
                    singleReach.setG1(singleReach.getG1() + reach.getG1Reach());
                    singleReach.setG2(singleReach.getG2() + reach.getG2Reach());
                    singleReach.setCommentCount0(singleReach.getCommentCount0() + comments_count_0);
                    singleReach.setCommentCount1(singleReach.getCommentCount1() + comments_count_1);
                    singleReach.setRetweetCount0(singleReach.getRetweetCount0() + retweets_count_0);
                    singleReach.setRetweetCount1(singleReach.getRetweetCount1() + retweets_count_1);
                } else {
                    singleReach = new BuzzReach(scope, singleStr, reach.getG0Reach(), reach.getG1Reach(), reach.getG2Reach(), retweets_count_0, comments_count_0, retweets_count_1, comments_count_1);
                    redshiftQueryMap.put(singleStr, singleReach);
                }
            }
            List<BuzzReach> buzzReaches = Lists.newArrayList();
            for (Map.Entry<String, BuzzReach> entry : redshiftQueryMap.entrySet()) {
                buzzReaches.add(entry.getValue());
            }
            reachDao.batchInsert(buzzReaches);
        }
    }

    public void calTodayBuzzReach(Module module) {
        try {
            HourlyBuzzReachDao reachDao = new HourlyBuzzReachDao();
            String buzzKeyword = module.getBuzzKeyword();
            if (null == buzzKeyword || "".equals(buzzKeyword)) {
                return;
            } else {
                String scope = module.getScope();
                Calendar startTime = DateUtils.getMidNight();
                long start = startTime.getTime().getTime();
                long end = System.currentTimeMillis();
                PaginatedQueryList<WeiboBuzzReach> queryList = WeiboBuzzReach.query(WeiboBuzzReach.class, buzzKeyword, start, end, false);
                Map<String, HourlyBuzzReach> dynamodbQueryMap = Maps.newHashMap();
                for (WeiboBuzzReach reach : queryList) {
                    String singleStr = DateUtils.calToDateStringWithFormat(DateUtils.timestamp2GMT8Calendar(reach.getTimestamp()), "yyyy-MM-dd HH");
                    HourlyBuzzReach singleReach = dynamodbQueryMap.get(singleStr);
                    if (null != singleReach) {
                        singleReach.setG0(singleReach.getG0() + reach.getG0Reach());
                        singleReach.setG1(singleReach.getG1() + reach.getG1Reach());
                        singleReach.setG2(singleReach.getG2() + reach.getG2Reach());
                    } else {
                        singleReach = new HourlyBuzzReach(scope, singleStr, 0L,0L, 0L);
                        dynamodbQueryMap.put(singleStr, singleReach);
                    }
                }
                List<HourlyBuzzReach> buzzReaches = Lists.newArrayList();
                for (Map.Entry<String, HourlyBuzzReach> entry : dynamodbQueryMap.entrySet()) {
                    buzzReaches.add(entry.getValue());
                }
                reachDao.batchInsert(buzzReaches);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void calTodayBuzzReachFromRedshift(Module module) {
        try {
            HourlyBuzzReachDao reachDao = new HourlyBuzzReachDao();
            CrmWeiboBuzzReachDao weiboBuzzReachDao = new CrmWeiboBuzzReachDao();
            String buzzKeyword = module.getBuzzKeyword();
            if (null == buzzKeyword || "".equals(buzzKeyword)) {
                return;
            } else {
                String scope = module.getScope();
                Calendar startTime = DateUtils.getMidNight();
                long start = startTime.getTime().getTime();
                long end = System.currentTimeMillis();
                reachDao.clearByCond(new String[]{"scope"}, new String[]{"="}, new Object[]{scope});
                List<CrmWeiboBuzzReach> weiboBuzzReachList = Lists.newArrayList();
                if (null != module.getBuzzKeyword() && !"".equals(module.getBuzzKeyword())) {
                    weiboBuzzReachList = weiboBuzzReachDao.queryByCond(new String[]{"keyword", "timestamp", "timestamp"}, new String[]{"=", ">=", "<="}, new Object[]{module.getBuzzKeyword(), start, end});
                }
                Map<String, HourlyBuzzReach> redshiftQueryMap = Maps.newHashMap();
                for (CrmWeiboBuzzReach reach : weiboBuzzReachList) {
                    String singleStr = DateUtils.calToDateStringWithFormat(DateUtils.timestamp2GMT8Calendar(reach.getTimestamp()), "yyyy-MM-dd HH");
                    HourlyBuzzReach singleReach = redshiftQueryMap.get(singleStr);
                    if (null != singleReach) {
                        singleReach.setG0(singleReach.getG0() + reach.getG0Reach());
                        singleReach.setG1(singleReach.getG1() + reach.getG1Reach());
                        singleReach.setG2(singleReach.getG2() + reach.getG2Reach());
                    } else {
                        singleReach = new HourlyBuzzReach(scope, singleStr, 0L,0L, 0L);
                        redshiftQueryMap.put(singleStr, singleReach);
                    }
                }
                List<HourlyBuzzReach> buzzReaches = Lists.newArrayList();
                for (Map.Entry<String, HourlyBuzzReach> entry : redshiftQueryMap.entrySet()) {
                    buzzReaches.add(entry.getValue());
                }
                reachDao.batchInsert(buzzReaches);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void updateTodayDataVersion(Module module) {
        String scope = module.getScope();
        DashboardDao dashboardDao = new DashboardDao();
        dashboardDao
                .execute("update dashboards set version = version + 1 where scope = '"
                        + scope + "' and period = 'today' order by id asc;");
        dashboardDao.clearByCond(new String[]{"scope", "version"},
                new String[]{"=", ">"}, new Object[]{scope, MAX_VERSION});
        HourlyAnalyticDao analyticDao = new HourlyAnalyticDao();
        analyticDao.clearByCond(new String[]{"scope", "version"},
                new String[]{"=", ">"}, new Object[]{scope, MAX_VERSION});
        analyticDao
        .execute("update hourly_analytics set version = version + 1 where scope = '"
                + scope + "' order by id asc;");
        TodayThreadDao threadDao = new TodayThreadDao();
        threadDao.clearByCond(new String[]{"scope", "version"},
                new String[]{"=", ">"}, new Object[]{scope, MAX_VERSION});
        threadDao
                .execute("update today_threads set version = version + 1 where scope = '"
                        + scope + "' and period = 'today' order by id asc;");
        
        TopicDao topicDao = new TopicDao();
        topicDao.clearByCond(new String[]{"scope", "version"}, new String[]{
                "=", ">"}, new Object[]{scope, MAX_VERSION});
        topicDao.execute("update topics set version = version + 1 where scope = '"
                + scope + "' and period = 'today' order by id asc;");
        
        module.updateTodayTimestamp(System.currentTimeMillis());
    }

    public void handleTodayModuleError(Module module, String msg) {
        try {
            clearTodayErrorData(module);
            String[] mailTo = new String[]{"771842634@qq.com"};
            ActsocialMailSender.sendMonitorEmail(msg, mailTo);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void clearTodayErrorData(Module module) {
        String scope = module.getScope();
        DashboardDao dashboardDao = new DashboardDao();
        dashboardDao.clearByCond(new String[]{"scope", "period", "version"},
                new String[]{"=", "=", "="}, new Object[]{scope, "today",
                DEFAULT_VERSION});
        HourlyAnalyticDao analyticDao = new HourlyAnalyticDao();
        analyticDao.clearByCond(new String[]{"scope", "version"},
                new String[]{"=", "="}, new Object[]{scope,
                DEFAULT_VERSION});
        TodayThreadDao threadDao = new TodayThreadDao();
        threadDao.clearByCond(new String[]{"scope", "version"},
                new String[]{"=", "="}, new Object[]{scope,
                DEFAULT_VERSION});

    }

    public void enqueueParent5() {
        ModuleDao moduleDao = new ModuleDao();
        moduleDao.updateByCond(new String[]{"parent"}, new Object[]{null}, new String[]{"parent"}, new String[]{"="}, new Object[]{""});
        List<Module> modules = moduleDao.queryByCond(new String[]{"parent", "priority", "enable"}, new String[]{"=", "=", "="}, new Object[]{null, 5, true});
        if (modules != null) {
            for (Module m : modules) {
                SQS.enqueue(m);
//                SQS.enqueueStart(m);
            }
        }
    }

    public void enqueueParent0() {
        ModuleDao moduleDao = new ModuleDao();
        moduleDao.updateByCond(new String[]{"parent"}, new Object[]{null}, new String[]{"parent"}, new String[]{"="}, new Object[]{""});
        moduleDao.updateByCond(new String[]{"priority"}, new Object[]{0}, new String[]{"priority"}, new String[]{"="}, new Object[]{null});
        List<Module> modules = moduleDao.queryByCond(new String[]{"parent", "priority", "enable"}, new String[]{"=", "=", "="}, new Object[]{null, 0, true});
        if (modules != null) {
            for (Module m : modules) {
                SQS.enqueue(m);
//                SQS.enqueueStart(m);
            }
        }
    }

    public void enqueueParentHourly5() {
        ModuleDao moduleDao = new ModuleDao();
        List<Module> modules = moduleDao.queryByCond(new String[]{"parent",
                "priority", "enable"}, new String[]{"=", "=", "="},
                new Object[]{null, 5, true});
        if (modules != null) {
            for (Module m : modules) {
                SQS.pushTo(SQS.Name.ACTSOCIAL_HOURLY_QUEUE, m.getScope());
            }
        }
    }

    public void enqueueParentHourly0() {
        ModuleDao moduleDao = new ModuleDao();
        List<Module> modules = moduleDao.queryByCond(new String[]{"parent",
                "priority", "enable"}, new String[]{"=", "=", "="},
                new Object[]{null, 0, true});
        if (modules != null) {
            for (Module m : modules) {
                SQS.pushTo(SQS.Name.ACTSOCIAL_HOURLY_QUEUE, m.getScope());
            }
        }
    }

    public void enqueueChildrenToActsocialQueue(Module module) {
        ModuleDao moduleDao = new ModuleDao();
        List<Module> children = moduleDao.queryByCond(new String[]{"parent", "enable"}, new String[]{"=", "="}, new Object[]{module.getScope(), 1});
        if (children != null) {
            for (Module m : children) {
                if(module.getPriority().equals(5)){
                    SQS.pushTo(SQS.Name.ACTSOCIAL_QUEUE_5, m.getScope());
                }else{
                    SQS.pushTo(SQS.Name.ACTSOCIAL_QUEUE, m.getScope());
                }
            }
        }
    }

    public void enqueueChildren(Module module) {
        ModuleDao moduleDao = new ModuleDao();
        List<Module> children = moduleDao.queryByCond(new String[]{"parent",
                "enable"}, new String[]{"=", "="},
                new Object[]{module.getScope(), 1});
        if (children != null) {
            for (Module m : children) {
                SQS.enqueue(m);
            }
        }
    }

    public void enqueueTodayChildren(Module module) {
        ModuleDao moduleDao = new ModuleDao();
        List<Module> modules = moduleDao.queryByCond(new String[]{"parent",
                "enable"}, new String[]{"=", "="},
                new Object[]{module.getScope(), 1});
        if (modules != null) {
            for (Module m : modules) {
                SQS.pushTo(Name.ACTSOCIAL_HOURLY_QUEUE, m.getScope());
            }
        }
    }

    public void resetPostsCache(Module module, Calendar lastTime) {
        DailyThreadDao dailyThreadDao = new DailyThreadDao();
        List<Map> ids = dailyThreadDao.queryDailyThreadsIdForResetCache(module,
                lastTime);
        for (Map map : ids) {
            String thread_id = (String) map.get("thread_id");
            Long posts = (Long) map.get("posts");
            Long pages = posts / 100;
            for (Integer i = 0; i <= pages; i++) {
                if (i == 0) {
                    Object result = ElasticCache.get(thread_id,CacheName.POST);
                    if (result != null) {
                    	ElasticCache.doCache(thread_id, (byte[])result, CacheName.POST);
//                        client.set(thread_id,
//                                60 * 60 * 24 * ElasticCache.EXPIRE_DAY, result);
                    }
                } else {
                	Object result = ElasticCache.get(thread_id + "_" + i,CacheName.POST);
//                    Object result = client.get(thread_id + "_" + i);
                    if (result != null) {
                    	ElasticCache.doCache(thread_id + "_" + i, (byte[])result, CacheName.POST);
//                        client.set(thread_id + "_" + i,
//                                60 * 60 * 24 * ElasticCache.EXPIRE_DAY, result);
                    }
                }
            }
        }
    }

    public void generateCacheForWeiboFollowerOverview(String scope) {
        if (Module.loadByScope(scope) == null) {
            return;
        }
        Module moduleThis = Module.loadByScope(scope);
        Map<String, BasicDate> periodConditions = moduleThis.getTodoBasicCalendarMap();
        WeiboKolCuserFollowerResultDao dao = new WeiboKolCuserFollowerResultDao();
        dao.clearByCond(new String[]{"cuserId", "version"}, new String[]{
                "=", "="}, new Object[]{scope, MAX_VERSION});
        try (Connection connection = Mysql
                .getConnection(Mysql.DataBase.ACTSOCIAL);) {
            for (Entry<String, BasicDate> e3 : periodConditions.entrySet()) {
                Double spammerRate = WeiboKolCuserFollower.querySpammerRate(scope, e3.getKey());
                for (Entry<String, String> e1 : verifiedConds.entrySet()) {
                    for (Entry<String, String> e2 : genderConds.entrySet()) {
                        for (Entry<String, String> e4 : followerCountConds
                                .entrySet()) {
                            for (Entry<String, String> e5 : locationConds
                                    .entrySet()) {
                                WeiboKolCuserFollowerResult wkcfr = new WeiboKolCuserFollowerResult();
                                wkcfr.setCuserId(scope);
                                wkcfr.setVerifiedCond(e1.getKey());
                                wkcfr.setGenderCond(e2.getKey());
                                wkcfr.setPeriod(e3.getKey());
                                wkcfr.setFollowerCond(e4.getKey());
                                wkcfr.setLocationCond(e5.getKey());
                                for (int i = 0; i < queries.length; i++) {
                                    Query query = queries[i];
                                    StringBuilder sqlTpl = new StringBuilder(
                                            "select ")
                                            .append(query.getSelect())
                                            .append(" from weibo_kol_cuser_followers_date")
                                            .append(" where cuser_id = '")
                                            .append(scope).append("' ");
                                    if (query.getWhere() != null) {
                                        sqlTpl.append(" AND ").append(
                                                query.getWhere());
                                    }
                                    if (e1.getValue() != null) {
                                        // sqlTpl.append(" AND verified_type in (").append(e1.getValue()).append(") ");
                                        sqlTpl.append(
                                                " AND verified_type_group  = '")
                                                .append(e1.getValue())
                                                .append("' ");
                                    }
                                    if (e2.getValue() != null) {
                                        sqlTpl.append(" AND gender = '")
                                                .append(e2.getValue())
                                                .append("' ");
                                    }
                                    if (e3.getValue() != null) {
                                        sqlTpl.append(" AND date_time >= ? and date_time < ? ");
                                    }
                                    if (e4.getValue() != null) {
                                        // String between = e4.getValue();
                                        // Matcher m =
                                        // digitPattern.matcher(between);
                                        // if(m.find()){
                                        // sqlTpl.append(" AND followers_count >= ").append(m.group());
                                        // }
                                        // if(m.find()){
                                        // sqlTpl.append(" AND followers_count < ").append(m.group());
                                        // }
                                        sqlTpl.append(
                                                " AND followers_count_group = '")
                                                .append(e4.getValue())
                                                .append("' ");
                                    }
                                    if (e5.getValue() != null) {
                                        sqlTpl.append(" AND province = '")
                                                .append(e5.getValue())
                                                .append("' ");
                                    }
                                    if (query.getGroup() != null) {
                                        sqlTpl.append(" group by ").append(
                                                query.getGroup());
                                    }
                                    try (PreparedStatement pstmt = connection.prepareStatement(sqlTpl.toString());) {
                                        BasicDate singleBasicDate = e3.getValue();
                                        System.out.println("time ________" + scope + e3.getKey() + "   " + (singleBasicDate.getStartTime().getTime().getTime() - 8 * 3600 * 1000));
                                        System.out.println("time ________" + scope + e3.getKey() + "   " + (singleBasicDate.getEndTime().getTime().getTime() - 8 * 3600 * 1000));
                                        pstmt.setTimestamp(1, new Timestamp(singleBasicDate.getStartTime().getTime().getTime() - 8 * 3600 * 1000));
                                        pstmt.setTimestamp(2, new Timestamp(singleBasicDate.getEndTime().getTime().getTime() - 8 * 3600 * 1000));
                                        ResultSet rs = pstmt.executeQuery();
                                        boolean exist = false;

                                        switch (query.getName()) {
                                            case "overview":
                                                if (rs.next()) {
                                                    exist = true;
                                                    wkcfr.setCount(rs
                                                            .getInt("count"));
                                                    wkcfr.setInfluence(rs
                                                            .getInt("influence"));
                                                }
                                                break;
                                            case "interactive":
                                                if (rs.next()) {
                                                    Integer interactiveCount = rs
                                                            .getInt("count");
                                                    wkcfr.setInteractiveCount(interactiveCount);
                                                }
                                                break;
                                            case "gender":
                                                Map<String, Integer> gender = new HashMap<String, Integer>();
                                                while (rs.next()) {
                                                    gender.put(
                                                            rs.getString("gender"),
                                                            rs.getInt("count"));
                                                }
                                                wkcfr.setGender(gender);
                                                break;
                                            case "follower":
                                                Map<String, Integer> followers = new HashMap<String, Integer>();
                                                while (rs.next()) {
                                                    followers
                                                            .put(rs.getString("followers_count_group"),
                                                                    rs.getInt("count"));
                                                }
                                                wkcfr.setFollowers(followers);
                                                break;
                                            case "verified":
                                                Map<String, Integer> verified = new HashMap<String, Integer>();
                                                while (rs.next()) {
                                                    // if(rs.getInt("verified_type")
                                                    // == -1){
                                                    // verified.put("Normal",
                                                    // rs.getInt("count"));
                                                    // }else
                                                    // if(rs.getInt("verified_type")
                                                    // == 200 ||
                                                    // rs.getInt("verified_type") ==
                                                    // 220){
                                                    // if(verified.get("Master") ==
                                                    // null){
                                                    // verified.put("Master", 0);
                                                    // }
                                                    // verified.put("Master",
                                                    // verified.get("Master")+rs.getInt("count"));
                                                    // }else{
                                                    // if(verified.get("Verified")
                                                    // == null){
                                                    // verified.put("Verified", 0);
                                                    // }
                                                    // verified.put("Verified",
                                                    // verified.get("Verified")+rs.getInt("count"));
                                                    // }
                                                    verified.put(
                                                            rs.getString("verified_type_group"),
                                                            rs.getInt("count"));
                                                }
                                                wkcfr.setNewVerified(verified
                                                        .get("verified") == null ? 0
                                                        : verified.get("verified"));
                                                wkcfr.setVerified(verified);
                                                break;
                                            case "location":
                                                Map<String, Integer> location = new HashMap<String, Integer>();
                                                while (rs.next()) {
                                                    location.put(rs
                                                            .getString("province"),
                                                            rs.getInt("count"));
                                                }
                                                wkcfr.setLocations(location);
                                                break;
                                            case "zombie":
                                                Map<String, Integer> zombie = new HashMap<String, Integer>();
                                                Map<String, Double> zombiePer = new HashMap<String, Double>();
                                                Integer total = 0;
                                                while (rs.next()) {
                                                    Integer count = rs
                                                            .getInt("count");
                                                    if (!"all".equalsIgnoreCase(rs
                                                            .getString("type"))) {
                                                        zombie.put(rs
                                                                .getString("type"),
                                                                count);
                                                        total += (count == null ? 0
                                                                : count);
                                                    }
                                                }
                                                wkcfr.setHuman("N/A");
                                                if (zombie.size() > 0) {
                                                    Integer humanCount = zombie
                                                            .get("human");
                                                    if (humanCount != null) {
                                                        wkcfr.setHuman(NumberUtils.toDecimal1(humanCount
                                                                .doubleValue()
                                                                / total
                                                                * 100
                                                                * spammerRate)
                                                                + "%");
                                                        zombiePer
                                                                .put("human",
                                                                        NumberUtils
                                                                                .toDecimal4(humanCount
                                                                                        .doubleValue()
                                                                                        / total
                                                                                        * spammerRate));
                                                    }
                                                    Integer zombieCount = zombie
                                                            .get("zombie");
                                                    if (zombieCount != null) {
                                                        zombiePer
                                                                .put("zombie",
                                                                        NumberUtils
                                                                                .toDecimal4(zombieCount
                                                                                        .doubleValue()
                                                                                        / total
                                                                                        * spammerRate));
                                                    }
                                                    Integer suspectCount = zombie
                                                            .get("suspect");
                                                    if (suspectCount != null) {
                                                        zombiePer
                                                                .put("suspect",
                                                                        NumberUtils
                                                                                .toDecimal4(suspectCount
                                                                                        .doubleValue()
                                                                                        / total
                                                                                        * spammerRate));
                                                    }
                                                    zombiePer
                                                            .put("spammer",
                                                                    NumberUtils
                                                                            .toDecimal4(1 - spammerRate));
                                                } else {
                                                    zombiePer.put("unknown", 1.0);
                                                }
                                                wkcfr.setZombies(zombiePer);
                                                break;
                                        }
                                        if (!exist) {
                                            if ("overview".equals(query
                                                    .getName())) {
                                                break;
                                            }
                                        }
                                    }
                                }
                                wkcfr.setVersion(-1);
                                if (wkcfr.getCount() != null
                                        && wkcfr.getCount() > 0) {
                                    Utils.logger
                                            .info("save WeiboKolCuserFollower");
                                    wkcfr.save();
                                }
                            }
                        }
                    }
                }
            }
            dao.clearByCond(new String[]{"cuserId", "version"},
                    new String[]{"=", ">"}, new Object[]{scope,
                    MAX_VERSION});
            dao.execute("update weibo_kol_cuser_followers_results set version = version + 1 where cuserId = '"
                    + scope + "' order by version desc;");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void moveBuzzDataFromDynamodbToMysql(Module module, long timestamp) {
        try {
            BuzzAnalyticDao buzzAnalyticDao = new BuzzAnalyticDao();
            Map<String, Object> params = Maps.newHashMap();
            params.put("scope", module.getScope());
            buzzAnalyticDao.clearByCond(new String[]{"scope"}, new String[]{"="}, new Object[]{module.getScope()});
            List<Map> maxDateMap = buzzAnalyticDao
                    .executeQuery(
                            "SELECT date FROM buzz_analytics WHERE scope=@scope ORDER BY date DESC LIMIT 1",
                            params);
            int ndaysAgo = 181;
            Map<Long, WeiboBuzzVolume> buzzDistribution = actsocialDataQuerier
                    .queryBuzzDistributionByDay2(
                            module,
                            DateUtils.getNDaysAgo(
                                    DateUtils.getMidNight(timestamp), ndaysAgo),
                                    DateUtils.getNDaysLater(DateUtils.getMidNight(timestamp),1), timestamp);
            if (!buzzDistribution.isEmpty()) {
                List<BuzzAnalytic> analytics = new ArrayList<BuzzAnalytic>();
                for (WeiboBuzzVolume wbv : buzzDistribution.values()) {
                    Calendar date = DateUtils.getMidNight(wbv.getTimestamp());
                    try {
                        BuzzAnalytic analytic = new BuzzAnalytic(
                                module.getScope(), "all",
                                wbv.getVolumeDup() == null ? 0 : wbv
                                        .getVolumeDup(),
                                wbv.getVolumeNoDup() == null ? 0 : Integer
                                        .valueOf(wbv.getVolumeNoDup()
                                                .toString()), date, 0L, 0L, 0L,
                                null, 0.0, "42", "Weibo", module.isTransient());
                        analytics.add(analytic);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                buzzAnalyticDao.batchInsert(analytics);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void moveBuzzDataFromRedshiftToMysql(Module module, long timestamp,Period period) {
            BuzzAnalyticDao buzzAnalyticDao = new BuzzAnalyticDao();
            CrmWeiboBuzzVolumeDao buzzVolumeDao = new CrmWeiboBuzzVolumeDao();
            Map<String, Object> params = Maps.newHashMap();
            params.put("scope", module.getScope());
            buzzAnalyticDao.clearByCond(new String[]{"scope","date","date"}, new String[]{"=",">=","<="}, new Object[]{module.getScope(),period.getStart(),period.getEnd()});
            List<CrmWeiboBuzzVolume> weiboBuzzVolumeList = Lists.newArrayList();
            if(module.isIndustry()){
            	ModuleDao md = new ModuleDao();
            	List<String> rs = md.queryOnlynumBuzzKeywordInIndustry(module.getScope());
            	for (String s : rs) {
            		weiboBuzzVolumeList.addAll(buzzVolumeDao.queryByCond(new String[]{"keyword", "timestamp", "timestamp"}, new String[]{"=", ">=", "<="}, new Object[]{s,
                            DateUtils.getNDaysAgo(period.getStart(),1).getTimeInMillis(), DateUtils.getNDaysLater(period.getEnd(),1).getTimeInMillis()}));
				}
            }else{
            	if(module!= null && module.getBuzzKeyword()!=null && !"".equals(module.getBuzzKeyword())){
                    weiboBuzzVolumeList = buzzVolumeDao.queryByCond(new String[]{"keyword", "timestamp", "timestamp"}, new String[]{"=", ">=", "<="}, new Object[]{module.getBuzzKeyword(),
                            DateUtils.getNDaysAgo(period.getStart(),1).getTimeInMillis(), DateUtils.getNDaysLater(period.getEnd(),1).getTimeInMillis()});
                }
            }
            if (weiboBuzzVolumeList.size() > 0) {
                List<BuzzAnalytic> analytics = new ArrayList<BuzzAnalytic>();
                Map<Long,BuzzAnalytic> analyticMaps = new HashMap<Long,BuzzAnalytic>();
                for (CrmWeiboBuzzVolume wbv : weiboBuzzVolumeList) {
                    Calendar date = DateUtils.getMidNight(wbv.getTimestamp());
                    if(date.compareTo(period.getStart()) > -1 && date.compareTo(period.getEnd()) < 1){
                    	try {
                    		BuzzAnalytic analytic = analyticMaps.get(date.getTimeInMillis());
                    		if(analytic == null){
	                            analytic = new BuzzAnalytic(module.getScope(), "all",wbv.getVolumeDup() == null ? 0 : wbv.getVolumeDup(),
	                                    wbv.getVolumeNoDup() == null ? 0 : Integer.valueOf(wbv.getVolumeNoDup().toString()), date, 0L, 0L, 0L, null, 0.0, "42", "Weibo", module.isTransient());
                    		}else{
                    			analytic.setPosts(analytic.getPosts() + (wbv.getVolumeDup() == null ? 0 : wbv.getVolumeDup()));
                    			analytic.setThreads(analytic.getThreads() + (wbv.getVolumeNoDup() == null ? 0 : Integer.valueOf(wbv.getVolumeNoDup().toString())));
                    		}
                            analytics.add(analytic);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }
                buzzAnalyticDao.batchInsert(analytics);
            }
    }

    public void finishModuleCustomRange(Module module, String period) {
        String scope = module.getScope();
        DashboardDao dashboardDao = new DashboardDao();
        dashboardDao.clearByCond(new String[]{"scope", "version", "period"},
                new String[]{"=", ">", "="}, new Object[]{scope,
                MAX_VERSION, period});
        dashboardDao
                .execute("update dashboards set version = version + 1 where scope = '"
                        + scope
                        + "' and period = '"
                        + period
                        + "' order by id asc;");
        ThreadDao threadDao = new ThreadDao();
        threadDao.clearByCond(new String[]{"scope", "version", "period"},
                new String[]{"=", ">", "="}, new Object[]{scope,
                MAX_VERSION, period});
        threadDao
                .execute("update threads set version = version + 1 where scope = '"
                        + scope
                        + "' and period = '"
                        + period
                        + "' order by version desc;");
        TopicDao topicDao = new TopicDao();
        topicDao.clearByCond(new String[]{"scope", "version", "period"},
                new String[]{"=", ">", "="}, new Object[]{scope,
                MAX_VERSION, period});
        topicDao.execute("update topics set version = version + 1 where scope = '"
                + scope + "' and period = '" + period + "' order by id asc;");
        CustomRangeDao customRangeDao = new CustomRangeDao();
        customRangeDao.updateByCond(new String[]{"status", "percentage"},
                new Object[]{0, 100}, new String[]{"scope", "period"},
                new String[]{"=", "="}, new Object[]{module.getScope(),
                period});
    }

    /**
     * 计算weibo_top_post
     *
     * @param module
     */
    public void calculateWeiboTopPost(Module module) {
        Calendar midNight = DateUtils.getMidNight();
        String scope = module.getScope();
        WeiboTopPostTempDao tempDao = new WeiboTopPostTempDao();
        WeiboTopPostDao topPostDao = new WeiboTopPostDao();
        for (int i = 1; i <= 90; i++) {
            try {
                Calendar startDate = DateUtils.getNDaysAgo(midNight, i);
                Calendar endDate = DateUtils.getNDaysAgo(midNight, (i - 1));
                List<WeiboTopPostTemp> repostTempList = tempDao.queryByCond(
                        new String[]{"scope", "data_type", "date", "date"},
                        new String[]{"=", "=", ">=", "<"}, new Object[]{
                        scope, "repost",
                        new Timestamp(startDate.getTime().getTime()),
                        new Timestamp(endDate.getTime().getTime())});
                List<WeiboTopPostTemp> commentTempList = tempDao.queryByCond(
                        new String[]{"scope", "data_type", "date", "date"},
                        new String[]{"=", "=", ">=", "<"}, new Object[]{
                        scope, "comment",
                        new Timestamp(startDate.getTime().getTime()),
                        new Timestamp(endDate.getTime().getTime())});
                long repostNumber = 0;
                long commentNumber = 0;
                for (WeiboTopPostTemp postTemp : repostTempList) {
                    repostNumber = repostNumber + postTemp.getNumber();
                }
                for (WeiboTopPostTemp postTemp : commentTempList) {
                    commentNumber = commentNumber + postTemp.getNumber();
                }
                Collections.sort(repostTempList,
                        new Comparator<WeiboTopPostTemp>() {
                            @Override
                            public int compare(WeiboTopPostTemp ti1,
                                               WeiboTopPostTemp ti2) {
                                if (ti1.getNumber() > ti2.getNumber()) {
                                    return -1;
                                } else if (ti1.getNumber() < ti2.getNumber()) {
                                    return 1;
                                } else {
                                    return 0;
                                }
                            }
                        });
                Collections.sort(commentTempList,
                        new Comparator<WeiboTopPostTemp>() {
                            @Override
                            public int compare(WeiboTopPostTemp ti1,
                                               WeiboTopPostTemp ti2) {
                                if (ti1.getNumber() > ti2.getNumber()) {
                                    return -1;
                                } else if (ti1.getNumber() < ti2.getNumber()) {
                                    return 1;
                                } else {
                                    return 0;
                                }
                            }
                        });
                int repostCnt = 0, commentCnt = 0;
                String seperator = "||||||";
                String repostResult = "", commentResult = "";

                for (WeiboTopPostTemp postTemp : repostTempList) {
                    Map<String, Object> repostMap = Maps.newHashMap();
                    repostCnt++;
                    if (repostCnt > 3) {
                        break;
                    }
                    Double percent = NumberUtils.toDecimal4((double) postTemp
                            .getNumber() / repostNumber);
                    String percentage = NumberUtils.toDecimal1(percent * 100)
                            + "%";
                    repostMap.put("title", postTemp.getTweetText());
                    repostMap.put("percent", percentage);
                    repostMap.put("threadId", postTemp.getTweetId());
                    repostMap.put("posts", postTemp.getNumber());
                    repostMap.put("media", "Weibo");
                    repostResult += JsonParser.map2Json(repostMap) + seperator;
                }

                for (WeiboTopPostTemp postTemp : commentTempList) {
                    commentCnt++;
                    if (commentCnt > 3) {
                        break;
                    }
                    Map<String, Object> commentMap = Maps.newHashMap();
                    Double percent = NumberUtils.toDecimal4((double) postTemp
                            .getNumber() / commentNumber);
                    String percentage = NumberUtils.toDecimal1(percent * 100)
                            + "%";
                    commentMap.put("title", postTemp.getTweetText());
                    commentMap.put("percent", percentage);
                    commentMap.put("threadId", postTemp.getTweetId());
                    commentMap.put("posts", postTemp.getNumber());
                    commentMap.put("media", "Weibo");
                    commentResult += JsonParser.map2Json(commentMap)
                            + seperator;
                }
                WeiboTopPost repostTopPost = new WeiboTopPost(scope, "repost",
                        startDate.getTime(), repostResult, 0);
                WeiboTopPost commetTopPost = new WeiboTopPost(scope, "comment",
                        startDate.getTime(), commentResult, 0);
                List<WeiboTopPost> resultList = Lists.newArrayList(
                        repostTopPost, commetTopPost);
                topPostDao.batchInsert(resultList);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

	public void refreshAlert(Module module,long timestamp) {
		AlertRuleDao arDao = new AlertRuleDao();
		List<AlertRule> ars = arDao.queryByCond(new String[]{"scope"}, new String[]{"="}, new Object[]{module.getScope()});
		AlertDetailDao adDao = new AlertDetailDao();
		if(ars != null){
			for (AlertRule alertRule : ars) {
				List<AlertDetail> ads = adDao.queryBySql("created_at > '"+DateUtils.date2MysqlFormat(DateUtils.getNDaysAgo(DateUtils.getMidNight(timestamp), 1))+"' and alert_id in (select id from alerts where alert_rule_id = "+alertRule.getId()+")");
				if(ads != null){
					for (AlertDetail alertDetail : ads) {
						alertDetail.checkForUpdate();
					}
				}
			}
		}
		
		
	}


	public void recordPoint(Module module, long timestamp, Period period,
			String subject) {
		if(period!=null){
			if(period.isCustomized()){
				TaskDao dao = new TaskDao();
				if(ActsocialDataHandleActor.ABSOLUTE_SCORE.containsKey(subject)){
					Integer p = ActsocialDataHandleActor.ABSOLUTE_SCORE.get(subject);
					if(p.intValue() >= 100){
						dao.updateByCond(new String[]{"percentage","status","finished_at","updated_at"}, new Object[]{p,0,Calendar.getInstance().getTime(),Calendar.getInstance().getTime()}, new String[]{"scope","period"}, new String[]{"=","="}, new Object[]{module.getScope(),period.getName()});
					}else{
						dao.updateByCond(new String[]{"percentage"}, new Object[]{p}, new String[]{"scope","period"}, new String[]{"=","="}, new Object[]{module.getScope(),period.getName()});
					}
					
				}else if(ActsocialDataHandleActor.RELATIVE_SCORE.containsKey(subject)){
					dao.execute("update tasks set percentage = percentage + "
	                        + ActsocialDataHandleActor.RELATIVE_SCORE.get(subject) + " where scope = '" + module.getScope()
	                        + "' and period = '" + period + "'");
				}
			}
		}
	}
	
	public void enqueueCategoryToActsocialQueue(Module module) {
		if(module == null){
			return;
		}
		ModuleIndustryMappingDao mimDao = new ModuleIndustryMappingDao();
		ModuleDao mDao = new ModuleDao();
		List<ModuleIndustryMapping> mims = mimDao.queryByCond(new String[]{"brand_scope"}, new String[]{"="}, new Object[]{module.getScope()});
		Map<String,Object> params = new HashMap<String, Object>();
		params.put("updated_time", DateUtils.getMidNight());
		for (ModuleIndustryMapping moduleIndustryMapping : mims) {
			params.put("industry", moduleIndustryMapping.getIndustryScope());
			List<Map> ms = mDao.executeQuery("select scope from modules left join module_industry_mappings on scope =  brand_scope where enable = 1 and industry_scope = @industry and updated_time < @updated_time;",params);
			if(ms.size() > 0){
				LOGGER.info(ms.size() + " modules in this industry left");
				return;
			}
			Module m = Module.loadByScope(moduleIndustryMapping.getIndustryScope());
			if(m.getPriority().equals(5)){
                SQS.pushTo(SQS.Name.ACTSOCIAL_QUEUE_5, m.getScope());
            }else{
                SQS.pushTo(SQS.Name.ACTSOCIAL_QUEUE, m.getScope());
            }
		}
	}
	
	public static void main(String[] args) {
		System.out.println(Long.valueOf("1.123"));
	}


	public void enqueueAllBrand() {
		SQS.clearAll(SQS.Name.ACTSOCIAL_HOURLY_QUEUE);
		ModuleDao moduleDao = new ModuleDao();
        moduleDao.updateByCond(new String[]{"parent"}, new Object[]{null}, new String[]{"parent"}, new String[]{"="}, new Object[]{""});
        List<Module> modules = moduleDao.queryByCond(new String[]{"module_type", "enable"}, new String[]{"=", "="}, new Object[]{"brand", true});
        List<Module> weiboModules = moduleDao.queryByCond(new String[]{"module_type", "enable"}, new String[]{"=", "="}, new Object[]{"weibo", true});
        modules.addAll(weiboModules);
        if (modules != null) {
            for (Module m : modules) {
                SQS.enqueue(m);
//                SQS.enqueueStart(m);
            }
        }
	}

}

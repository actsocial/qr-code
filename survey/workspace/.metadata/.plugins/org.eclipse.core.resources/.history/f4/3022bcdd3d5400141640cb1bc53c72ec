package asia.wildfire.utils;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

public class SortUtils {

	public static Map<String, ? extends Number> sortMapByValue(Map<String, ? extends Number> oriMap) {
		Map<String, String> sortedMap = new LinkedHashMap<String, String>();
		if (oriMap != null && !oriMap.isEmpty()) {
			List<Map.Entry<String, ? extends Number>> entryList = new ArrayList<Map.Entry<String, ? extends Number>>(oriMap.entrySet());
			Collections.sort(entryList,
					new Comparator<Map.Entry<String, ? extends Number>>() {
						public int compare(Entry<String, ? extends Number> entry1,
								Entry<String, ? extends Number> entry2) {
							int value1 = 0, value2 = 0;
							try {
								value1 = getInt(entry1.getValue());
								value2 = getInt(entry2.getValue());
							} catch (NumberFormatException e) {
								value1 = 0;
								value2 = 0;
							}
							return value2 - value1;
						}
					});
			Iterator<Map.Entry<String, ? extends Number>> iter = entryList.iterator();
			Map.Entry<String, ? extends Number> tmpEntry = null;
			while (iter.hasNext()) {
				tmpEntry = iter.next();
				sortedMap.put(tmpEntry.getKey(), tmpEntry.getValue());
			}
		}
		return sortedMap;
	}
}
